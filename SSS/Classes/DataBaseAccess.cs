using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Net;
using System.Windows.Forms;
using NewExcel = Microsoft.Office.Interop.Excel;
using System.Globalization;
using System.Xml;
using System.IO.Compression;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using System.Drawing.Printing;
using CrystalDecisions.Shared;
using CrystalDecisions.CrystalReports.Engine;
using System.Threading.Tasks;

namespace SSS
{
    class DataBaseAccess : InterestCalculation
    {
        SqlCommand cmd;

        static string strJSON = "[{\"OrderCode\": \"DLO\",\"srno\": \"1\",\"date\": \"12/06/2020\",\"saleparty\": \"DL4\",\"subparty\": \"SELF\",\"transport\": \"JAI MATA DI\",\"station\": \"PATNA\",\"privatemarka\": \"\",\"Remarks\": \"\",\"purchaseparty\": \"DL149\",\"DeliveryDate\": \"06/30/2020\",\"scheme\": \"\",\"MMobileNo\": \"8802872474\",\"OrderType\": \"*\",\"Imagepath\": \"*\",\"status\": \"PENDING\",\"jsondata\": [{\"type\": \"CASE\",\"item\": \"SHIRT : 6205\",\"qty\": \"5\",\"Amt\": \"3000\"},{\"type\": \"CASE\",\"item\": \"PAINT : 6205\",\"qty\": \"3\",\"Amt\": \"6000\"}]}]";
        PrinterSettings currentPS = new PrinterSettings();

        public string[] ExcelCellName
        {
            get
            {
                string[] strName = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB", "AC", "AD", "AE", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "BA", "BB", "BC", "BD", "BE", "BC", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM", "BN", "BO", "BP", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BX", "BY", "BZ", "CA", "CB", "CC", "CD", "CE", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CJ", "CK", "CL", "CM", "CN", "CO", "CP", "CQ", "CR", "CS", "CT", "CU", "CV", "CW", "CX", "CY", "CZ" };
                return strName;
            }
        }

        public string toTitleCase(string str)
        {
            string[] strs = str.Split(' ');
            str = "";
            foreach (string s in strs)
            {
                string st = "";
                st = s.Substring(0, 1).ToUpper() + s.Substring(1, s.Length - 1).ToLower();
                str += " " + st;
            }
            return str.TrimStart().TrimEnd();
        }
        protected internal void ExportToExcel(DataGridView DGrv, string FileName = "", string Header = "")
        {
            try
            {
                if (DGrv.Rows.Count > 0)
                {
                    DGrv.SelectAll();
                    DataObject dataObj = DGrv.GetClipboardContent();
                    if (dataObj != null)
                        Clipboard.SetDataObject(dataObj);
                    DGrv.ClearSelection();

                    object misValue = System.Reflection.Missing.Value;
                    NewExcel.Application excelApp = new NewExcel.Application();
                    NewExcel.Workbook excelWorkBook = excelApp.Workbooks.Add(misValue);
                    NewExcel.Worksheet excelWorkSheet = (NewExcel.Worksheet)excelWorkBook.Worksheets.get_Item(1);

                    var saveFileDialog = new SaveFileDialog();
                    if (FileName != "")
                        saveFileDialog.FileName = FileName;
                    else
                        saveFileDialog.FileName = "Exported_Data";

                    saveFileDialog.DefaultExt = ".xls";

                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        NewExcel.Range CR = (NewExcel.Range)excelWorkSheet.Cells[1, 1];

                        CR.Select();
                        excelWorkSheet.PasteSpecial(CR, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, true);

                        NewExcel.Range line = (NewExcel.Range)excelWorkSheet.Rows[1];
                        line.Insert();

                        string strHeader = "";
                        for (int j = 1; j < DGrv.Columns.Count + 1; j++)
                        {
                            strHeader = DGrv.Columns[j - 1].HeaderText;
                            excelApp.Cells[1, j] = DGrv.Columns[j - 1].HeaderText;
                            excelApp.Cells[1, j].Font.Bold = true;
                        }
                        if (Header != "")
                        {
                            NewExcel.Range Newline = (NewExcel.Range)excelWorkSheet.Rows[1];
                            Newline.Insert();
                            NewExcel.Range range = excelWorkSheet.UsedRange;
                            string address = range.get_Address();
                            string[] cells = address.Split(new char[] { ':' });
                            string endCell = cells[1].Replace("$", "");

                            excelApp.Cells[1, 1] = Header;
                            excelApp.Cells[1, 1].Font.Bold = true;
                            excelWorkSheet.get_Range("A1:" + endCell.Substring(0, 1) + "1").Merge();
                        }
                        excelApp.Columns.AutoFit();
                        CR.Select();

                        excelWorkBook.SaveAs(saveFileDialog.FileName, NewExcel.XlFileFormat.xlWorkbookNormal, misValue, misValue, misValue, misValue, NewExcel.XlSaveAsAccessMode.xlExclusive, misValue, misValue, misValue, misValue, misValue);
                        MessageBox.Show("Thank you ! Excel exported successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    }

                    excelWorkBook.Close(true, misValue, misValue);
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(excelWorkBook);
                    excelApp.Quit();
                    System.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp);
                }
            }
            catch (Exception ex) { throw ex; }

            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public static void ConvertDataTable()
        {

            int index = strJSON.LastIndexOf('[');
            string strSubJSON = strJSON.Substring(index, strJSON.Length - index - 2);
            DataTable dtValue = (DataTable)JsonConvert.DeserializeObject(strSubJSON, (typeof(DataTable)));
            if (dtValue.Rows.Count > 0)
            {
                DataRow row = dtValue.Rows[0];
            }
        }
        public DataTable JsonStringToDataTable(string jsonString)
        {
            DataTable dt = new DataTable();
            string[] jsonStringArray = Regex.Split(jsonString.Replace("[", "").Replace("]", ""), "},{");
            List<string> ColumnsName = new List<string>();
            foreach (string jSA in jsonStringArray)
            {
                string[] jsonStringData = Regex.Split(jSA.Replace("{", "").Replace("}", ""), ",");
                foreach (string ColumnsNameData in jsonStringData)
                {
                    try
                    {
                        int idx = ColumnsNameData.IndexOf(":");
                        string ColumnsNameString = ColumnsNameData.Substring(0, idx - 1).Replace("\"", "");
                        if (!ColumnsName.Contains(ColumnsNameString))
                        {
                            ColumnsName.Add(ColumnsNameString);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(string.Format("Error Parsing Column Name : {0}", ColumnsNameData));
                    }
                }
                break;
            }
            foreach (string AddColumnName in ColumnsName)
            {
                dt.Columns.Add(AddColumnName);
            }
            foreach (string jSA in jsonStringArray)
            {
                string[] RowData = Regex.Split(jSA.Replace("{", "").Replace("}", ""), ",");
                DataRow nr = dt.NewRow();
                foreach (string rowData in RowData)
                {
                    try
                    {
                        int idx = rowData.IndexOf(":");
                        string RowColumns = rowData.Substring(0, idx - 1).Replace("\"", "");
                        string RowDataString = rowData.Substring(idx + 1).Replace("\"", "");
                        nr[RowColumns] = RowDataString;
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
                dt.Rows.Add(nr);
            }
            return dt;
        }

        public string GetBarCode(string strSerialNo, int sNo, string strCompanyCode, bool _itemMaster = false)
        {
            if (strCompanyCode == "")
                strCompanyCode = MainPage.strDataBaseFile;

            string strBCode = "";
            if (MainPage._bBarCodeStatus)
            {
                if (_itemMaster)
                {
                    strBCode = strSerialNo +""+ (Random_No_4+ sNo);
                    if (strBCode.Length > 6)
                        strBCode = strBCode.Substring(0, 6);
                    strBCode = strCompanyCode + "-" + strBCode;
                }
                else
                {
                    int _count = strCompanyCode.Length + 1;
                    if (sNo < 50)
                        strBCode = strSerialNo + "" + sNo + "" + (Random_No + sNo);
                    else
                        strBCode = strSerialNo + "" + sNo + "" + Random_No;

                    if (strBCode.Length > 6)
                        strBCode = strSerialNo + "" + sNo + "" + Random_No_2;

                    if (strBCode.Length > 6)
                        strBCode = sNo + strSerialNo + Random_No_2;

                    if (strBCode.Length > 6)
                        strBCode = strBCode.Substring(0, 6);

                    strBCode = strCompanyCode + "-" + strBCode;
                }
                return strBCode;
            }

            else if (MainPage._bCustomPurchase)
                return MainPage.strDataBaseFile;
            else
                return "";
        }
       

        public static object ExecuteMyScalar(string strQuery)
        {
            object objValue = null;
            try
            {
                SetConnectionNormal();

                if (MainPage.con.State == ConnectionState.Closed)
                {
                    MainPage.OpenConnection();
                }
                strQuery = " SET QUERY_GOVERNOR_COST_LIMIT 0; " + strQuery;

                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
                cmd.CommandTimeout = 1000000;
                objValue = cmd.ExecuteScalar();

            }
            finally
            {
                //MainPage.CloseConnection();
            }
            return objValue;
        }

        public static bool SetConnectionNormal()
        {
            try
            {
                DataTable _dt = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select 0 ", MainPage.con);
                adap.Fill(_dt);
            }
            catch { }

            return true;
        }

        public static int ExecuteMyNonQuery(string strQuery)
        {
            int count = 0;
            try
            {
                //if (MainPage.con.State == ConnectionState.Closed)
                SetConnectionNormal();

                MainPage.OpenConnection();

                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
                count = cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return count;
        }

        public static int ExecuteMyNonQuery_WithoutMsg(string strQuery)
        {
            int count = 0;
            try
            {
                SetConnectionNormal();
                MainPage.OpenConnection();
                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
                count = cmd.ExecuteNonQuery();
            }
            catch
            { }
            finally
            {
                MainPage.CloseConnection();
            }
            return count;
        }

        public static DataTable GetDataTableRecord(string strQuery)
        {
            SetConnectionNormal();
            MainPage.OpenConnection();
            DataTable dt = new DataTable();
            try
            {
                strQuery = " SET QUERY_GOVERNOR_COST_LIMIT 0; " + strQuery;
                SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                adap.SelectCommand.CommandTimeout = 1000000;
                adap.Fill(dt);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return dt;
        }

        public static DataSet GetDataSetRecord(string strQuery)
        {
            SetConnectionNormal();
            MainPage.OpenConnection();
            DataSet ds = new DataSet();
            try
            {
                strQuery = " SET QUERY_GOVERNOR_COST_LIMIT 0; " + strQuery;

                SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                adap.SelectCommand.CommandTimeout = 100000;
                adap.Fill(ds);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                string[] strReport = { ex.ToString(), MainPage.con.ConnectionString + " " + MainPage.con.DataSource + " " + MainPage.con.Database };
                CreateErrorReport(strReport);
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return ds;
        }

        public DataSet GetDataSetByProc(string ProcName, List<SqlParameter> paramss)
        {
            MainPage.OpenConnection();
            DataSet ds = new DataSet();

            SqlCommand sqlComm = new SqlCommand(ProcName, MainPage.con);
            if (paramss != null)
                sqlComm.Parameters.AddRange(paramss.ToArray());
            sqlComm.CommandType = CommandType.StoredProcedure;

            SqlDataAdapter dap = new SqlDataAdapter();
            dap.SelectCommand = sqlComm;

            dap.Fill(ds);
            MainPage.CloseConnection();
            return ds;
        }


        public static void ShowPDFFiles(string strCode, string strGRSNo)
        {
            string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\SCAN_SLIP";
            if (!MainPage.strProductType.Contains("NET"))
            {
                string strFileName = strPath + "\\" + strGRSNo + ".pdf";

                FileInfo pdfFile = new FileInfo(strFileName);
                if (pdfFile.Exists)
                {
                    System.Diagnostics.Process.Start(strFileName);
                }
                else
                {
                    MessageBox.Show("Scanned image not found of this Bill in " + strPath, "Message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                {
                    object objCompany = DataBaseAccess.ExecuteMyScalar("Select CompanyName from CompanySetting Where GReceiveCode='" + strCode + "' ");
                    if (objCompany != null)
                    {
                        string strCompany = Convert.ToString(objCompany).ToString();
                        strCompany = strCompany.Replace(" ", "");

                        strPath = MainPage.strHttpPath + "/PDF_FILE/" + strCompany + "/SCAN_SLIP/" + strGRSNo + ".pdf";
                        System.Diagnostics.Process.Start(strPath);
                    }
                }
            }
        }
        public static void ShowBiltyPDFFiles(string strCode, string strBillNo)
        {
            string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Bilty";

            if (!MainPage.strProductType.Contains("NET"))
            {
                string strFileName = strPath + "\\" + strBillNo + ".pdf";

                FileInfo pdfFile = new FileInfo(strFileName);
                if (pdfFile.Exists)
                {
                    System.Diagnostics.Process.Start(strFileName);
                }
                else
                {
                    MessageBox.Show("Scanned bilty copy not found of this Bill in " + strPath, "Message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            else
            {
                if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                {
                    object objCompany = DataBaseAccess.ExecuteMyScalar("Select CompanyName from CompanySetting Where SBillCode='" + strCode + "' ");
                    if (objCompany != null)
                    {
                        string strCompany = Convert.ToString(objCompany).ToString();
                        strCompany = strCompany.Replace(" ", "");

                        strPath = "http://ssspltd.com/PDF_FILE/" + strCompany + "/Bilty/" + strBillNo + ".pdf";

                        System.Diagnostics.Process.Start(strPath);
                    }
                }
            }
        }

        public static string GetBiltyPDFFiles(string strCode, string strSNo)
        {
            string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Bilty";
            string strFileName = strPath + "\\" + strSNo + ".pdf";
            try
            {
                FileInfo pdfFile = new FileInfo(strFileName);
                if (pdfFile.Exists)
                    return strFileName;
                else
                {
                    MessageBox.Show("Sorry ! Scanned bilty not found of this bill in " + strPath, "Message", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return "";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return "";
            }
        }


        #region Save New Company Record

        //  Save New Company Record...........

        public int SaveNewCompany(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                //MainPage.con.Open();
                //MainPage.con.ChangeDatabase("A" + record[0]);
                MainPage.ChangeDataBase("A" + record[0]);
            }

            cmd = new SqlCommand("Insert into Company values('" + record[0] + "','" + record[1] + "' ,'" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[18] + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),0)", MainPage.con);
            int count = cmd.ExecuteNonQuery();

            MainPage.CloseConnection();

            return count;
        }

        public void SaveRecordInStartingEntry(string[] record)
        {
            try
            {
                string strPath = MainPage.strServerPath + "\\Data\\" + record[0] + "\\" + record[0] + ".syber";
                StreamWriter sw = new StreamWriter(strPath);
                sw.WriteLine(record[1]);
                sw.Close();
            }
            catch
            {
            }

        }

        #endregion

        #region Save New Supplier Record
        // Save New Supplier Records ............

        public int SaveSupplierMaster(string[] record, ref string strAccountNo, string strOtherQuery)
        {
            int count = 0;

            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string strQuery = "";
            SqlTransaction transaction = MainPage.con.BeginTransaction();
            try
            {
                if (record[38] != "")
                {
                    strOtherQuery = strOtherQuery.Replace("@ID", "'" + record[38] + "'");

                    strQuery = " if not exists (Select Name from SupplierMaster Where [AccountNo]='" + record[38] + "') begin Insert into SupplierMaster ([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[Other],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[OrderAmtLimit],[Other1],[Other2],[Other3],[TransactionLockRemark],[OrangeListRemark],[OrangeListStatus]) Values "
                             + "('" + record[0] + "','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[18] + "','" + record[19] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "'," + record[24] + ",'" + record[31] + "',' ','" + record[25] + "','" + record[26] + "','" + record[27] + "','" + record[28] + "','" + record[29] + "','" + record[30] + "','" + MainPage.strLoginName + "','',0,0,'" + record[32] + "','" + record[33] + "','" + record[34] + "','" + record[35] + "','" + record[36] + "','" + record[37] + "','" + record[38] + "','" + record[39] + "',0,'" + record[40] + "','" + record[41] + "','" + record[42] + "','" + record[43] + "','" + record[44] + "','" + record[45] + "','" + record[46] + "','" + record[47] + "','" + record[48] + "','" + record[49] + "','" + record[50] + "','" + record[51] + "','" + record[52] + "','" + record[53] + "','" + record[54] + "','" + record[50] + "')  "
                             + strOtherQuery + " Insert into BalanceAmount([Date],[PartyName],[AccountID],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) values('" + record[22] + "' ,'" + record[0] + "','" + record[37] + record[38] + "' ,'OPENING' ,'" + record[4] + "' ,'' ,'" + record[3] + "','" + record[5] + "','',0,'False','',0,'" + MainPage.strLoginName + "','',0,1,0) "
                             + " Update SupplierOtherDetails Set InsertStatus=0 Where [AreaCode]='" + record[37] + "' and AccountNo='" + record[38] + "'  Update SupplierBankDetails Set InsertStatus=0 Where [AreaCode]='" + record[37] + "' and AccountNo='" + record[38] + "' Update SupplierBrandDetails Set InsertStatus=0 Where [AreaCode]='" + record[37] + "' and AccountNo='" + record[38] + "' end ";

                    cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                    count = cmd.ExecuteNonQuery();
                    transaction.Commit();
                }
                else
                {
                    strQuery = " Declare @ID varchar(20) if not exists (Select Name from SupplierMaster Where Name='" + record[0] + "' And AreaCode='" + record[37] + "') begin  Select @ID=(ISNULL(MAX(CAST(AccountNo as int)),0)+1) from SupplierMaster if not exists (Select Name from SupplierMaster Where [AccountNo]=@ID) begin Insert into SupplierMaster ([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[Other],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[OrderAmtLimit],[Other1],[Other2],[Other3],[TransactionLockRemark],[OrangeListRemark],[OrangeListStatus]) Values "
                              + "('" + record[0] + "','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[18] + "','" + record[19] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "'," + record[24] + ",'" + record[31] + "',' ','" + record[25] + "','" + record[26] + "','" + record[27] + "','" + record[28] + "','" + record[29] + "','" + record[30] + "','" + MainPage.strLoginName + "','',1,0,'" + record[32] + "','" + record[33] + "','" + record[34] + "','" + record[35] + "','" + record[36] + "','" + record[37] + "',@ID,'" + record[39] + "',0,'" + record[40] + "','" + record[41] + "','" + record[42] + "','" + record[43] + "','" + record[44] + "','" + record[45] + "','" + record[46] + "','" + record[47] + "','" + record[48] + "','" + record[49] + "','" + record[50] + "','" + record[51] + "','" + record[52] + "','" + record[53] + "','" + record[54] + "','" + record[50] + "')  "
                              + strOtherQuery + " Insert into BalanceAmount([Date],[PartyName],[AccountID],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) values('" + record[22] + "' ,'" + record[0] + "','" + record[37] + "'+@ID ,'OPENING' ,'" + record[4] + "' ,'' ,'" + record[3] + "','" + record[5] + "','',0,'False','',0,'" + MainPage.strLoginName + "','',0,1,0) Select AccountNo from SupplierMaster Where Name='" + record[0] + "' And AreaCode='" + record[37] + "' end end ";

                    cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                    object objValue = cmd.ExecuteScalar();
                    transaction.Commit();
                    strAccountNo = Convert.ToString(objValue);
                    if (strAccountNo != "")
                        count = 1;
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Saving Supplier Name in Local Party", ex.Message };
                CreateErrorReports(strReport);
                transaction.Rollback();
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return count;
        }

        public int SaveSubSalesParty(string[] record)
        {
            int count = 0;
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string strQuery = "";
            if (record[12] != "")
            {
                strQuery = "if not exists (Select Name from SupplierMaster Where Name='" + record[0] + "' and AreaCode='" + record[11] + "' and GroupName!='SUB PARTY' and HasteSale='" + record[7] + "') begin Insert into SupplierMaster (Name,GroupName,Address,State,Transport,Station,BookingStation,MobileNo,AmountLimit,HasteSale,PvtMarka,Date,CreatedBy,UpdatedBy,InsertStatus,UpdateStatus,Postage,GroupII,AreaCode,AccountNo,GSTNo,PANNumber,PinCode,PhoneNo,Remark,BlackList,BlackListReason,TransactionLock,Other,[Other1]) Values "
                              + " ('" + record[0] + "','SUB PARTY','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[18] + "','" + record[7] + "','" + record[8] + "','" + record[19] + "','" + MainPage.strLoginName + "','',0,0,'" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "','" + record[24] + "') "
                              + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                              + "('PARTYMASTER','" + record[11] + "'," + record[12] + ",DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),'" + record[18] + "','" + MainPage.strLoginName + "',0,0,'CREATION') end";
            }
            else
            {
                strQuery = "if not exists (Select Name from SupplierMaster Where Name='" + record[0] + "' and AreaCode='" + record[11] + "' and GroupName!='SUB PARTY' and HasteSale='" + record[7] + "') begin Declare @ID varchar(20) Select @ID=(ISNULL(MAX(CAST(AccountNo as int)),0)+1) from SupplierMaster Insert into SupplierMaster (Name,GroupName,Address,State,Transport,Station,BookingStation,MobileNo,AmountLimit,HasteSale,PvtMarka,Date,CreatedBy,UpdatedBy,InsertStatus,UpdateStatus,Postage,GroupII,AreaCode,AccountNo,GSTNo,PANNumber,PinCode,PhoneNo,Remark,BlackList,BlackListReason,TransactionLock,Other,[Other1]) Values "
                         + " ('" + record[0] + "','SUB PARTY','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[18] + "','" + record[7] + "','" + record[8] + "','" + record[19] + "','" + MainPage.strLoginName + "','',1,0,'" + record[9] + "','" + record[10] + "','" + record[11] + "',@ID,'" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "','" + record[24] + "') "
                         + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + " ('PARTYMASTER','" + record[11] + "',@ID,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),'" + record[18] + "','" + MainPage.strLoginName + "',0,0,'CREATION') end";
            }
            cmd = new SqlCommand(strQuery, MainPage.con);
            count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        private int SetMobileNo(string strPartyName, string strMobileNo)
        {
            int count = 0;
            try
            {
                if (strMobileNo != "")
                {
                    strMobileNo = "91" + strMobileNo;
                    string strQuery = " if not exists(Select * from WhiteListMobileNo Where MobileNo='" + strMobileNo + "') begin "
                                + " Insert into WhiteListMobileNo Values('" + strPartyName + "','" + strMobileNo + "','" + MainPage.currentDate + "','NOT WHITELISTED',1,0) end ";
                    ExecuteMyNonQuery(strQuery);
                }
            }
            catch
            {
            }
            return count;
        }

        #endregion


        #region Balance Amount


        public string GetMultiCompanyAdjustedID()
        {
            string id = "1";
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Max(MultiCompanyNo)+1 from AdjustedIds", MainPage.con);

            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    id = Convert.ToString(dt.Rows[0][0]);
                }
            }

            return id;
        }

        #endregion


        #region Save In Category

        // Save Category ............

        public int SaveCategory(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string strQuery = "if not exists (Select CategoryName from Category Where CategoryName='" + record[0] + "') begin "
                                     + " Insert into Category ([CategoryName],[DiscountDr],[DiscountCr],[InsertStatus],[UpdateStatus])  values('" + record[0] + "','" + record[1] + "','" + record[2] + "',1,0) end ";
            cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;

        }

        #endregion

        #region Save in Marketer

        public int SaveMarketer(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string strQuery = "if not exists(Select [MarketerName] from [dbo].[Marketer]  Where [MarketerName]='" + record[0] + "') begin  "
                            + " Insert into Marketer([MarketerName],[MobileNoI],[MobileNoII],[EmailID],[Address],[City],[Date],[OrderNoFrom],[OrderNoTo],[InsertStatus],[UpdateStatus],[OrderCode],[MCode]) values('" + record[0] + "','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "'," + record[7] + "," + record[8] + ",1,0,'" + record[9] + "','" + record[10] + "') end ";

            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion


        #region Save In Transport

        public int SaveNewTransport(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string strQuery = "if not exists (Select TransportName from Transport Where TransportName='" + record[0] + "') begin INSERT INTO [dbo].[Transport]([TransportName],[ContactPersonI],[ContactPersonII],[PhoneNoI],[PhoneNoII],[MobileNo],[City],[Address],[Date],[InsertStatus],[UpdateStatus],[GSTNo],[GreenTaxAmt],[CreatedBy],[UpdatedBy],[ForwardingCharges],[ExtraCharges]) VALUES "
                                    + " ('" + record[0] + "','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "',1,0,'" + record[9] + "','" + record[10] + "','" + record[11] + "','','" + record[12] + "','" + record[13] + "') "
                                    + " INSERT INTO[dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                                    + "('" + record[0] + "','TRANSPORT',0,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + ConvertObjectToDouble(record[10]) + ",'" + MainPage.strLoginName + "',1,0,'CREATION') end ";
            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion

        #region Save In Station

        public int SaveNewStation(string record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            string strQuery = "if not exists (Select StationName from Station Where StationName='" + record + "') begin INSERT INTO [dbo].[Station]([StationName],[Date],[InsertStatus],[UpdateStatus],[CreatedBy],[UpdatedBy]) VALUES ('" + record + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),1,0,'" + MainPage.strLoginName + "','')"
                           + " INSERT INTO[dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                            + "('" + record + "','STATION',0,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),0,'" + MainPage.strLoginName + "',1,0,'CREATION') end ";


            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion       

        #region Save Cartone Type

        public int SaveNewCartoneType(string record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            SqlCommand cmd = new SqlCommand("Insert into CartoneType values('" + record + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),1,0)", MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion

        #region Save Cartone Size

        public int SaveNewCartoneSize(string strCortoonSize, string strPackingAmt, string strPackingType)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            SqlCommand cmd = new SqlCommand("Insert into CartoneSize ([CSize],[PackingAmt],[PackingType],[Date],[InsertStatus],[UpdateStatus]) values('" + strCortoonSize + "','" + strPackingAmt + "','" + strPackingType + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),1,0)", MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion


        #region Save In UserAccount

        public int SaveUserAccount(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            //string strQuery = "Insert into UserAccount (LoginName,Password,Name,MobileNo,Address,JournalEntry,JournalView,JournalEdit,CashEntry,CashView,CashEdit,OrderEntry,OrderView,OrderEdit,GoodsEntry,GoodsView,GoodsEdit,SaleEntry,SaleView,SaleEdit,PurchaseEntry,PurchaseView,PurchaseEdit,ForwardingEntry,ForwardingView,ForwardingEdit,CourierEntry,CourierView,CourierEdit,NewParty,PartyView,NewPartyEdit,NewSubParty,SubPartyView,SubPartyEdit,NewAccountmaster,AccountMasterView,AccountMasterEdit,Merging,CompanyInfo,Accessories,BackupRestore,OrderSlipView,FASReport,GoodsRecivedView,ReportView,SalesReportView,ReportSummeryView,PurchaseReport,MultiCmpReportview,ForwardingReport,LedgerInterest,PrintMultiLedger,PurchaseOutStanding,CrediterDebter,ShowAmountLimit,PartyLedger,Date,BackDateEntry,SMS,Other,Reminder,DayBook,OnAccount,Extra,InsertStatus,UpdateStatus) values "
            //                       + " ('" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "',"
            //                       + "'" + record[17] + "','" + record[18] + "','" + record[19] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "','" + record[24] + "','" + record[25] + "','" + record[26] + "','" + record[27] + "','" + record[28] + "','" + record[29] + "','" + record[30] + "','" + record[31] + "','" + record[32] + "','" + record[33] + "',"
            //                       + "'" + record[34] + "','" + record[35] + "','" + record[36] + "','" + record[37] + "','" + record[38] + "','" + record[39] + "','" + record[40] + "','" + record[41] + "','" + record[42] + "','" + record[43] + "','" + record[44] + "','" + record[45] + "','" + record[46] + "','" + record[47] + "','" + record[48] + "','" + record[49] + "','" + record[50] + "','" + record[51] + "','" + record[52] + "','" + record[53] + "','" + record[54] + "','" + record[55] + "','" + record[56] + "','" + record[57] + "','" + record[58] + "','" + record[59] + "','" + record[60] + "','" + record[61] + "','" + record[62] + "','" + record[63] + "','" + record[64] + "','" + record[65] + "',1,0)  ";

            string strQuery = "Insert into UserAccount (LoginName,Password,Name,MobileNo,UserType,JournalEntry,JournalView,JournalEdit,CashEntry,CashView,CashEdit,OrderEntry,OrderView,OrderEdit,GoodsEntry,GoodsView,GoodsEdit,SaleEntry,SaleView,SaleEdit,PurchaseEntry,PurchaseView,PurchaseEdit,ForwardingEntry,ForwardingView,ForwardingEdit,CourierEntry,CourierView,CourierEdit,NewParty,PartyView,NewPartyEdit,NewSubParty,SubPartyView,SubPartyEdit,NewAccountmaster,AccountMasterView,AccountMasterEdit,Merging,CompanyInfo,Accessories,BackupRestore,OrderSlipView,FASReport,GoodsRecivedView,ReportView,SalesReportView,ReportSummeryView,PurchaseReport,MultiCmpReportview,ForwardingReport,LedgerInterest,PrintMultiLedger,PurchaseOutStanding,CrediterDebter,ShowAmountLimit,PartyLedger,Date,BackDateEntry,SMS,Other,Reminder,DayBook,OnAccount,Extra,"
                            + " BranchCode,GSTMasterEntry,GSTMasterView,GSTMasterEditDelete,RefrenceMasterEntry,RefrenceMasterView,RefrenceMasterEditDelete,LockunLockCustomer,SecurityChequePermission,AdminPanel,ChangeSupplierDisc,ChangeCustomerLimit,Dashboard,BankDetailApprove,PartyWiseSP,ChangeBankDetail,BranchWiseSP,ChangeCustomerDetail,ShowBankLedger,PartyMasterRegister,GraphicalSummary,SchemeMaster,ShowPartyLimit,ShowAllRecord,GSTReport,ShowEmailReg,showWhatsAppReg,AddNewCustomer,InsertStatus,UpdateStatus) values "
                            + " ('" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[18] + "','" + record[19] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "','" + record[24] + "','" + record[25] + "','" + record[26] + "','" + record[27] + "','" + record[28] + "','" + record[29] + "','" + record[30] + "','" + record[31] + "','" + record[32] + "','" + record[33] + "','" + record[34] + "','" + record[35] + "','" + record[36] + "','" + record[37] + "','" + record[38] + "','" + record[39] + "',"
                            + " '" + record[40] + "','" + record[41] + "','" + record[42] + "','" + record[43] + "','" + record[44] + "','" + record[45] + "','" + record[46] + "','" + record[47] + "','" + record[48] + "','" + record[49] + "','" + record[50] + "','" + record[51] + "','" + record[52] + "','" + record[53] + "','" + record[54] + "','" + record[55] + "','" + record[56] + "','" + record[57] + "','" + record[58] + "','" + record[59] + "','" + record[60] + "','" + record[61] + "',"
                            + " '" + record[62] + "','" + record[63] + "','" + record[64] + "','" + record[65] + "','" + record[66] + "','" + record[67] + "','" + record[68] + "','" + record[69] + "','" + record[70] + "','" + record[71] + "','" + record[72] + "','" + record[73] + "','" + record[74] + "','" + record[75] + "','" + record[76] + "','" + record[77] + "','" + record[78] + "','" + record[79] + "','" + record[80] + "','" + record[81] + "','" + record[82] + "','" + record[83] + "','" + record[84] + "','" + record[85] + "','" + record[86] + "','" + record[87] + "','" + record[88] + "','" + record[89] + "','" + record[90] + "','" + record[91] + "','" + record[92] + "','" + record[93] + "',1,0)  ";


            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion

        #region Save in Courier Register

        public int SaveCourierRegister(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            cmd = new SqlCommand("Insert into CourierRegister values(" + record[0] + ",'" + record[9] + "','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[11] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[10] + "','" + MainPage.strLoginName + "','',1,0)", MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion

        #region Update Company Record
        //  Update Company Record...........

        public int UpdateCompany(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            int count = 0;
            SqlTransaction transaction = MainPage.con.BeginTransaction();
            try
            {
                string strQuery = " Update Company set CompanyName='" + record[1] + "' ,BackupGroup='" + record[2] + "', Address= '" + record[3] + "' ,City= '" + record[4] + "' ,Country= '" + record[5] + "' ,PhoneOff1= '" + record[6] + "' , PhoneOff2='" + record[7] + "' , PhoneRes='" + record[8] + "' , MobileNo1='" + record[9] + "' , MobileNo2='" + record[10] + "', Next_Y_Path= '" + record[11] + "' ,Prev_Y_Path= '" + record[12] + "' , Vat_RegNo='" + record[13] + "' , CurrencyBase='" + record[14] + "' , CurrencyUnit='" + record[15] + "',	Fin_Y_Starts='" + record[16] + "' ,Fin_Y_Ends= '" + record[17] + "', Offline_Path='" + record[18] + "',UpdateStatus=1 where CompanyID=" + record[0] + " ";
                if (record[1] != MainPage.strCompanyName)
                {
                    strQuery += " Update CompanySetting set CompanyName='" + record[1] + "',UpdateStatus=1 Where CompanyName='" + MainPage.strCompanyName + "' "
                             + " Update CompanyDetails set Other='" + record[1] + "',UpdateStatus=1 Where Other='" + MainPage.strCompanyName + "' "
                             + " Update [dbo].[ProfitMargin] Set [CompanyName]='" + record[1] + "' WHere [CompanyName]='" + MainPage.strCompanyName + "'";
                }

                cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                count += cmd.ExecuteNonQuery();

                transaction.Commit();
            }
            catch
            {
                transaction.Rollback();
            }
            MainPage.CloseConnection();
            return count;

        }

        public void UpdateCompany(string record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            try
            {
                cmd = new SqlCommand("Update Company set CompanyID=" + record + ",UpdateStatus=1 ", MainPage.con);
                cmd.ExecuteNonQuery();

            }
            catch
            {

            }
            finally
            {
                MainPage.CloseConnection();
            }

        }

        #endregion

        #region Update Supplier Record
        // Update Supplier Records ............

        public int UpdateSupplierMaster(string[] record, string strParty, string strOtherQuery)
        {
            int count = 0;
            MainPage.con.Close();
            if (MainPage.con.State == ConnectionState.Closed)
                MainPage.OpenConnection();
            string strOpeningBal = "";
            if (MainPage.strUserRole.Contains("ADMIN"))
                strOpeningBal = ",OpeningBal ='" + record[3] + "',Status='" + record[4] + "'";
            DateTime _sDate = Convert.ToDateTime(record[22]);
            if (_sDate < MainPage.startFinDate)
                _sDate = MainPage.startFinDate;

            SqlTransaction transaction = MainPage.con.BeginTransaction();
            try
            {
                string strQuery = "", strNetQuery = "";

                strQuery = " Update SupplierMaster Set Name='" + record[0] + "' , Category='" + record[1] + "', GroupName='" + record[2] + "', Address='" + record[6] + "' ,State='" + record[7] + "' , PINCode='" + record[8] + "' ,Transport='" + record[9] + "', Station='" + record[10] + "',BookingStation='" + record[11] + "',"
                              + " TINNumber='" + record[12] + "',NormalDhara='" + record[13] + "',SNDhara='" + record[14] + "', ContactPerson='" + record[15] + "' ,PhoneNo='" + record[16] + "',MobileNo='" + record[17] + "',PvtMarka='" + record[18] + "', Reference='" + record[19] + "', EmailId='" + record[20] + "',"
                              + " CFormApply='" + record[23] + "',AmountLimit=" + record[24] + ",PermanentAddress='" + record[25] + "' ,SecondTransport='" + record[26] + "',ThirdTransport='" + record[27] + "',FourthTransport='" + record[28] + "', Remark='" + record[29] + "', ExtendedAmt='" + record[31] + "',UpdatedBy='" + MainPage.strLoginName + "',"
                              + " Postage='" + record[32] + "',CDDays='" + record[30] + "' ,TransactionLock='" + record[33] + "',BlackList='" + record[34] + "',BlackListReason='" + record[35] + "',GroupII ='" + record[36] + "',CardNumber='" + record[39] + "',Other='" + record[40] + "',[SaleIncentive]='" + record[41] + "',DueDays='" + record[21] + "' " + strOpeningBal + ",[GSTNo]='" + record[42] + "',[PANNumber]='" + record[43] + "',[TaxType]='" + record[44] + "',[AccountantMobileNo]='" + record[45] + "',[MainPartyID]='" + record[46] + "',[CourierName]='" + record[47] + "',[DistrictName]='" + record[48] + "',[OrderAmtLimit]=" + record[49] + ",[Other1]='" + record[50] + "',[Other2]='" + record[51] + "',[Other3]='" + record[53] + "',[TransactionLockRemark]='" + record[54] + "',[OrangeListRemark]='" + record[50] + "',[OrangeListStatus]='" + record[52] + "',[Date]='" + _sDate.ToString("MM/dd/yyyy h:mm:ss tt") + "' Where AreaCode='" + record[37] + "' and AccountNo='" + record[38] + "' and GroupName!='Sub Party' ";

                if (MainPage.strUserRole.Contains("ADMIN"))
                {
                    strNetQuery = " Update SupplierMaster Set Name='" + record[0] + "' , Category='" + record[1] + "', GroupName='" + record[2] + "' , Address='" + record[6] + "',State='" + record[7] + "' , PINCode='" + record[8] + "', Station='" + record[10] + "',TINNumber='" + record[12] + "',NormalDhara='" + record[13] + "',SNDhara='" + record[14] + "', ContactPerson='" + record[15] + "' ,"
                                        + " PhoneNo='" + record[16] + "',MobileNo='" + record[17] + "',PvtMarka='" + record[18] + "', Reference='" + record[19] + "', EmailId='" + record[20] + "',DueDays='" + record[21] + "',CFormApply='" + record[23] + "', AmountLimit=" + record[24] + ",PermanentAddress='" + record[25] + "',FourthTransport='" + record[28] + "', Remark='" + record[29] + "' ,"
                                        + " CDDays='" + record[30] + "', ExtendedAmt='" + record[31] + "',UpdatedBy='" + MainPage.strLoginName + "',UpdateStatus=1,Postage='" + record[32] + "',TransactionLock='" + record[33] + "',BlackList='" + record[34] + "',BlackListReason='" + record[35] + "',GroupII ='" + record[36] + "',Other='" + record[40] + "',[SaleIncentive]='" + record[41] + "',CardNumber='" + record[39] + "',[GSTNo]='" + record[42] + "',[PANNumber]='" + record[43] + "',[TaxType]='" + record[44] + "',[AccountantMobileNo]='" + record[45] + "',[MainPartyID]='" + record[46] + "',[CourierName]='" + record[47] + "',[DistrictName]='" + record[48] + "',[OrderAmtLimit]=" + record[49] + ",[Other1]='" + record[50] + "',[Other2]='" + record[51] + "',[Other3]='" + record[52] + "',[TransactionLockRemark]='" + record[53] + "',[OrangeListRemark]='" + record[54] + "',[OrangeListStatus]='" + record[50] + "',[Date]='" + _sDate.ToString("MM/dd/yyyy h:mm:ss tt") + "' Where AreaCode='" + record[37] + "' and AccountNo='" + record[38] + "' and GroupName!='Sub Party' ";
                    strQuery += " Update BalanceAmount Set Date='" + _sDate.ToString("MM/dd/yyyy h:mm:ss tt") + "',Amount='" + record[3] + "',Status='" + record[4] + "' Where AccountStatus='OPENING' and AccountID='" + record[37] + record[38] + "' ";
                }
                else
                {
                    strNetQuery = " Update SupplierMaster Set Name='" + record[0] + "' , Category='" + record[1] + "', GroupName='" + record[2] + "' , Address='" + record[6] + "',State='" + record[7] + "' , PINCode='" + record[8] + "' ,Station='" + record[10] + "',TINNumber='" + record[12] + "',NormalDhara='" + record[13] + "',SNDhara='" + record[14] + "', ContactPerson='" + record[15] + "' ,PhoneNo='" + record[16] + "',MobileNo='" + record[17] + "', Reference='" + record[19] + "', EmailId='" + record[20] + "',CDDays='" + record[30] + "' ,"
                                        + " CFormApply='" + record[23] + "', AmountLimit=" + record[24] + ",PermanentAddress='" + record[25] + "',FourthTransport='" + record[28] + "', Remark='" + record[29] + "', ExtendedAmt='" + record[31] + "',UpdatedBy='" + MainPage.strLoginName + "',UpdateStatus=1,Postage='" + record[32] + "',TransactionLock='" + record[33] + "',BlackList='" + record[34] + "',BlackListReason='" + record[35] + "',GroupII ='" + record[36] + "',Other='" + record[40] + "',[SaleIncentive]='" + record[41] + "',CardNumber='" + record[39] + "',[GSTNo]='" + record[42] + "',[PANNumber]='" + record[43] + "',[TaxType]='" + record[44] + "',[AccountantMobileNo]='" + record[45] + "',[MainPartyID]='" + record[46] + "',[CourierName]='" + record[47] + "',[DistrictName]='" + record[48] + "',[OrderAmtLimit]=" + record[49] + ",DueDays='" + record[21] + "',[Other1]='" + record[50] + "',[Other2]='" + record[51] + "',[Other3]='" + record[52] + "',[TransactionLockRemark]='" + record[53] + "',[OrangeListRemark]='" + record[54] + "',[OrangeListStatus]='" + record[50] + "',[Date]='" + _sDate.ToString("MM/dd/yyyy h:mm:ss tt") + "' " + strOpeningBal + " Where AreaCode='" + record[37] + "' and AccountNo='" + record[38] + "' and GroupName!='SUB PARTY' ";
                }

                if (record[2] == "SUNDRY DEBTORS" && record[40] != "")
                {
                    strOtherQuery += " Update SupplierMaster Set AmountLimit=" + record[24] + ", ExtendedAmt='" + record[31] + "',[OrderAmtLimit]=" + record[49] + " Where GroupName='SUNDRY DEBTORS' and Other!='' and Other='" + record[40] + "' ";
                }

                strQuery += strOtherQuery;
                strNetQuery += strOtherQuery;

                cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                count = cmd.ExecuteNonQuery();

                if (MainPage.strOnlineDataBaseName != "")
                {
                    int result = 0;
                    if (MainPage.mymainObject.bMultiBranch)
                        result = NetDBAccess.ExecuteMyNonQueryWithTransaction(strNetQuery);
                    else
                    {
                       bool _bStatus= CreateDeleteQuery(strNetQuery);
                        if(_bStatus)
                        result = 1;
                    }

                    if (result > 0)
                    {
                        // CreateDeleteQuery_Net(strNetQuery);
                        transaction.Commit();
                    }
                    else
                    {
                        transaction.Rollback();
                        count = 0;
                    }
                }
                else
                    transaction.Commit();
            }
            catch (Exception ex)
            {
                count = 0;
                transaction.Rollback();
                MessageBox.Show(ex.Message);

            }
            finally
            {
                MainPage.CloseConnection();
            }

            return count;
        }



        public int UpdateSubSalesParty(string[] record)
        {
            int count = 0;
            if (MainPage.con.State == ConnectionState.Closed)
                MainPage.OpenConnection();

            string[] strFullName = record[13].Split(' ');
            if (strFullName.Length > 0)
            {

                string strQuery = "Update SupplierMaster set Name='" + record[0] + "', Address='" + record[1] + "',State='" + record[2] + "',Transport='" + record[3] + "',Station='" + record[4] + "',BookingStation='" + record[5] + "',MobileNo='" + record[6] + "', "
                                + " HasteSale='" + record[7] + "',PvtMarka='" + record[8] + "',Postage='" + record[9] + "', UpdatedBy='" + MainPage.strLoginName + "',GroupII='" + record[10] + "',GSTNo='" + record[14] + "',PANNumber='" + record[15] + "',[PinCode]='" + record[16] + "',[PhoneNo]='" + record[17] + "',[Remark]='" + record[18] + "',[AmountLimit]='" + record[19] + "',[Date]='" + record[20] + "',[BlackList]='" + record[21] + "',BlackListReason='" + record[22] + "',TransactionLock='" + record[23] + "',Other='" + record[24] + "',[Other1]='" + record[25] + "',[UpdateStatus]=1 Where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strFullName[0] + "' and AreaCode='" + record[11] + "' and AccountNo='" + record[12] + "' and GroupName='SUB PARTY' "
                                + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                                + " ('PARTYMASTER','" + record[11] + "'," + record[12] + ",DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),0,'" + MainPage.strLoginName + "',0,0,'UPDATION')  ";

                SqlTransaction transaction = MainPage.con.BeginTransaction();
                try
                {
                    cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                    count = cmd.ExecuteNonQuery();

                    if (MainPage.strOnlineDataBaseName != "")
                    {
                        int result = NetDBAccess.ExecuteMyNonQueryWithTransaction(strQuery);
                        if (result > 0)
                        {
                            transaction.Commit();
                            CreateDeleteQuery_Net(strQuery);
                        }
                        else
                        {
                            transaction.Rollback();
                            count = 0;
                        }
                    }
                    else
                        transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    count = 0;
                }
                finally
                {
                    MainPage.CloseConnection();
                }
            }
            return count;
        }

        #endregion

        #region Update Balance Amount

        public string UpdateBalanceAmountTickFromPreviousDataBase(string strid, string status)
        {
            return " Update BalanceAmount set Tick='" + status + "',UpdateStatus=1 where BalanceID=" + strid + " ";
        }

        public string UpdateOpeningBalanceAmountTickFromPreviousDataBase(string strParty, DateTime strDate, string status)
        {
            return " Update BalanceAmount set Tick='" + status + "',UpdateStatus=1 where (Date<'" + strDate + "' or AccountStatus='Opening') and  PartyName='" + strParty + "' ";
        }

        public int ExecutingQueryOfOtherDatabase(string strFirstQuery, string strFirstDataBase, string strSecondQuery, string strSecondDataBase)
        {
            int count = 0;
            if (strFirstQuery != "" && strFirstDataBase != "" && strSecondQuery != "" && strSecondDataBase != "")
            {
                MainPage.ChangeDataBase(strFirstDataBase);
                SqlTransaction transaction = MainPage.con.BeginTransaction();
                try
                {
                    SqlCommand cmd = new SqlCommand(strFirstQuery, MainPage.con, transaction);
                    count = cmd.ExecuteNonQuery();

                    transaction.Commit();
                    MainPage.con.Close();

                    MainPage.ChangeDataBase(strSecondDataBase);
                    transaction = MainPage.con.BeginTransaction();
                    try
                    {
                        cmd = new SqlCommand(strSecondQuery, MainPage.con, transaction);
                        count += cmd.ExecuteNonQuery();
                        transaction.Commit();

                    }
                    catch
                    {
                        transaction.Rollback();
                    }
                }
                catch
                {
                    transaction.Rollback();
                }
                finally
                {
                    MainPage.OpenConnection();
                }
            }
            return count;
        }

        #endregion

        #region Adjusted Record in new Format


        public int UpdateAdjustedOpeningBalanceAmountInMultiCompany(string strParty, DateTime startDate, string strNumber, string strDataBase)
        {
            int result = 0;
            string strID = "";

            MainPage.ChangeDataBase(strDataBase);
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select BalanceID from BalanceAmount  where (Date<'" + startDate + "' or AccountStatus='Opening') and  PartyName='" + strParty + "'", MainPage.con);
            adap.Fill(dt);
            MainPage.OpenConnection();
            string strQuery = "";
            for (int i = 0; i < dt.Rows.Count; ++i)
            {
                DataRow row = dt.Rows[i];
                strID = Convert.ToString(row[0]);
                if (strID != "")
                {
                    strQuery += " if not exists (Select ID from AdjustedIds Where DatabaseName='" + strDataBase + "' and BalanceID=" + strID + ") begin  Insert into AdjustedIds values('0'," + strID + ",'" + strDataBase + "'," + strNumber + ",'" + MainPage.strLoginName + "',1,0) end ";
                }
            }
            result = ExecuteMyQuery(strQuery);
            return result;
        }

        public string GetAdjustedAmountInMultiCompanyQuery(string strID, string strNumber, string strDataBase)
        {
            string strQuery = " if not exists (Select ID from AdjustedIds Where DatabaseName='" + strDataBase + "' and BalanceID=" + strID + ") begin  Insert into AdjustedIds values('0'," + strID + ",'" + strDataBase + "'," + strNumber + ",'" + MainPage.strLoginName + "',1,0) end ";
            return strQuery;
        }


        public void CheckAdjustedAmountBeforeDeletion(object objId)
        {
            string strDeleteQuery = "", strAllQuery = "";
            int count = GetRecordExistance("Select Count(*) from AdjustedIds where BalanceID=" + objId + " and DataBaseName='" + MainPage.strDataBaseFile + "' ");
            if (count > 0)
            {
                string strQuery = " Update BalanceAmount set Tick='False',UpdateStatus=1 where BalanceID in (Select BalanceID from AdjustedIds where  DataBaseName='" + MainPage.strDataBaseFile + "' and MultiCompanyNo=0 and AdjustedNumber in(Select AdjustedNumber from AdjustedIds where BalanceID=" + objId + " and AdjustedNumber!='0' and DataBaseName='" + MainPage.strDataBaseFile + "' and MultiCompanyNo=0)) "
                                       + " Delete from AdjustedIds where AdjustedNumber in  (Select AdjustedNumber from AdjustedIds where BalanceID=" + objId + " and AdjustedNumber!='0' and DataBaseName='" + MainPage.strDataBaseFile + "' and MultiCompanyNo=0) ";

                ExecuteMyQuery(strQuery);

                // Multi DataBase

                DataTable dt = GetDataTable(" Select BalanceID,DataBaseName from AdjustedIds where MultiCompanyNo in (Select MultiCompanyNo from AdjustedIds where BalanceID=" + objId + " and DataBaseName='" + MainPage.strDataBaseFile + "' and MultiCompanyNo!=0  and AdjustedNumber='0')");
                if (dt.Rows.Count > 0)
                {
                    foreach (DataRow row in dt.Rows)
                    {
                        string strId = Convert.ToString(row[0]);
                        if (strId != "" && strId != "0")
                        {
                            UpdateBalanceAmountWithAdjusted(strId, Convert.ToString(row[1]));
                        }
                    }
                    strAllQuery += strDeleteQuery = " Delete from AdjustedIds where MultiCompanyNo in (Select MultiCompanyNo from AdjustedIds where BalanceID=" + objId + " and DataBaseName='" + MainPage.strDataBaseFile + "' and MultiCompanyNo!=0 and AdjustedNumber='0') ";
                    ExecuteMyQuery(strDeleteQuery);
                }
            }
        }

        private void UpdateBalanceAmountWithAdjusted(string strID, string strDataBase)
        {
            try
            {
                //MainPage.OpenConnection();
                //MainPage.con.ChangeDatabase(strDataBase);
                if (strDataBase != "")
                {
                    MainPage.ChangeDataBase(strDataBase);
                    SqlCommand cmd = new SqlCommand("Update BalanceAmount set Tick='False',UpdateStatus=1 where BalanceID=" + strID + " ", MainPage.con);
                    cmd.ExecuteNonQuery();
                }
            }
            catch
            {
            }
            finally
            {
                MainPage.CloseConnection();
            }
        }

        protected internal int ExecuteQueryWithDataBase(string strQuery, string strDataBase)
        {
            int count = 0;
            try
            {
                //MainPage.con.Open();
                //MainPage.con.ChangeDatabase(strDataBase);
                MainPage.ChangeDataBase(strDataBase);
                if (MainPage.con.Database == strDataBase)
                {
                    SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
                    count = cmd.ExecuteNonQuery();
                }
            }
            catch
            {
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return count;
        }

        #endregion


        #region Update in Marketer

        public int UpdateMarketer(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            string strQuery = "Update Marketer Set MobileNoI='" + record[1] + "',MobileNoII='" + record[2] + "' ,EmailID='" + record[3] + "',Address='" + record[4] + "',City='" + record[5] + "',Date='" + record[6] + "',orderNoFrom=" + record[7] + ",orderNoTo=" + record[8] + ",UpdateStatus=1,[OrderCode]='" + record[10] + "',[MCode]='" + record[11] + "' where MarketerName='" + record[9] + "' ";
            if (record[0] != record[9])
            {
                strQuery += " if not exists (Select MarketerName from Marketer Where MarketerName='" + record[0] + "') begin "
                         + " Update Marketer Set MarketerName='" + record[0] + "' Where MarketerName='" + record[9] + "' "
                         + " Update OrderBooking Set Marketer='" + record[0] + "' Where Marketer='" + record[9] + "' end ";
            }

            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            if (count > 0)
                DataBaseAccess.CreateDeleteQuery(strQuery);
            MainPage.CloseConnection();
            return count;
        }

        #endregion     

        #region Update Transport

        public int UpdateTransport(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            int count = 0;
            string strQuery = "";
            object objStatus = ExecuteMyScalar("Select InsertStatus from Transport Where TransportName='" + record[9] + "' ");
            SqlTransaction transaction = MainPage.con.BeginTransaction();
            try
            {
                strQuery = "Update Transport Set ContactPersonI='" + record[1] + "',contactPersonII='" + record[2] + "',PhoneNoI='" + record[3] + "',PhoneNoII='" + record[4] + "',MobileNo='" + record[5] + "',City='" + record[6] + "',Address='" + record[7] + "',Date='" + record[8] + "',[GSTNo]='" + record[10] + "',UpdateStatus=1,GreenTaxAmt='" + record[11] + "',[UpdatedBy]='" + record[12] + "',[ForwardingCharges]='" + record[13] + "',[ExtraCharges]='" + record[14] + "' Where TransportName='" + record[9] + "' "
                         + " INSERT INTO[dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + "('" + record[0] + "','TRANSPORT',0,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + ConvertObjectToDouble(record[11]) + ",'" + MainPage.strLoginName + "',1,0,'UPDATION') ";

                if (record[9] != record[0])
                {
                    strQuery += " if not exists (Select TransportName from Transport Where TransportName='" + record[0] + "') begin Update Transport Set TransportName='" + record[0] + "' Where TransportName='" + record[9] + "' "
                             + " Update ForwardingRecord Set Transport='" + record[0] + "' Where Transport='" + record[9] + "' "
                             + " Update OrderBooking Set Transport='" + record[0] + "' Where Transport='" + record[9] + "' "
                             + " Update SalesRecord Set Transport='" + record[0] + "' Where Transport='" + record[9] + "' "
                             + " Update SupplierMaster Set Transport='" + record[0] + "' Where Transport='" + record[9] + "' "
                             + " Update SupplierMaster Set SecondTransport='" + record[0] + "' Where SecondTransport='" + record[9] + "' "
                             + " Update SupplierMaster Set ThirdTransport='" + record[0] + "' Where ThirdTransport='" + record[9] + "' "
                             + " Update SupplierMaster Set FourthTransport='" + record[0] + "' Where FourthTransport='" + record[9] + "' end";
                }
                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                count = cmd.ExecuteNonQuery();
                transaction.Commit();
            }
            catch
            {
                transaction.Rollback();
            }
            finally
            {
                MainPage.CloseConnection();
            }

            if (count > 0 && !Convert.ToBoolean(objStatus))
            {
                CreateDeleteQuery(strQuery);
            }
            return count;
        }

        #endregion

        #region Update Items

        public int UpdateItems(string[] strRecord, string selectedItem)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            int count = 0;
            string strQuery = "";
            object objStatus = ExecuteMyScalar("Select InsertStatus from Items Where ItemName='" + selectedItem + "' ");
            SqlTransaction transaction = MainPage.con.BeginTransaction();
            try
            {
                strQuery = " Update Items set ItemName='" + strRecord[0] + "',[GroupName]='" + strRecord[1] + "',[SubGroupName]='" + strRecord[2] + "',[UnitName]='" + strRecord[3] + "', Date='" + MainPage.currentDate + "' where ItemName='" + selectedItem + "'  ";
                if (selectedItem != strRecord[0])
                {
                    strQuery += " Update ForwardingEntry Set Item='" + strRecord[0] + "' Where Item='" + selectedItem + "' "
                                   + " Update GoodsReceiveDetails Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' "
                                   + " Update GoodsReturned Set Item='" + strRecord[0] + "' Where Item='" + selectedItem + "' "
                                   + " Update GRRecords Set Item='" + strRecord[0] + "' Where Item='" + selectedItem + "' "
                                   + " Update OrderBooking Set Items='" + strRecord[0] + "' Where Items='" + selectedItem + "' "
                                   + " Update SalesEntry Set Items='" + strRecord[0] + "' Where Items='" + selectedItem + "' "
                                   + " Update PurchaseReturnDetails Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' "
                                   + " Update SaleReturnDetails Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' "
                                   + " Update SaleServiceDetails Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' "
                                   + " Update JournalVoucherDetails Set Other='" + strRecord[0] + "' Where Other='" + selectedItem + "' "
                                   + " Update PurchaseBookSecondary Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' "
                                   + " Update SalesBookSecondary Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' "
                                   + " Update StockMaster Set ItemName='" + strRecord[0] + "' Where ItemName='" + selectedItem + "' ";
                }

                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                count = cmd.ExecuteNonQuery();
                transaction.Commit();
                if (count > 0 && !Convert.ToBoolean(objStatus))
                {
                    CreateDeleteQuery(strQuery);
                }
            }
            catch
            {
                transaction.Rollback();
            }
            return count;
        }

        #endregion

        #region Update Station

        public int UpdateStation(string record, string strStation)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            int count = 0;
            string strQuery = "";
            object objStatus = ExecuteMyScalar("Select InsertStatus from Station Where StationName='" + strStation + "' ");
            SqlTransaction transaction = MainPage.con.BeginTransaction();
            try
            {
                strQuery = "Update Station Set StationName='" + record + "',Date='" + MainPage.currentDate + "',UpdateStatus=0,[UpdatedBy]='" + MainPage.strLoginName + "' where StationName='" + strStation + "' ";
                if (record != strStation)
                {
                    strQuery += "Update CourierRegister Set Station='" + record + "' Where Station='" + strStation + "' "
                    + " Update CourierRegisterIn Set Station='" + record + "' Where Station='" + strStation + "' "
                    + " Update ForwardingRecord Set Station='" + record + "' Where Station='" + strStation + "'"
                    + " Update GRRecords Set Station='" + record + "' Where Station='" + strStation + "' "
                    + " Update OrderBooking Set Station='" + record + "' Where Station='" + strStation + "'"
                    + " Update SalesRecord Set Station='" + record + "' Where Station='" + strStation + "' "
                    + " Update SupplierMaster Set Station='" + record + "' Where Station='" + strStation + "' "
                    + " Update SupplierMaster Set BookingStation='" + record + "' Where BookingStation='" + strStation + "' ";
                }
                strQuery += " INSERT INTO[dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                            + "('" + record + "','STATION',0,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),0,'" + MainPage.strLoginName + "',0,0,'UPDATION') end ";
                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con, transaction);
                count = cmd.ExecuteNonQuery();
                transaction.Commit();
            }
            catch
            {
                transaction.Rollback();
            }
            finally
            {
                MainPage.CloseConnection();
            }

            if (count > 0 && !Convert.ToBoolean(objStatus))
            {
                CreateDeleteQuery(strQuery);
            }
            return count;
        }

        #endregion

        #region Update Cartone Type

        public int UpdateCartoneType(string record, string strType)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            object objStatus = ExecuteMyScalar("Select InsertStatus from CartoneType Where Cartone='" + strType + "' ");

            string strQuery = "Update CartoneType set Cartone='" + record + "',UpdateStatus=1 where Cartone='" + strType + "' ";
            strQuery += "Update SalesRecord Set CartoneType='" + record + "' Where CartoneType='" + strType + "' ";

            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            if (count > 0 && !Convert.ToBoolean(objStatus))
            {
                CreateDeleteQuery(strQuery);
            }
            MainPage.CloseConnection();
            return count;
        }

        #endregion

        #region Update Cartone Size

        public int UpdateCartoneSize(string strCSize, string strOldSize, string strPackingAmt, string strPackingType)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            object objStatus = ExecuteMyScalar("Select InsertStatus from CartoneSize Where CSize='" + strOldSize + "' ");
            string strQuery = " Update CartoneSize set CSize='" + strCSize + "',PackingAmt='" + strPackingAmt + "',[PackingType]='" + strPackingType + "',UpdateStatus=1 where CSize='" + strOldSize + "'  "
                            + " Update SalesRecord Set CartoneSize='" + strCSize + "' Where CartoneSize='" + strOldSize + "'  ";

            SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            if (count > 0 && !Convert.ToBoolean(objStatus))
            {
                CreateDeleteQuery(strQuery);
            }
            MainPage.CloseConnection();
            return count;
        }

        #endregion


        #region Update User Account

        public int UpdateUserAccount(string[] record)
        {
            int count = 0;
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            try
            {
                //string strQuery = "Update  UserAccount set Password='" + record[2] + "' ,Name='" + record[3] + "' ,MobileNo='" + record[4] + "' ,Address='" + record[5] + "' ,JournalEntry='" + record[6] + "' ,JournalView='" + record[7] + "',JournalEdit='" + record[8] + "',CashEntry='" + record[9] + "' ,CashView='" + record[10] + "',CashEdit='" + record[11] + "',OrderEntry='" + record[12] + "',OrderView='" + record[13] + "',OrderEdit='" + record[14] + "' ,GoodsEntry='" + record[15] + "',"
                //                + "GoodsView='" + record[16] + "',GoodsEdit='" + record[17] + "' ,SaleEntry='" + record[18] + "' ,SaleView='" + record[19] + "',SaleEdit='" + record[20] + "' ,PurchaseEntry='" + record[21] + "' ,PurchaseView='" + record[22] + "',PurchaseEdit='" + record[23] + "' ,ForwardingEntry='" + record[24] + "' ,ForwardingView='" + record[25] + "',ForwardingEdit='" + record[26] + "',CourierEntry='" + record[27] + "' ,CourierView='" + record[28] + "',CourierEdit='" + record[29] + "' ,NewParty='" + record[30] + "' ,PartyView='" + record[31] + "',NewPartyEdit='" + record[32] + "',"
                //                + "NewSubParty='" + record[33] + "' ,SubPartyView='" + record[34] + "',SubPartyEdit='" + record[35] + "' ,NewAccountmaster='" + record[36] + "' ,AccountMasterView='" + record[37] + "',AccountMasterEdit='" + record[38] + "' ,Merging='" + record[39] + "',CompanyInfo='" + record[40] + "',Accessories='" + record[41] + "',BackupRestore='" + record[42] + "',OrderSlipView='" + record[43] + "',FASReport='" + record[44] + "',GoodsRecivedView='" + record[45] + "',ReportView='" + record[46] + "',SalesReportView='" + record[47] + "',ReportSummeryView='" + record[48] + "',"
                //                + "PurchaseReport='" + record[49] + "',MultiCmpReportview='" + record[50] + "',ForwardingReport='" + record[51] + "',LedgerInterest='" + record[52] + "',PrintMultiLedger='" + record[53] + "',PurchaseOutStanding='" + record[54] + "',CrediterDebter='" + record[55] + "',ShowAmountLimit='" + record[56] + "',PartyLedger='" + record[57] + "',Date='" + record[58] + "',BackDateEntry='" + record[59] + "',SMS='" + record[60] + "',Other='" + record[61] + "',Reminder='" + record[62] + "',DayBook='" + record[63] + "',OnAccount='" + record[64] + "', Extra='" + record[65] + "', UpdateStatus=1 where LoginName ='" + record[1] + "'  ";

                string strQuery = "Update UserAccount set Password='" + record[2] + "' ,Name='" + record[3] + "' ,MobileNo='" + record[4] + "' ,UserType='" + record[5] + "' ,JournalEntry='" + record[6] + "' ,JournalView='" + record[7] + "',JournalEdit='" + record[8] + "',CashEntry='" + record[9] + "' ,CashView='" + record[10] + "',CashEdit='" + record[11] + "',OrderEntry='" + record[12] + "',OrderView='" + record[13] + "',OrderEdit='" + record[14] + "' ,GoodsEntry='" + record[15] + "', GoodsView='" + record[16] + "',GoodsEdit='" + record[17] + "' ,SaleEntry='" + record[18] + "' ,SaleView='" + record[19] + "',SaleEdit='" + record[20] + "' ,PurchaseEntry='" + record[21] + "' ,PurchaseView='" + record[22] + "',PurchaseEdit='" + record[23] + "' ,ForwardingEntry='" + record[24] + "' ,ForwardingView='" + record[25] + "',ForwardingEdit='" + record[26] + "',CourierEntry='" + record[27] + "' ,CourierView='" + record[28] + "',CourierEdit='" + record[29] + "' ,NewParty='" + record[30] + "' ,PartyView='" + record[31] + "',NewPartyEdit='" + record[32] + "',"
                                + " NewSubParty='" + record[33] + "' ,SubPartyView='" + record[34] + "',SubPartyEdit='" + record[35] + "' ,NewAccountmaster='" + record[36] + "' ,AccountMasterView='" + record[37] + "',AccountMasterEdit='" + record[38] + "' ,Merging='" + record[39] + "',CompanyInfo='" + record[40] + "',Accessories='" + record[41] + "',BackupRestore='" + record[42] + "',OrderSlipView='" + record[43] + "',FASReport='" + record[44] + "',GoodsRecivedView='" + record[45] + "',ReportView='" + record[46] + "',SalesReportView='" + record[47] + "',ReportSummeryView='" + record[48] + "', PurchaseReport='" + record[49] + "',MultiCmpReportview='" + record[50] + "',ForwardingReport='" + record[51] + "',LedgerInterest='" + record[52] + "',PrintMultiLedger='" + record[53] + "',PurchaseOutStanding='" + record[54] + "',CrediterDebter='" + record[55] + "',ShowAmountLimit='" + record[56] + "',PartyLedger='" + record[57] + "',Date='" + record[58] + "',BackDateEntry='" + record[59] + "',SMS='" + record[60] + "',Other='" + record[61] + "',Reminder='" + record[62] + "',"
                                + " DayBook='" + record[63] + "',OnAccount='" + record[64] + "', Extra='" + record[65] + "',BranchCode='" + record[66] + "',GSTMasterEntry='" + record[67] + "', GSTMasterView='" + record[68] + "',GSTMasterEditDelete='" + record[69] + "', RefrenceMasterEntry='" + record[70] + "',RefrenceMasterView='" + record[71] + "', RefrenceMasterEditDelete='" + record[72] + "',LockunLockCustomer='" + record[73] + "',SecurityChequePermission='" + record[74] + "', AdminPanel='" + record[75] + "',ChangeSupplierDisc='" + record[76] + "', ChangeCustomerLimit='" + record[77] + "', Dashboard='" + record[78] + "',BankDetailApprove='" + record[79] + "', PartyWiseSP='" + record[80] + "',ChangeBankDetail='" + record[81] + "', BranchWiseSP='" + record[82] + "',ChangeCustomerDetail='" + record[83] + "',"
                                + " ShowBankLedger='" + record[84] + "',PartyMasterRegister='" + record[85] + "', GraphicalSummary='" + record[86] + "',SchemeMaster='" + record[87] + "', ShowPartyLimit='" + record[88] + "',ShowAllRecord='" + record[89] + "', GSTReport='" + record[90] + "',ShowEmailReg='" + record[91] + "',showWhatsAppReg='" + record[92] + "',AddNewCustomer='" + record[93] + "', UpdateStatus=1 where LoginName ='" + record[1] + "'  ";


                SqlCommand cmd = new SqlCommand(strQuery, MainPage.con);
                count = cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                string[] str = { "Error", ex.Message };
                CreateErrorReports(str);
            }
            finally { MainPage.CloseConnection(); }
            return count;
        }

        #endregion      

        #region Delete Transport

        public int DeleteTransport(string strTransport)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            SqlCommand cmd = new SqlCommand("Delete from Transport Where TransportName='" + strTransport + "'", MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion


        #region Delete Sub Party

        public int DeleteSubParty(string strParty)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            SqlCommand cmd = new SqlCommand("Delete from SupplierMaster Where Name='" + strParty + "' and GroupName='Sub Party'", MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        #endregion


        #region Get Records
        //Getting data.............

        public int GetCompanyCode()
        {
            System.Collections.ArrayList FolderName = new System.Collections.ArrayList();

            string strPath = Path.GetDirectoryName(System.Windows.Forms.Application.ExecutablePath) + "\\Data";
            DirectoryInfo folder = new DirectoryInfo(strPath);
            if (folder.Exists)
            {
                string[] Folder;
                Folder = Directory.GetDirectories(strPath);
                foreach (string folderName in Folder)
                {
                    FileInfo fi = new FileInfo(folderName);
                    FolderName.Add(fi.Name);
                }

            }
            return FolderName.Count + 1;
        }

        public DataTable GetCompanyRecord()
        {
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select *,CONVERT(varchar,Fin_Y_Starts,103) SDate,CONVERT(varchar,Fin_Y_Ends,103) EDate from Company Where CompanyName='" + MainPage.strCompanyName + "' ", MainPage.con);
            adap.Fill(dt);

            return dt;
        }

        public string GetCompanyName(string strCode)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            string strCompany = "";
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select CompanyName from Company Where CompanyID=" + strCode + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                strCompany = Convert.ToString(dt.Rows[0][0]);
            }

            return strCompany;
        }


        public SqlDataReader GetCity(string strCity)
        {
            SqlDataReader rd = null;
            try
            {
                if (MainPage.con.State == ConnectionState.Closed)
                {
                    MainPage.OpenConnection();
                }
                cmd = new SqlCommand("Select City from Company where City Like('%" + strCity + "%')", MainPage.con);
                rd = cmd.ExecuteReader();

                return rd;
            }
            catch
            {
                return rd;
            }
        }

        public DataTable GetPartyRecord()
        {
            MainPage.OpenConnection();

            DataTable dt = null;
            try
            {
                dt = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select * from SupplierMaster where GroupName!='SUB PARTY' order by Name", MainPage.con);
                adap.Fill(dt);
            }
            catch
            {
            }
            return dt;
        }

        public DataTable GetPartyNameGroupFullNameRecord()
        {
            MainPage.OpenConnection();

            DataTable dt = null;
            try
            {
                dt = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select Name,GroupName,(ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name) FullName,Other from SupplierMaster where GroupName!='SUB PARTY' order by Name", MainPage.con);
                adap.Fill(dt);
            }
            catch
            {
            }
            return dt;
        }

        public DataSet GetPartyInfo(string strParty)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            DataSet ds = new DataSet();
            string[] strFullName = strParty.Split(' ');
            if (strFullName.Length > 1)
                strParty = strFullName[0].Trim();

            string strQuery = " Select *,(ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name) FullName from SupplierMaster SM OUTER APPLY (Select TOP 1 CONVERT(varchar,MAX(CD.Date),103) ChqDate from ChequeDetails CD Where CD.CreditAccountID=(SM.AreaCode+SM.AccountNo) and ChequeType='SECURITY' and Status='PENDING')_CD OUTER APPLY (Select (SMM.AreaCode+SMM.AccountNo+' '+SMM.Name)_MainPartyName from SupplierMaster SMM Where (SMM.AreaCode+SMM.AccountNo)=SM.MainPartyID) SMM where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "'"
                            + " Select *,Convert(varchar,DOA,103)NDOA,Convert(varchar,DOB,103)NDOB from SupplierOtherDetails Where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' Select *,Convert(varchar,VerifiedDate,103) VDate from SupplierBankDetails Where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' Select * from SupplierBrandDetails Where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' ";

            SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);

            adap.Fill(ds);
            return ds;
        }

        public int CheckPartyAvailability(string strParty)
        {
            int count = 0;
            DataTable dt = new DataTable();
            MainPage.OpenConnection();
            SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from SupplierMaster where Name='" + strParty + "' and GroupName!='SUB PARTY' ", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }


        public int CheckMarkterAvailability(string strName)
        {
            int count = 0;
            try
            {
                DataTable dt = new DataTable();
                MainPage.OpenConnection();
                SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from Marketer where MarketerName='" + strName + "'", MainPage.con);
                adap.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    if (Convert.ToString(dt.Rows[0][0]) != "")
                    {
                        count = Convert.ToInt32(dt.Rows[0][0]);
                    }
                }
            }
            catch { }
            return count;
        }

        public int CheckSaleBillAvailability(string strCode, string strBillNo)
        {
            int count = 0;
            MainPage.OpenConnection();

            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select (Count(*)+(Select COUNT(*) from SalesBook SB Where SB.BillCode='" + strCode + "' and SB.BillNo=" + strBillNo + ")) from SalesRecord where BillCode='" + strCode + "' and BillNo=" + strBillNo + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }


        public int CheckGoodsReceiptAvailability(string strCode, string strBillNo)
        {
            int count = 0;
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select (Count(*)+(Select COUNT(*) from PurchaseBook SB Where SB.BillCode='" + strCode + "' and SB.BillNo=" + strBillNo + ")) from GoodsReceive where ReceiptCode='" + strCode + "' and ReceiptNo=" + strBillNo + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }

        public int CheckSaleReturnAvailability(string strCode, string strBillNo)
        {
            int count = 0;
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from SaleReturn where BillCode='" + strCode + "' and BillNo=" + strBillNo + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }

        public int CheckSaleServiceAvailability(string strCode, string strBillNo)
        {
            int count = 0;
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from SaleServiceBook where BillCode='" + strCode + "' and BillNo=" + strBillNo + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }

        public int CheckPurchaseReturnAvailability(string strCode, string strBillNo)
        {
            int count = 0;
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from PurchaseReturn where BillCode='" + strCode + "' and BillNo=" + strBillNo + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }

        public int CheckStockTransferAvailability(string strCode, string strBillNo,string strStockIn)
        {
            int count = 0;
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from StockTransfer where BillCode='" + strCode + "' and BillNo=" + strBillNo + "", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                if (Convert.ToString(dt.Rows[0][0]) != "")
                {
                    count = Convert.ToInt32(dt.Rows[0][0]);
                }
            }
            return count;
        }

        public string[] GetPartyAddress(string strParty)
        {

            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select SM.Address,SM.Station, SM.PINCode,SM.PhoneNo,SM.MobileNo,SM.PvtMarka,SM.BookingStation,SM.GroupName,SM.AccountNo from SupplierMaster SM Where (ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name)='" + strParty + "'", MainPage.con);
            adap.Fill(dt);
            string[] strAddress = new string[dt.Columns.Count];
            if (dt.Rows.Count > 0)
            {

                for (int i = 0; i < dt.Columns.Count; ++i)
                {
                    strAddress[i] = Convert.ToString(dt.Rows[0][i]);
                }
            }
            return strAddress;
        }


        public object GetPartyMobileNo(string strFullPartyName)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            cmd = new SqlCommand("Select MobileNo from SupplierMaster where MobileNo!='' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strFullPartyName + "' ", MainPage.con);
            object objValue = cmd.ExecuteScalar();

            return objValue;
        }

        public object GetPartyWhatsappNo(string strFullPartyName)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string[] strParty = strFullPartyName.Split(' ');

            cmd = new SqlCommand("Select WaybillUserName as WhatsappNo from SupplierOtherDetails Where (AreaCode+AccountNo)='" + strParty[0] + "' ", MainPage.con);
            object objValue = cmd.ExecuteScalar();

            return objValue;
        }

        #endregion


        #region Get Sup Party Name

        public DataSet GetSubPartyName()
        {
            DataSet ds = new DataSet();
            try
            {
                string strQuery = "Select Name,HasteSale,(ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name) FullName  from SupplierMaster where GroupName='Sub Party'"
                                        + " Select CurrencyBase from Company Where CompanyName='" + MainPage.strCompanyName + "' ";
                SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                adap.Fill(ds);
            }
            catch
            {
            }
            return ds;
        }

        public DataTable GetSubPartyNameWithFullName()
        {
            DataTable dt = new DataTable();
            try
            {
                string strQuery = "Select Name,HasteSale,(ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name) FullName  from SupplierMaster where GroupName='Sub Party'";
                SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                adap.Fill(dt);
            }
            catch
            {
            }
            return dt;
        }

        #endregion


        public DataTable GetLedgerAccountFromPrevious(string strParty, DateTime dSDate, DateTime dEDate, string strDataBase)
        {
            DataTable dt = new DataTable();
            try
            {

                MainPage.ChangeDataBase(strDataBase);

                string strQuery = "";


                strQuery = " Select *,(CASE When (AccountStatus='SALES A/C' OR AccountStatus='PURCHASE A/C' OR AccountStatus='SALE RETURN' OR AccountStatus='PURCHASE RETURN') then AccountStatus else dbo.GetFullName(AccountStatusID) end+(CASE When VoucherCode!='' then ' | '+VoucherCode+' '+CAST(VoucherNo as varchar) else '' end)) NAccountStatus from BalanceAmount where AccountID='" + strParty + "' and Date >='" + dSDate.ToString("MM/dd/yyyy") + "' and Date <'" + dEDate.ToString("MM/dd/yyyy") + "' and Tick='False' and AccountStatus!='OPENING'  and Cast(Amount as Money)>0 order by Date";

                SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                adap.Fill(dt);

            }
            catch
            {
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return dt;
        }

        public double GetOpeningAccountFromPrevious(string strParty, DateTime dSDate, string strDataBase)
        {
            DataTable dt = new DataTable();
            double dAmt = 0;
            try
            {
                MainPage.ChangeDataBase(strDataBase);

                string strQuery = "";


                strQuery = " Select SUM(Amt)Amount from ( "
                              + " Select SUM(CAST(AMount as Money)) Amt from BalanceAmount where Status='DEBIT' and AccountID='" + strParty + "'  and (Date <'" + dSDate.ToString("MM/dd/yyyy") + "' or AccountStatus='OPENING') and Tick='False' and Cast(Amount as Money)>0  Union All "
                              + " Select -SUM(CAST(AMount as Money)) Amt from BalanceAmount where Status='CREDIT' and AccountID='" + strParty + "' and (Date <'" + dSDate.ToString("MM/dd/yyyy") + "' or AccountStatus='OPENING') and Tick='False' and Cast(Amount as Money)>0 )_Balance ";

                object objValue = ExecuteMyScalar(strQuery);
                dAmt = ConvertObjectToDouble(objValue);
            }
            catch
            {
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return dAmt;
        }

        public DataTable GetUserDetails(string strUser)
        {
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select * from UserAccount where LoginName='" + strUser + "'", MainPage.con);
            adap.Fill(dt);

            return dt;
        }

        public DataTable GetLoginName()
        {
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select LoginName from UserAccount", MainPage.con);
            adap.Fill(dt);
            return dt;
        }



        #region Delete Record

        public int DeletePartyRecord(string strParty)
        {
            int count = 0;
            try
            {
                if (strParty != "")
                {
                    if (MainPage.con.State == ConnectionState.Closed)
                    {
                        MainPage.OpenConnection();
                    }
                    string strQuery = "Delete from SupplierMaster where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' and GroupName!='Sub Party'"
                    + " Delete from BalanceAmount where AccountID='" + strParty + "' "
                    + " Delete from SupplierBankDetails where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' "
                    + " Delete from SupplierBankDetails where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' "
                    + " Delete from SupplierOtherDetails where (ISNULL(AreaCode,'')+ISNULL(AccountNo,''))='" + strParty + "' "
                    + " INSERT INTO[dbo].[RemovalReason] ([BillType],[BillCode],[BillNo],[Remark],[Date],[DeletedBy]) VALUES "
                    + " ('PARTYMASTER','" + strParty + "',0,'DELETE',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),'" + MainPage.strLoginName + "') ";

                    cmd = new SqlCommand(strQuery, MainPage.con);
                    count = cmd.ExecuteNonQuery();
                    MainPage.CloseConnection();
                }
            }
            catch { }
            return count;
        }

        public int DeleteCompany(string strDataBase)
        {
            int count = 0;
            //if (MainPage.con.State == ConnectionState.Closed)
            //{
            //    MainPage.OpenConnection();
            //}
            //MainPage.con.ChangeDatabase("master");

            //try
            //{
            //    //SqlCommand cmd = new SqlCommand("Drop Database " + strDataBase + " ", MainPage.con);
            //    //count = cmd.ExecuteNonQuery();
            //}
            //catch (Exception ex)
            //{
            //    string[] str = { "Problem", ex.ToString() };
            //    CreateErrorReports(str);
            //}
            //finally
            //{
            //    MainPage.CloseConnection();
            //}
            return count;
        }

        #endregion


        #region Find Missing Serial Number


        public DataTable GetMissingGoodsReceiptNo(DateTime sDate, DateTime eDate)
        {
            string strQuery = " ;WITH Missing (missnum, maxid) AS ( SELECT Min(ReceiptNo) AS missnum, max(ReceiptNo) maxnum from GoodsReceive Where ReceivingDate>='" + sDate.ToString("MM/dd/yyyy") + "' and  ReceivingDate<'" + eDate.ToString("MM/dd/yyyy") + "' and ReceiptCode in (Select TOP 1 GReceiveCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "')  UNION ALL  SELECT missnum + 1, maxid FROM Missing WHERE missnum < maxid ) SELECT Missnum FROM Missing LEFT OUTER JOIN GoodsReceive GR on GR.ReceiptNo = Missing.missnum WHERE GR.ReceiptNo is NULL  Order by Missnum OPTION (MAXRECURSION 0); ";
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
            adap.Fill(dt);
            return dt;
        }

        public DataTable GetMissingSaleBillNo(DateTime sDate, DateTime eDate)
        {

            string strQuery = " ;WITH Missing (missnum, maxid) AS (Select MIN(BillNo) AS missnum, MAX(BillNo) maxnum from SalesRecord Where BillDate>='" + sDate.ToString("MM/dd/yyyy") + "' and  BillDate<'" + eDate.ToString("MM/dd/yyyy") + "' and BillCode in (Select TOP 1 SBillCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "')  UNION ALL  SELECT missnum + 1, maxid FROM Missing WHERE missnum < maxid ) SELECT Missnum FROM Missing LEFT OUTER JOIN SalesRecord SR on SR.BillNo = Missing.missnum WHERE SR.BillNo is NULL  Order by Missnum OPTION (MAXRECURSION 0); ";
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
            adap.Fill(dt);
            return dt;
        }

        public DataTable GetMissingSaleRetailBillNo(DateTime sDate, DateTime eDate)
        {

            string strQuery = " ;WITH Missing (missnum, maxid) AS (Select MIN(BillNo) AS missnum, MAX(BillNo) maxnum from SalesBook Where Date>='" + sDate.ToString("MM/dd/yyyy") + "' and  Date<'" + eDate.ToString("MM/dd/yyyy") + "' and BillCode in (Select TOP 1 SBillCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "')  UNION ALL  SELECT missnum + 1, maxid FROM Missing WHERE missnum < maxid ) SELECT Missnum FROM Missing LEFT OUTER JOIN SalesBook SR on SR.BillNo = Missing.missnum WHERE SR.BillNo is NULL  Order by Missnum OPTION (MAXRECURSION 0); ";
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
            adap.Fill(dt);
            return dt;
        }

        public ArrayList GetMissingPDFFiles()
        {
            ArrayList list = new ArrayList();
            ArrayList FolderName = new ArrayList();
            string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\SCAN_SLIP";
            DirectoryInfo folder = new DirectoryInfo(strPath);
            if (folder.Exists)
            {
                string[] files;
                files = Directory.GetFiles(strPath);
                foreach (string fileName in files)
                {
                    try
                    {
                        FileInfo fileInfo = new FileInfo(fileName);
                        FolderName.Add(Int32.Parse(fileInfo.Name.Substring(0, fileInfo.Name.Length - 4)));
                    }
                    catch
                    {
                    }
                }
            }
            FolderName.Sort();
            if (FolderName.Count > 0)
            {
                try
                {
                    int dLastBill = 0;
                    dLastBill = Convert.ToInt32(FolderName[FolderName.Count - 1]);
                    int j = 0;
                    int[] grsno = GetGoodsReceiveNumber();
                    for (int i = 0; i < grsno.Length; i++)
                    {
                        j = 0;
                        for (int l = 0; l < FolderName.Count; l++)
                        {
                            int k = 0;
                            try
                            {
                                k = Convert.ToInt32(FolderName[l]);
                            }
                            catch
                            {
                            }
                            if (grsno[i] == k)
                            {
                                j++;
                                break;
                            }
                        }
                        if (j == 0)
                        {
                            list.Add(grsno[i]);
                        }
                    }
                }
                catch
                {
                }
            }
            return list;
        }

        private int[] GetGoodsReceiveNumber()
        {
            MainPage.OpenConnection();
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select ReceiptNo from GoodsReceive where Personal='' and SaleBill='CLEAR' order by ReceiptNo", MainPage.con);
            adap.Fill(dt);
            int[] sno = new int[dt.Rows.Count];
            int i = 0;
            foreach (DataRow row in dt.Rows)
            {
                sno[i] = Int32.Parse(Convert.ToString(row[0]));
                i++;
            }
            return sno;
        }

        #endregion

        public string[] IncreaseCounter()
        {           
            string[] strRecord = { "0", "" };
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }

            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Counter,Status from Admin", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {

                strRecord[0] = Convert.ToString(dt.Rows[0][0]);
                strRecord[1] = Convert.ToString(dt.Rows[0][1]);
                string strQuery = "Update Admin set Counter=Counter+1  ";

                if (MainPage.strUpdateQuery != "")
                    strQuery += MainPage.strUpdateQuery;
                string[] _strquery = strQuery.Split('|');
                foreach (string str in _strquery)
                {
                    cmd = new SqlCommand(str, MainPage.con);
                    cmd.ExecuteNonQuery();
                }
                //if (count > 0)
                //    MainPage.strUpdateQuery = "";
                if (MainPage.strVersionUpdateQuery!="")
                {
                    cmd = new SqlCommand(MainPage.strVersionUpdateQuery, MainPage.con);
                    cmd.ExecuteNonQuery();
                }
                MainPage.CloseConnection();
            }
            return strRecord;
        }

        public string GetAdminPassword(string strUserName)
        {
            string strPass = "";
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            try
            {
                DataTable dt = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select Password from Admin where UserName='" + strUserName + "'", MainPage.con);
                adap.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    strPass = Convert.ToString(dt.Rows[0][0]);
                }
            }
            catch
            {
            }
            MainPage.CloseConnection();
            return strPass;
        }

        public DataTable GetNumberofPartiesByGroup()
        {
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select * from (Select UPPER(GroupName)GroupName,Count(*) as SCount from SupplierMaster Group By GroupName)Supplier Order by SCount desc ", MainPage.con);
            adap.Fill(dt);
            return dt;
        }

        public string GetUserPassword(string strUserName)
        {
            string strPass = "";
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            try
            {
                DataTable dt = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select Password from UserAccount where LoginName='" + strUserName + "'", MainPage.con);
                adap.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    strPass = dt.Rows[0][0].ToString();
                }
            }
            catch
            {
            }
            MainPage.CloseConnection();
            return strPass;
        }


        public int GetUnAdjustedEntryFromPreviousDataBase(string strParty, string strDataBase)
        {
            int count = 0;
            MainPage.ChangeDataBase(strDataBase);
            if (MainPage.con.Database == strDataBase)
            {
                DataTable dt = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select Count(*) from BalanceAmount where AccountID='" + strParty + "' and Tick='False' and CAST(Amount as Money)!=0 ", MainPage.con);
                adap.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    if (Convert.ToString(dt.Rows[0][0]) != "")
                    {
                        count = Convert.ToInt32(dt.Rows[0][0]);
                    }
                }
            }
            MainPage.CloseConnection();
            return count;
        }

        public DateTime[] GetFinancialDateTime(string strCode, string strCompanyCode)
        {
            DateTime[] date = { MainPage.startFinDate, MainPage.endFinDate };
            try
            {
                MainPage.ChangeDataBase(strCode);
                DataTable table = new DataTable();
                SqlDataAdapter adap = new SqlDataAdapter("Select Fin_Y_Starts,Fin_Y_Ends from Company Where CompanyID=" + strCompanyCode + " ", MainPage.con);
                adap.Fill(table);
                if (table.Rows.Count > 0)
                {
                    date[0] = Convert.ToDateTime(table.Rows[0][0]);
                    date[1] = Convert.ToDateTime(table.Rows[0][1]);
                }
            }
            catch
            {
            }
            return date;
        }

        #region Create Back Up

        public void CreateBackupWithCommand(string strPath)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            string strFullPath = strPath + @"\" + MainPage.strDataBaseFile + ".bak";
            FileInfo file = new FileInfo(strFullPath);
            if (file.Exists)
            {
                file.Delete();
            }
            SqlCommand comm = MainPage.con.CreateCommand();
            comm.CommandText = "Backup Database  " + MainPage.strDataBaseFile + " to disk = '" + strFullPath + "'";
            comm.ExecuteNonQuery();
            MainPage.CloseConnection();
        }

        #endregion

        #region Restore Back Up

        public bool RestoreBackupWithCommand(string strPath)
        {
            bool restoreStatus = false;
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            //MainPage.con.Close();
            //MainPage.con.ConnectionString = @"Data Source=208.91.198.174;Initial Catalog=A152; User Id=Chandu;Password=Logic123@";
            //MainPage.con.Open();

            MainPage.con.ChangeDatabase("master");

            FileInfo file = new FileInfo(strPath);
            if (file.Exists)
            {
                string dbName = MainPage.strDataBaseFile, strSafeFileName = file.Name.Remove(file.Name.Length - 4, 4);

                if (dbName == strSafeFileName)
                {
                    SqlCommand cmd = new SqlCommand("ALTER DATABASE " + dbName + " SET Single_User WITH Rollback Immediate ", MainPage.con);
                    int count = cmd.ExecuteNonQuery();

                    cmd = new SqlCommand("Restore Database " + dbName + " From Disk = '" + strPath + "' WITH REPLACE", MainPage.con);
                    count = cmd.ExecuteNonQuery();

                    cmd = new SqlCommand("ALTER DATABASE " + dbName + " SET Multi_User ", MainPage.con);
                    count = cmd.ExecuteNonQuery();

                    try
                    {
                        //if (MainPage.strDataBaseFile == "A1000")
                        //{
                        MainPage.con.ChangeDatabase("CompanyInformation");
                        cmd = new SqlCommand("Update HeadOffice Set UpdatedDate='" + MainPage.currentDate + "',UpdatedBy='" + MainPage.strLoginName + "' Where CompanyName='" + MainPage.strDataBaseFile + "' ", MainPage.con);
                        count = cmd.ExecuteNonQuery();
                        if (count == 0)
                        {
                            cmd = new SqlCommand(" Insert into HeadOffice Value('" + MainPage.strDataBaseFile + "','" + MainPage.currentDate + "','" + MainPage.currentDate + "','" + MainPage.strLoginName + "','" + MainPage.strLoginName + "')", MainPage.con);
                            count = cmd.ExecuteNonQuery();
                        }
                        //}
                    }
                    catch
                    {
                    }
                    finally
                    {
                        MainPage.CloseConnection();
                    }
                    restoreStatus = true;
                }
                else
                {
                    System.Windows.Forms.MessageBox.Show("Both Company Name is not Same ! Please choose same company backup Which is : " + MainPage.strDataBaseFile + ".bak", "Warning", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Warning);
                }


                MainPage.con.ChangeDatabase(MainPage.strDataBaseFile);
                ChangeCompanyNameInFile();
            }
            return restoreStatus;
        }

        public DataTable GetLastUpdatedDate()
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            DataTable table = new DataTable();
            try
            {
                MainPage.con.ChangeDatabase("CompanyInformation");
                SqlDataAdapter adap = new SqlDataAdapter("Select * from HeadOffice", MainPage.con);
                adap.Fill(table);
            }
            catch
            {
            }
            MainPage.CloseConnection();
            return table;
        }

        public static void SetMultiUserDataBase()
        {
            try
            {
                SqlConnection multiCon = new SqlConnection();
                string strCon = MainPage.con.ConnectionString + " password=" + MainPage.strDBPwd + ";";
                strCon = strCon.Replace(MainPage.strDataBaseFile, "master");
                multiCon.ConnectionString = strCon;

                if (multiCon.State == ConnectionState.Closed)
                    multiCon.Open();

                string strQuery = " DECLARE @spid INT, @SQL VARCHAR(8000); SET @spid = @@SPID; SET @SQL = ''; "
                                    + " SELECT @SQL = 'KILL ' + CONVERT(VARCHAR(5), spid) + ';'   FROM [master]..sysprocesses  WHERE [dbid] = db_id('" + MainPage.strDataBaseFile + "') and spid != @spid;  EXEC(@SQL); "
                                    + " SET DEADLOCK_PRIORITY HIGH  "
                                    + " ALTER DATABASE " + MainPage.strDataBaseFile + " SET MULTI_USER WITH ROLLBACK IMMEDIATE ";

                SqlCommand cmd = new SqlCommand(strQuery, multiCon);
                cmd.ExecuteNonQuery();
                multiCon.Dispose();
            }
            catch
            {
                SetMultiUserDataBaseSecondTime();
            }
            finally
            {
                MainPage.OpenConnection();
                MainPage.CloseConnection();
            }
        }

        public static void SetMultiUserDataBaseSecondTime()
        {
            try
            {
                SqlConnection multiCon = new SqlConnection();
                string strCon = MainPage.con.ConnectionString + " password=" + MainPage.strDBPwd + ";";
                strCon = strCon.Replace(MainPage.strDataBaseFile, "master");
                multiCon.ConnectionString = strCon;

                if (multiCon.State == ConnectionState.Closed)
                    multiCon.Open();

                string strQuery = " DECLARE @spid INT, @SQL VARCHAR(8000); SET @spid = @@SPID; SET @SQL = ''; "
                                    + " SELECT @SQL = 'KILL ' + CONVERT(VARCHAR(5), spid) + ';'   FROM [master]..sysprocesses  WHERE [dbid] = db_id('" + MainPage.strDataBaseFile + "') and spid != @spid;  EXEC(@SQL); "
                                    + " SET DEADLOCK_PRIORITY HIGH  "
                                    + " ALTER DATABASE " + MainPage.strDataBaseFile + " SET MULTI_USER WITH ROLLBACK IMMEDIATE ";

                SqlCommand cmd = new SqlCommand(strQuery, multiCon);
                cmd.ExecuteNonQuery();
                multiCon.Dispose();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void ChangeCompanyNameInFile()
        {
            string[] record = new string[2];
            record[0] = MainPage.strDataBaseFile.Substring(1);
            record[1] = GetCompanyName(record[0]);
            SaveRecordInStartingEntry(record);
            UpdateCompany(record[0]);
            MainPage.strCompanyName = record[1];
            SetFinancialDate();

        }



        public static void SetFinancialDate()
        {
            try
            {
                string strQuery = "";

                MainPage.bHSNWisePurchase = MainPage.bArticlewiseOpening = false;
                MainPage.strBarCodingType = MainPage.strMonthLockPeriod = MainPage.strMonthLockDate = "";

                strQuery += " Select Convert(varchar,Date,103)Date,Status from Admin "
                         + " Select * from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "' "
                         + " Select Fin_Y_Starts,Fin_Y_Ends,CONVERT(date,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),106) as Date,Offline_Path  as OnlineDB,CurrencyUnit as ServerDB,(CASE When Prev_Y_Path!='' then (SubString(Prev_Y_Path,LEN(Prev_Y_Path)-CHARINDEX('\\', REVERSE(Prev_Y_Path))+2,CHARINDEX('\\', REVERSE(Prev_Y_Path))-1)) else '' end) PreviousDB,MobileNo1 as LiveDBIP,CurrencyBase as BranchCode from Company Where CompanyName='" + MainPage.strCompanyName + "' "
                         + " Select * from PrintingConfig Select TaxEnabled,StateName,CompanyName,[HeaderImage],[BrandLogo],[SignatureImage] from CompanyDetails "
                         + " Select * from CategoryDetails "
                         + " IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ProfitMargin]') AND type in (N'U')) begin  Select * from ProfitMargin  Where CompanyName='" + MainPage.strCompanyName + "' end "
                         + " IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MessageMaster]') AND type in (N'U')) begin Select * from MessageMaster end ";

                DataSet ds = GetDataSetRecord(strQuery);
                if (ds.Tables.Count > 0)
                {
                    DataTable table = ds.Tables[0];
                    if (table.Rows.Count > 0)
                    {
                        if (Convert.ToString(table.Rows[0]["Status"]) != "PAID")
                        {
                            DateTime date = DateTime.ParseExact(Convert.ToString(table.Rows[0]["Date"]), "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                            MainPage.currentDate = MainPage.startFinDate = date;
                            MainPage.endFinDate = date.AddDays(15).AddHours(23);
                            MainPage.strCurrentDate = MainPage.currentDate.ToString("dd/MM/yyyy");
                            MainPage._bPaidStatus = false;
                        }
                        else
                            MainPage._bPaidStatus = true;
                    }

                    table.Clear();
                    table = ds.Tables[1];
                    if (table.Rows.Count > 0)
                    {
                        DataRow dRow = table.Rows[0];
                        if (dRow != null)
                        {
                            MainPage.strSenderEmailID = Convert.ToString(dRow["EmailID"]);
                            MainPage.strSenderPassword = Convert.ToString(dRow["Password"]);
                            MainPage.strSMTPServer = Convert.ToString(dRow["SMTPServer"]);
                            MainPage._SMTPPORTNo = (Int32)ConvertObjectToDoubleStatic(dRow["SMTPPort"]);

                            MainPage.dFreightDhara = MainPage.dPackingDhara = ConvertObjectToDoubleStatic(dRow["FreightDhara"]);
                            MainPage.dTaxDhara = ConvertObjectToDoubleStatic(dRow["TaxDhara"]);
                            MainPage.dPackingAmount = ConvertObjectToDoubleStatic(dRow["Packing"]);
                            MainPage.dPostageAmount = ConvertObjectToDoubleStatic(dRow["Postage"]);

                            if (table.Columns.Contains("OtherCode"))
                            {
                                string str = Convert.ToString(dRow["OtherCode"]).ToUpper();
                                if (str.Contains("TRUE"))
                                    MainPage._bBarCodeStatus = true;
                                else
                                    MainPage._bBarCodeStatus = false;
                            }
                            else
                                MainPage._bBarCodeStatus = false;

                            string strPrintOn = Convert.ToString(dRow["Rebate"]).ToUpper();
                            if (strPrintOn.Contains("TRUE"))
                                MainPage._PrintWithDialog = true;
                            else
                                MainPage._PrintWithDialog = false;

                            if (table.Columns.Contains("HTTPPath"))
                            {
                                MainPage.strHttpPath = Convert.ToString(dRow["HTTPPath"]);
                                MainPage.strFTPPath = Convert.ToString(dRow["FTPPath"]);
                                MainPage.strFTPUserName = Convert.ToString(dRow["FTPUserName"]);
                                MainPage.strFTPPassword = Convert.ToString(dRow["FTPPassword"]);
                            }
                            if (table.Columns.Contains("StockAsPer"))
                                MainPage.strStockAsPer = Convert.ToString(dRow["StockAsPer"]);

                            if (table.Columns.Contains("ItemMapping"))
                            {
                                string str = Convert.ToString(dRow["ItemMapping"]).ToUpper();
                                if (str.Contains("HSN_WISE"))
                                    MainPage.bHSNWisePurchase = true;
                            }
                            if (table.Columns.Contains("BarcodingType"))
                                MainPage.strBarCodingType = Convert.ToString(dRow["BarcodingType"]).ToUpper();

                            if (table.Columns.Contains("ItemOpening"))
                                MainPage.bArticlewiseOpening = Convert.ToString(dRow["ItemOpening"]).ToUpper() == "ARTICLE_WISE";

                            if (table.Columns.Contains("MonthLockPeriod"))
                            {
                                MainPage.strMonthLockPeriod = Convert.ToString(dRow["MonthLockPeriod"]);
                                MainPage.strMonthLockDate = Convert.ToString(dRow["MonthLockDate"]);
                            }
                            if (table.Columns.Contains("PurchaseSetWise"))
                            {
                                string str = Convert.ToString(dRow["PurchaseSetWise"]).ToUpper();
                                if (str.Contains("SET_WISE"))
                                    MainPage.bPurchaseSetWise = true;
                            }
                        }
                    }

                    table.Clear();
                    table = ds.Tables[2];

                    if (table.Rows.Count > 0)
                    {
                        DataRow row = table.Rows[0];
                        if (MainPage._bPaidStatus)
                        {
                            MainPage.startFinDate = Convert.ToDateTime(row["Fin_Y_Starts"]);
                            MainPage.endFinDate = Convert.ToDateTime(row["Fin_Y_Ends"]);
                        }
                        MainPage.currentDate = Convert.ToDateTime(row["Date"]);
                        MainPage.strOnlineDataBaseName = Convert.ToString(row["OnlineDB"]);
                        MainPage.strServerDataBaseName = Convert.ToString(row["ServerDB"]);
                        MainPage.strPreviousDataBase = Convert.ToString(row["PreviousDB"]);
                        MainPage.strLiveDataBaseIP = Convert.ToString(row["LiveDBIP"]);
                        MainPage.strBranchCode = Convert.ToString(row["BranchCode"]);

                        MainPage.strCurrentDate = MainPage.currentDate.ToString("dd/MM/yyyy");
                        if (MainPage.strPreviousDataBase != "")
                            MainPage.strPreviousDataBase = "A" + MainPage.strPreviousDataBase;
                    }
                    else
                        MainPage.mymainObject.Close();

                    table.Clear();
                    table = ds.Tables[3];
                    if (table.Rows.Count > 0)
                    {
                        SetUpdatedData(table.Rows[0]);
                    }

                    table.Clear();
                    table = ds.Tables[4];
                    if (table.Rows.Count > 0)
                    {
                        MainPage.strPrintComapanyName = Convert.ToString(table.Rows[0]["CompanyName"]);
                        MainPage._bTaxStatus = Convert.ToBoolean(table.Rows[0]["TaxEnabled"]);
                        MainPage.strCompanyStateName = Convert.ToString(table.Rows[0]["StateName"]);
                        if (table.Rows[0]["HeaderImage"] != null && Convert.ToString(table.Rows[0]["HeaderImage"]) != "")
                            MainPage._headerImage = (byte[])(table.Rows[0]["HeaderImage"]);
                        if (table.Rows[0]["BrandLogo"] != null && Convert.ToString(table.Rows[0]["BrandLogo"]) != "")
                            MainPage._brandLogo = (byte[])(table.Rows[0]["BrandLogo"]);
                        if (table.Rows[0]["SignatureImage"] != null && Convert.ToString(table.Rows[0]["SignatureImage"]) != "")
                            MainPage._signatureImage = (byte[])(table.Rows[0]["SignatureImage"]);
                    }

                    table = ds.Tables[5];
                    if (table.Rows.Count > 0)
                    {
                        DataRow row = table.Rows[0];
                        MainPage.StrCategory1 = Convert.ToString(row["CategoryName1"]);
                        MainPage.StrCategory2 = Convert.ToString(row["CategoryName2"]);
                        MainPage.StrCategory3 = Convert.ToString(row["CategoryName3"]);
                        MainPage.StrCategory4 = Convert.ToString(row["CategoryName4"]);
                        MainPage.StrCategory5 = Convert.ToString(row["CategoryName5"]);
                        SetCategoryData();
                    }

                    MainPage._bFixedMargin = MainPage._bPurchaseBillWiseMargin = MainPage._bItemWiseMargin = MainPage._bBrandWiseMargin = MainPage._bDesignMasterMargin = false;
                    MainPage.dFixedMargin = MainPage.dPurchaseBillMargin = MainPage.dItemwiseMargin = MainPage.dBrandwiseMargin = 0;
                    if (ds.Tables.Count > 6)
                    {
                        table = ds.Tables[6];
                        if (table.Rows.Count > 0)
                        {
                            DataRow row = table.Rows[0];
                            if (Convert.ToBoolean(row["FixedProfit"]))
                            {
                                MainPage._bFixedMargin = true;
                                MainPage.dFixedMargin = ConvertObjectToDoubleStatic(row["FixedProfitRate"]);
                            }
                            else if (Convert.ToBoolean(row["PurchaseBill"]))
                            {
                                MainPage._bPurchaseBillWiseMargin = true;
                                MainPage.dPurchaseBillMargin = ConvertObjectToDoubleStatic(row["PurchaseBillRate"]);
                            }
                            else if (Convert.ToBoolean(row["Itemwise"]))
                            {
                                MainPage._bItemWiseMargin = true;
                                MainPage.dItemwiseMargin = ConvertObjectToDoubleStatic(row["ItemwiseRate"]);
                            }
                            else if (Convert.ToBoolean(row["BrandWise"]))
                            {
                                MainPage._bBrandWiseMargin = true;
                                MainPage.dBrandwiseMargin = ConvertObjectToDoubleStatic(row["BrandWiseRate"]);
                            }
                            else
                                MainPage._bDesignMasterMargin = true;
                        }
                    }

                    if (ds.Tables.Count > 7)
                    {
                        table = ds.Tables[7];
                        if (table.Rows.Count > 0)
                        {
                            if (table.Columns.Contains("URL"))
                            {
                                DataRow row = table.Rows[0];
                                MainPage.strSMSURL = Convert.ToString(row["URL"]);
                                MainPage.strSenderID = Convert.ToString(row["SenderId"]);
                                MainPage.strSMSPassword = Convert.ToString(row["Password"]);
                                MainPage.strSMSUser = Convert.ToString(row["UserName"]);
                                MainPage.strMessageType = Convert.ToString(row["MessageType"]);
                            }
                        }
                    }

                    //table = ds.Tables[6];
                    //if (table.Rows.Count > 0)
                    //{
                    //    DataRow row = table.Rows[0];
                    //    if(Convert.ToString(row["MobileNo"])!="")
                    //    {
                    //        HappyBirthDayPage objHappy = new HappyBirthDayPage(Convert.ToString(row["Name"]), Convert.ToString(row["MobileNo"]));                            
                    //        int x = Screen.PrimaryScreen.WorkingArea.Size.Height, y = Screen.PrimaryScreen.WorkingArea.Size.Width;
                    //        objHappy.Location = new System.Drawing.Point(x - 450, y-350);
                    //        objHappy.Show();
                    //    }
                    //}
                    if (MainPage.startFinDate < Convert.ToDateTime("04/01/2021"))
                        MainPage.dTCSPer = 0.075;
                    else
                        MainPage.dTCSPer = 0.10;
                }
                else
                    MainPage.mymainObject.Close();
            }
            catch
            {
            }
        }
        public static void SetCategoryData()
        {
            MainPage.mymainObject.variant1ToolStripMenuItem.Visible = MainPage.mymainObject.variant2ToolStripMenuItem.Visible = MainPage.mymainObject.variant3ToolStripMenuItem.Visible = MainPage.mymainObject.variant4ToolStripMenuItem.Visible = MainPage.mymainObject.variant5ToolStripMenuItem.Visible = false;
            if (MainPage.StrCategory1 != "")
            {
                if (MainPage.mymainObject.bAccountMasterAdd || MainPage.mymainObject.bAccountMasterEdit || MainPage.mymainObject.bAccountMasterView)
                    MainPage.mymainObject.variant1ToolStripMenuItem.Visible = true;
                MainPage.mymainObject.variant1ToolStripMenuItem.Text = MainPage.StrCategory1 + " Master";
            }
            if (MainPage.StrCategory2 != "")
            {
                if (MainPage.mymainObject.bAccountMasterAdd || MainPage.mymainObject.bAccountMasterEdit || MainPage.mymainObject.bAccountMasterView)
                    MainPage.mymainObject.variant2ToolStripMenuItem.Visible = true;
                MainPage.mymainObject.variant2ToolStripMenuItem.Text = MainPage.StrCategory2 + " Master";
            }
            if (MainPage.StrCategory3 != "")
            {
                if (MainPage.mymainObject.bAccountMasterAdd || MainPage.mymainObject.bAccountMasterEdit || MainPage.mymainObject.bAccountMasterView)
                    MainPage.mymainObject.variant3ToolStripMenuItem.Visible = true;
                MainPage.mymainObject.variant3ToolStripMenuItem.Text = MainPage.StrCategory3 + " Master";
            }
            if (MainPage.StrCategory4 != "")
            {
                if (MainPage.mymainObject.bAccountMasterAdd || MainPage.mymainObject.bAccountMasterEdit || MainPage.mymainObject.bAccountMasterView)
                    MainPage.mymainObject.variant4ToolStripMenuItem.Visible = true;
                MainPage.mymainObject.variant4ToolStripMenuItem.Text = MainPage.StrCategory4 + " Master";
            }
            if (MainPage.StrCategory5 != "")
            {
                if (MainPage.mymainObject.bAccountMasterAdd || MainPage.mymainObject.bAccountMasterEdit || MainPage.mymainObject.bAccountMasterView)
                    MainPage.mymainObject.variant5ToolStripMenuItem.Visible = true;
                MainPage.mymainObject.variant5ToolStripMenuItem.Text = MainPage.StrCategory5 + " Master";
            }
        }

        private static void SetUpdatedData(DataRow row)
        {
            try
            {
                MainPage.strTitleofDocument = Convert.ToString(row["TitleOfDocument"]);
                MainPage.strSubTitle = Convert.ToString(row["SubTitle"]);
                MainPage.strJurisdiction = Convert.ToString(row["Jurisdiction"]);
                MainPage.strGeneratedBy = Convert.ToString(row["GeneratedBy"]);
                MainPage.strDeclaration = Convert.ToString(row["Declaration"]);
                MainPage.strSaleRtnDeclaration = Convert.ToString(row["SaleRtnDeclaration"]);
                MainPage.strSaleServDeclaration = Convert.ToString(row["SaleServDeclaration"]);
                MainPage.strPurchaseRtnDeclaration = Convert.ToString(row["PurchRtnDeclaration"]);
                MainPage.strTermsofDelivery = Convert.ToString(row["TermsofDelivery"]);
                MainPage.strNoofCopy = Convert.ToString(row["NoOfCopy"]);
                           

                MainPage.pCompanyName = Convert.ToBoolean(row["CompanyName"]);
                MainPage.pCompanyAddress = Convert.ToBoolean(row["CompanyAddress"]);
                MainPage.pBuyerName = Convert.ToBoolean(row["BuyerName"]);
                MainPage.pBuyerAddress = Convert.ToBoolean(row["BuyerAddress"]);
                MainPage.pCompTaxRegNo = Convert.ToBoolean(row["CompTaxRegNo"]);
                MainPage.pBuyerTaxRegNo = Convert.ToBoolean(row["BuyerTaxRegNo"]);
                MainPage.pOrderDetails = Convert.ToBoolean(row["OrderDetails"]);
                MainPage.pSuppDesign = Convert.ToBoolean(row["SupplierDesign"]);
                MainPage.pManfDesign = Convert.ToBoolean(row["ManfDesign"]);
                MainPage.pQty = Convert.ToBoolean(row["Qty"]);
                MainPage.pRate = Convert.ToBoolean(row["Rate"]);
                MainPage.pAmount = Convert.ToBoolean(row["Amount"]);
                MainPage.pAgentName = Convert.ToBoolean(row["AgentName"]);
                MainPage.pCategory1 = Convert.ToBoolean(row["Category1"]);
                MainPage.pCategory2 = Convert.ToBoolean(row["Category2"]);
                MainPage.pCategory3 = Convert.ToBoolean(row["Category3"]);
                MainPage.pCategory4 = Convert.ToBoolean(row["Category4"]);
                MainPage.pCategory5 = Convert.ToBoolean(row["Category5"]);
                
                MainPage.iNCopyPurchase = ConvertObjectToIntStatic(row["NCopyPurchase"]);
                MainPage.iNCopySaleRtn = ConvertObjectToIntStatic(row["NCopySaleRtn"]);
                MainPage.iNCopyPurRtn = ConvertObjectToIntStatic(row["NCopyPurRtn"]);
                MainPage.iNCopyCash = ConvertObjectToIntStatic(row["NCopyCash"]);
                MainPage.iNCopyBank = ConvertObjectToIntStatic(row["NCopyBank"]);
                MainPage.iNCopyJournal = ConvertObjectToIntStatic(row["NCopyJournal"]);
                MainPage.iNCopySServ = ConvertObjectToIntStatic(row["NCopySServ"]);
                MainPage.iNCopyStockTrans = ConvertObjectToIntStatic(row["NCopyStockTrans"]);

            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        #endregion



        #region Credte Delete Reporting

        public static bool CreateDeleteQuery(string strData)
        {
            int count = 0;
            try
            {
                if (MainPage.strOnlineDataBaseName != "")
                {
                    if (MainPage.mymainObject.bMultiBranch)
                        count = NetDBAccess.ExecuteMyNonQueryWithTransaction(strData);
                    if (count <= 0)
                    {
                        string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Remote";
                        Directory.CreateDirectory(strPath);
                        StreamWriter sw = new StreamWriter(strPath + "\\Remote.doc", true);
                        sw.Write(sw.NewLine);
                        sw.WriteLine(strData);
                        sw.Close();
                    }                   
                }
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message + ", Unable to write data in remote file, Please contact to administrator ! ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                if (count <= 0)
                    CreateDeleteQuery(strData);
                return false;
            }
        }

        public static bool SaveFile(string strData, string strFileName)
        {
            try
            {
                StreamWriter sw = new StreamWriter(strFileName, true);
                sw.WriteLine(strData);
                sw.Close();
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message + " ! ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return false;
        }
        public bool ValidateFormAccountUnadjust(string strCategory)
        {
            if (strCategory.Contains("RETAILER") || strCategory.Contains("CASH PARTY") || strCategory.Contains("WHOLESALER"))
            {
                if (MainPage.strUserRole.Contains("ADMIN") || MainPage.mymainObject.bLockUnlockCustomer)
                    return true;
                else
                    return false;
            }
            else
                return true;
        }

        public static void CreateDeleteQuery_Net(string strData)
        {
            try
            {
                string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Remote";
                Directory.CreateDirectory(strPath);
                StreamWriter sw = new StreamWriter(strPath + "\\Remote_Net_" + DateTime.Now.Day.ToString() + ".doc", true);
                sw.Write(sw.NewLine);
                sw.WriteLine(strData);
                sw.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message + ", Unable to write data in remote file, Please contact to administrator ! ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        public static void CreateDeleteQuery(string strData, bool _writeStatus)
        {
            try
            {
                int count = 0;
                if(MainPage.mymainObject.bMultiBranch)
                    count= NetDBAccess.ExecuteMyNonQueryWithTransaction(strData);
                if (count <= 0 && _writeStatus)
                {
                    string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Remote";
                    Directory.CreateDirectory(strPath);
                    StreamWriter sw = new StreamWriter(strPath + "\\Remote.doc", true);
                    sw.Write(sw.NewLine);
                    sw.WriteLine(strData);
                    sw.Close();
                }

                //  CreateDeleteQuery_Net(strData);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message + ", Unable to write data in remote file, Please contact to administrator ! ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        public static void CreateInternetQuery(string strQuery, string strDQuery)
        {
            try
            {
                string strDate = DateTime.Now.Day.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Year.ToString() + "_" + DateTime.Now.Hour.ToString() + "_" + DateTime.Now.Minute.ToString() + "_" + DateTime.Now.Second.ToString();

                string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Remote";
                Directory.CreateDirectory(strPath);
                StreamWriter sw = new StreamWriter(strPath + "\\Internet_" + strDate + ".txt", true);
                sw.WriteLine(strQuery);
                sw.Close();

                StreamWriter sw1 = new StreamWriter(strPath + "\\StatusQuery.txt", false);
                sw1.WriteLine(strDQuery);
                sw1.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        public static void SaveExecutedQuery(string strQuery)
        {
            try
            {
                string strDate = DateTime.Now.Day.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Year.ToString() + "_" + DateTime.Now.Hour.ToString() + "_" + DateTime.Now.Minute.ToString() + "_" + DateTime.Now.Second.ToString();

                string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\cloud_q";
                Directory.CreateDirectory(strPath);
                StreamWriter sw = new StreamWriter(strPath + "\\Query_" + strDate + ".txt", true);
                sw.WriteLine(strQuery);
                sw.Close();
                
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! "+ex.Message,"Warning",MessageBoxButtons.OK,MessageBoxIcon.Warning);
            }
        }

        public static bool Generate_Setup_Config()
        {
            try
            {

                string strData = "<?xml version=\"1.0\" encoding=\"utf-8\"?><configuration> <startup useLegacyV2RuntimeActivationPolicy=\"true\"> <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\"/></startup></configuration>";
                string strPath = Application.StartupPath + "\\" + System.Diagnostics.Process.GetCurrentProcess().ProcessName + ".exe.config";
                if (!File.Exists(strPath))
                {
                    FileInfo _FileInfo = new FileInfo(strPath);
                    if (true == _FileInfo.Exists)
                    {
                        _FileInfo.Attributes &= ~FileAttributes.Hidden;
                    }
                    using (StreamWriter fileWriter = new StreamWriter(strPath))
                    {
                        fileWriter.WriteLine(strData);
                    }

                    _FileInfo.Attributes |= FileAttributes.Hidden;
                    MainPage.mymainObject.Close();
                }
            }
            catch
            {
                return false;
            }
            return true;
        }

        public static string ReadDeleteQuery()
        {
            string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\ ", strQuery = "";
            try
            {
                StreamReader sr = new StreamReader(strPath + "\\Remote.doc");
                strQuery = sr.ReadToEnd();
                sr.Close();
            }
            catch
            {
            }
            return strQuery;
        }

        public static void DeleteRemoteQuery()
        {
            string strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Remote";
            Directory.CreateDirectory(strPath);
            StreamWriter sw = new StreamWriter(strPath + "\\Remote.doc", false);
            sw.Write(sw.NewLine);
            sw.WriteLine("");
            sw.Close();
        }


        #endregion

        #region Get Inserted Record

        public static string GetAllInsertedRecord()
        {
            string strQuery = "";
            DataSet ds = new DataSet();
            DataTable table = null, dtGSTDetails = null, dtGoodsReceiveDetails = null;

            #region Insert New Record

            string strSelectQuery = " Select * from CFormReceipt Where InsertStatus=1 Select * from AddressBook Where InsertStatus=1 OR UpdateStatus=1 Select * from BalanceAmount Where (VoucherCode!='' or JournalID!='0') and InsertStatus=1  Select * from CartoneSize Where InsertStatus=1 Select * from CartoneType Where InsertStatus=1 Select * from Category Where InsertStatus=1 Select * from CostCentreAccount Where InsertStatus=1 Select * from CostMaster Where InsertStatus=1 Select * from CourierMaster Where InsertStatus=1 Select * from CourierRegister Where InsertStatus=1 Select * from CourierRegisterIn Where InsertStatus=1 Select * from ForwardingEntry Where InsertStatus=1 Select * from ForwardingRecord Where InsertStatus=1 Select * from GoodsReceive Where InsertStatus=1 Select * from GoodsReturned Where InsertStatus=1 Select * from GRRecords Where InsertStatus=1 Select * from Items Where InsertStatus=1 Select * from JournalAccount Where InsertStatus=1 Select * from FormTypeMaster Where InsertStatus=1 Select * from Marketer  Where InsertStatus=1 Select * from OrderBooking Where InsertStatus=1 Select * from PurchaseRecord  Where InsertStatus=1 Select * from SalesEntry Where InsertStatus=1"
                                  + " Select * from SalesRecord Where InsertStatus=1 Select * from SMSReport Where InsertStatus=1 Select * from Station Where InsertStatus=1 Select * from SupplierMaster Where InsertStatus=1 Select * from Transport Where InsertStatus=1 Select * from EmailDetails Where InsertStatus=1 Select * from OnAccountParty Where InsertStatus=1 Select * from OnAccountSalesRecord Where InsertStatus=1 Select * from RoadPermit Where InsertStatus=1 Select * from ItemGroupMaster Where InsertStatus=1 Order by GroupName Select * from UnitMaster Where InsertStatus=1  Order by UnitName Select * from GoodsReceiveDetails Where InsertStatus=1 Order by ReceiptNo Select * from SaleTypeMaster Where InsertStatus=1 Order by TaxName Select * from TaxCategory Where InsertStatus=1 Order by CategoryName Select * from GSTDetails Where InsertStatus=1 Select * from JournalVoucherDetails Where InsertStatus=1 Select * from SaleReturn Where InsertStatus=1 Select * from SaleReturnDetails Where InsertStatus=1 Select * from PurchaseReturn Where InsertStatus=1 Select * from PurchaseReturnDetails Where InsertStatus=1  Select * from PaymentRequest Where InsertStatus=1  "
                                  + " Select * from CompanyDetails Where InsertStatus=1 Select * from [CompanySetting] Where UpdateStatus=1  Select * from EditTrailDetails Where InsertStatus=1 Select * from SaleServiceBook Where InsertStatus=1 Select * from SaleServiceDetails Where InsertStatus=1 Select * from SalesBook Where InsertStatus=1 Or UpdateStatus=1  Select * from SalesBookSecondary Where InsertStatus=1 Or UpdateStatus=1  Select * from PurchaseBook Where InsertStatus=1 Or UpdateStatus=1  Select * from PurchaseBookSecondary Where InsertStatus=1 Or UpdateStatus=1  Select * from ItemSecondary Where InsertStatus=1 Select * from StockMaster Where InsertStatus=1 Select * from [SchemeMaster] Where InsertStatus=1 Select * from [GraceDaysMaster] Where InsertStatus=1  Select * from SupplierOtherDetails  Where InsertStatus=1 OR UpdateStatus=1 Select * from SupplierBankDetails Where InsertStatus=1 Select * from SupplierBrandDetails Where InsertStatus=1  Select * from Scheme_CustomerDetails Where InsertStatus=1 OR UpdateStatus=1 Order by ID   Select * from Scheme_SupplierDetails Where InsertStatus=1 OR UpdateStatus=1 Order by ID  Select * from ChequeDetails Where InsertStatus=1 OR UpdateStatus=1 Order by BillNo,ID Select * from TCSDetails Where InsertStatus=1 Order by BillNo Select * from [dbo].[BankGuarantee] Where InsertStatus=1 Order by BillNo Select * from StockTransfer Where InsertStatus=1 Order by BillNo Select * from StockTransfer Where InsertStatus=0 and UpdateStatus=1  Order by BillNo Select * from StockTransferSecondary Where InsertStatus=1  Order by BillNo Select * from StockTransferSecondary Where InsertStatus=0 and UpdateStatus=1  Order by BillNo ";

            SqlDataAdapter adap = new SqlDataAdapter(strSelectQuery, MainPage.con);
            adap.Fill(ds);

            double dTaxAmt = 0, dSpcsPer = 0, dSpclAmt = 0, dCashAmt=0,dCardAmt=0;

            if (ds.Tables.Count > 0)
            {
                //table = ds.Tables[0];
                //foreach (DataRow row in table.Rows)
                //{
                //    strQuery += " if not exists(Select * from CFormReceipt Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo=" + row["ReceiptNo"] + " ) begin "
                //                   + " Insert into CFormReceipt ([ReceiptCode],[ReceiptNo],[Date],[FormType],[FormNo],[SalesParty],[SubParty],[OnAccountName],[SaleBillID],[BillDate],[PBillNo],[PurchaseParty],[Amount],[Status],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) "
                //                   + " Values('" + row["ReceiptCode"] + "','" + row["ReceiptNo"] + "','" + row["Date"] + "','" + row["FormType"] + "','" + row["FormNo"] + "','" + row["SalesParty"] + "','" + row["SubParty"] + "','" + row["OnAccountName"] + "','" + row["SaleBillID"] + "','" + row["BillDate"] + "','" + row["PBillNo"] + "','" + row["PurchaseParty"] + "','" + row["Amount"] + "','" + row["Status"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                //}

                table = ds.Tables[1];

                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select [Name] from AddressBook Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin "
                             + " INSERT INTO [dbo].[AddressBook] ([Name],[NickName],[GroupName],[MobileNo],[PhoneNoCode],[PhoneNo],[Address],[PinCode],[City],[State],[InsertStatus],[UpdateStatus],[AreaCode],[AccountNo],[WhatsappNo],[EmailID],[VisitedBy],[VisitedDate],[GSTNo],[Reference],[Remark],[CreatedBy],[UpdatedBy])VALUES "
                             + " ('" + row["Name"] + "','" + row["NickName"] + "','" + row["GroupName"] + "','" + row["MobileNo"] + "','" + row["PhoneNoCode"] + "','" + row["PhoneNo"] + "','" + row["Address"] + "','" + row["PinCode"] + "','" + row["City"] + "','" + row["State"] + "',1,0,'" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["WhatsappNo"] + "','" + row["EmailID"] + "','" + row["VisitedBy"] + "','" + row["VisitedDate"] + "','" + row["GSTNo"] + "','" + row["Reference"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "') end else begin "
                             + " Update [AddressBook] Set [Name]='" + row["Name"] + "',[NickName]='" + row["NickName"] + "',[GroupName]='" + row["GroupName"] + "',[MobileNo]='" + row["MobileNo"] + "',[PhoneNoCode]='" + row["PhoneNoCode"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[Address]='" + row["Address"] + "',[PinCode]='" + row["PinCode"] + "',[City]='" + row["City"] + "',[State]='" + row["State"] + "',[WhatsappNo]='" + row["WhatsappNo"] + "',[EmailID]='" + row["EmailID"] + "',[VisitedBy]='" + row["VisitedBy"] + "',[VisitedDate]='" + row["VisitedDate"] + "',[GSTNo]='" + row["GSTNo"] + "',[Reference]='" + row["Reference"] + "',[Remark]='" + row["Remark"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=1 Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' end ";
                }

                table = ds.Tables[2];
                foreach (DataRow row in table.Rows)
                {
                    strQuery +=""// " if not exists(Select AccountID from BalanceAmount Where VoucherCode='" + row["VoucherCode"] + "' and VoucherNo=" + row["VoucherNo"] + " and RemoteCode=" + row["BalanceID"] + ") begin "
                             + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID],[ChequeStatus],[CHQStatusChangedBy],[GSTNature],[CostCentreAccountID]) Values "
                             + " ('" + row["Date"] + "','" + row["PartyName"] + "','" + row["AccountStatus"] + "','" + row["Status"] + "','" + row["Description"] + "','" + row["Amount"] + "','" + row["AmountStatus"] + "','" + row["FinalAmount"] + "','" + row["JournalID"] + "','False','" + row["VoucherCode"] + "','" + row["VoucherNo"] + "','" + row["UserName"] + "','" + row["UpdatedBy"] + "'," + row["BalanceID"] + ",0,0,'" + row["AccountID"] + "','" + row["AccountStatusID"] + "','" + row["ChequeStatus"] + "','" + row["CHQStatusChangedBy"] + "','" + row["GSTNature"] + "','" + row["CostCentreAccountID"] + "') ";
                             //+ " end ";
                }

                table = ds.Tables[3];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select * from CartoneSize Where CSize='" + row["CSize"] + "') begin "
                                 + " Insert into CartoneSize ([CSize],[PackingAmt],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["CSize"] + "','" + row["PackingAmt"] + "','" + row["Date"] + "',0,0) end ";
                }

                table = ds.Tables[4];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select Cartone from CartoneType Where Cartone='" + row["Cartone"] + "') begin "
                                  + " Insert into CartoneType ([Cartone],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["Cartone"] + "','" + row["Date"] + "',0,0)  end ";
                }

                table = ds.Tables[5];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select CategoryName from Category Where CategoryName='" + row["CategoryName"] + "') begin "
                                 + " Insert into Category ([CategoryName],[DiscountDr],[DiscountCr],[InsertStatus],[UpdateStatus]) Values ('" + row["CategoryName"] + "','" + row["DiscountDr"] + "','" + row["DiscountCr"] + "',0,0)  end ";
                }

                table = ds.Tables[6];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select VoucherCode from CostCentreAccount Where VoucherCode='" + row["VoucherCode"] + "' and BalanceID='" + row["BalanceID"] + "') begin "
                          + " Insert into CostCentreAccount ([VoucherCode],[BalanceID],[AccountName],[CostType],[Description],[Amount],[Status],[Date],[RemoteCode],[InsertStatus],[UpdateStatus]) Values "
                          + " ('" + row["VoucherCode"] + "','" + row["BalanceID"] + "','" + row["AccountName"] + "','" + row["CostType"] + "','" + row["Description"] + "','" + row["Amount"] + "','" + row["Status"] + "','" + row["Date"] + "','" + row["ID"] + "',0,0) end ";
                }

                table = ds.Tables[7];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select * from CostMaster Where CostType='" + row["CostType"] + "') begin "
                                 + " Insert into CostMaster ([CostType],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["CostType"] + "','" + row["Date"] + "',1,0) end  ";
                }

                table = ds.Tables[8];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select CourierName from CourierMaster Where CourierName='" + row["CourierName"] + "') begin "
                                 + " Insert into CourierMaster ([CourierName],[MobileNo],[Address],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values('" + row["CourierName"] + "','" + row["MobileNo"] + "','" + row["Address"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                }

                table = ds.Tables[9];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select SNo from CourierRegister Where SNo=" + row["SNo"] + " and SerialCode='" + row["SerialCode"] + "' and SCode='" + row["SCode"] + "') begin "
                                 + " Insert into CourierRegister ([SNo],[SerialCode],[CourierNo],[CourierName],[DocType],[SaleBillCode],[SaleBillNo],[SalesParty],[Station],[Remark],[Date],[SCode],[UserName],[UpdatedBy],[InsertStatus],[UpdateStatus],[SalePartyID]) Values "
                                  + " (" + row["SNo"] + ",'" + row["SerialCode"] + "','" + row["CourierNo"] + "','" + row["CourierName"] + "','" + row["DocType"] + "','" + row["SaleBillCode"] + "','" + row["SaleBillNo"] + "','" + row["SalesParty"] + "','" + row["Station"] + "','" + row["Remark"] + "','" + row["Date"] + "','" + row["SCode"] + "','" + row["UserName"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["SalePartyID"] + "') end ";
                }

                table = ds.Tables[10];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select CourierCode from CourierRegisterIn Where CourierCode='" + row["CourierCode"] + "' and SNo='" + row["SNo"] + "' and SCode='" + row["SCode"] + "') begin "
                                 + " Insert into CourierRegisterIn ([CourierCode],[SNo],[SCode],[CourierNo],[CourierName],[Date],[DocType],[PartyName],[Station],[Remark],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SalePartyID]) Values "
                                 + " ('" + row["CourierCode"] + "'," + row["SNo"] + ",'" + row["SCode"] + "','" + row["CourierNo"] + "','" + row["CourierName"] + "','" + row["Date"] + "','" + row["DocType"] + "','" + row["PartyName"] + "','" + row["Station"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["SalePartyID"] + "') end ";
                }

                table = ds.Tables[13];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select ReceiptCode from GoodsReceive Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo='" + row["ReceiptNo"] + "' ) begin "
                                 + " Insert into GoodsReceive ([ReceiptCode],[ReceiptNo],[OrderNo],[OrderDate],[SalesParty],[SubSalesParty],[PurchaseParty],[ReceivingDate],[Pieces],[Quantity],[Amount],[Freight],[Tax],[Item],[Packing],[Personal],[SaleBill],[PackingStatus],[CreatedBy],[PrintedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Box],[Remark],[SalePartyID],[SubPartyID],[PurchasePartyID],[InvoiceNo],[InvoiceDate],[PurchaseType],[ReverseCharge],[Dhara],[GrossAmount],[OtherSign],[OtherAmount],[DisPer],[DisAmount],[TaxPer],[TaxAmount],[NetAmount],[PurchaseStatus],[SpecialDscPer],[SpecialDscAmt],[PcsRateAmt],[NoOfCase],[TCSPer],[TCSAmt],[RoundOffSign],[RoundOffAmt],[TaxableAmt]) Values "
                                 + " ('" + row["ReceiptCode"] + "','" + row["ReceiptNo"] + "','" + row["OrderNo"] + "','" + row["OrderDate"] + "','" + row["SalesParty"] + "','" + row["SubSalesParty"] + "','" + row["PurchaseParty"] + "','" + row["ReceivingDate"] + "','" + row["Pieces"] + "','" + row["Quantity"] + "','" + row["Amount"] + "','" + row["Freight"] + "','" + row["Tax"] + "','" + row["Item"] + "','" + row["Packing"] + "','" + row["Personal"] + "','" + row["SaleBill"] + "','" + row["PackingStatus"] + "','" + row["CreatedBy"] + "','" + row["PrintedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["Box"] + "','" + row["Remark"] + "','" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["PurchasePartyID"] + "','" + row["InvoiceNo"] + "','" + row["InvoiceDate"] + "','" + row["PurchaseType"] + "','" + row["ReverseCharge"] + "','" + row["Dhara"] + "'," + ConvertObjectToDoubleStatic(row["GrossAmount"]) + ",'" + row["OtherSign"] + "'," + ConvertObjectToDoubleStatic(row["OtherAmount"]) + "," + ConvertObjectToDoubleStatic(row["DisPer"]) + "," + ConvertObjectToDoubleStatic(row["DisAmount"]) + "," + ConvertObjectToDoubleStatic(row["TaxPer"]) + "," + ConvertObjectToDoubleStatic(row["TaxAmount"]) + "," + ConvertObjectToDoubleStatic(row["NetAmount"]) + ",'" + row["PurchaseStatus"] + "'," + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + "," + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + "," + ConvertObjectToDoubleStatic(row["PcsRateAmt"]) + "," + ConvertObjectToDoubleStatic(row["NoOfCase"]) + "," + ConvertObjectToDoubleStatic(row["TCSPer"]) + "," + ConvertObjectToDoubleStatic(row["TCSAmt"]) + ",'" + row["RoundOffSign"] + "'," + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ") end ";
                }

                table = ds.Tables[14];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select SalesBill from GoodsReturned Where SalesBill='" + row["SalesBill"] + "') begin "
                                 + " Insert into GoodsReturned ([SalesParty],[SubParty],[SalesBill],[SalesFrom],[SerialNo],[PartyName],[Pieces],[Item],[Status],[AdjustedSaleBillNumber],[Date],[InsertStatus],[UpdateStatus],[SalePartyID],[SubPartyID],[PurchasePartyID]) Values "
                                 + " ('" + row["SalesParty"] + "','" + row["SubParty"] + "','" + row["SalesBill"] + "','" + row["SalesFrom"] + "','" + row["SerialNo"] + "','" + row["PartyName"] + "','" + row["Pieces"] + "','" + row["Item"] + "','" + row["Status"] + "','" + row["AdjustedSaleBillNumber"] + "','" + row["Date"] + "',0,0,'" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["PurchasePartyID"] + "') end ";
                }

                table = ds.Tables[15];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select GRCode from GRRecords Where GRCode='" + row["GRCode"] + "' and GRNo=" + row["GRNo"] + " and PurchaseParty='" + row["PurchaseParty"] + "') begin "
                                 + " Insert into GRRecords ([GRCode],[GRNo],[SaleParty],[SubParty],[Date],[Station],[PurchaseParty],[Pcs],[Item],[Amount],[Remark],[TotalPcs],[TotalAmount],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["GRCode"] + "','" + row["GRNo"] + "','" + row["SaleParty"] + "','" + row["SubParty"] + "','" + row["Date"] + "','" + row["Station"] + "','" + row["PurchaseParty"] + "','" + row["Pcs"] + "','" + row["Item"] + "','" + row["Amount"] + "','" + row["Remark"] + "','" + row["TotalPcs"] + "','" + row["TotalAmount"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                }

                table = ds.Tables[16];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select ItemName from Items Where ItemName='" + row["ItemName"] + "') begin "
                            + " INSERT INTO [dbo].[Items] ([ItemName],[Date],[InsertStatus],[UpdateStatus],[GroupName],[SubGroupName],[UnitName],[BillCode],[BillNo],[BuyerDesignName],[QtyRatio],[StockUnitName],[DisStatus],[DisRemark],[Other],[CreatedBy],[UpdatedBy],[BrandName],[MakeName]) VALUES "
                            + " ('" + row["ItemName"] + "','" + row["Date"] + "',0,0,'" + row["GroupName"] + "','" + row["SubGroupName"] + "','" + row["UnitName"] + "','" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["BuyerDesignName"] + "','" + row["QtyRatio"] + "','" + row["StockUnitName"] + "','" + row["DisStatus"] + "','" + row["DisRemark"] + "','" + row["Other"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["BrandName"] + "','" + row["MakeName"] + "')  end ";
                }

                table = ds.Tables[17];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select VoucherCode from JournalAccount Where VoucherCode='" + row["VoucherCode"] + "' and VoucherNo=" + row["VoucherNo"] + " ) begin "
                                  + " Insert into JournalAccount ([Date],[DebitParty],[CreditParty],[Description],[Amount],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[DebitPartyID],[CreditPartyID]) Values "
                                  + "  ('" + row["Date"] + "','" + row["DebitParty"] + "','" + row["CreditParty"] + "','" + row["Description"] + "','" + row["Amount"] + "','" + row["VoucherCode"] + "','" + row["VoucherNo"] + "','" + row["UserName"] + "','" + row["UpdatedBy"] + "'," + row["ID"] + ",0,0,'" + row["DebitPartyID"] + "','" + row["CreditPartyID"] + "') end ";
                }

                table = ds.Tables[18];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select * from FormTypeMaster Where FormType='" + row["FormType"] + "') begin "
                                    + " Insert into FormTypeMaster ([FormType],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["FormType"] + "','" + row["Date"] + "',0,0) end  ";
                }

                table = ds.Tables[19];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select MarketerName from Marketer Where MarketerName='" + row["MarketerName"] + "' ) begin "
                                 + " Insert into Marketer ([MarketerName],[MobileNoI],[MobileNoII],[EmailID],[Address],[City],[Date],[OrderNoFrom],[OrderNoTo],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["MarketerName"] + "','" + row["MobileNoI"] + "','" + row["MobileNoII"] + "','" + row["EmailID"] + "','" + row["Address"] + "','" + row["City"] + "','" + row["Date"] + "','" + row["OrderNoFrom"] + "','" + row["OrderNoTo"] + "',0,0) end ";
                }

                table = ds.Tables[20];
                if (table != null)
                {
                    DataTable _dtOrderDetail = table.DefaultView.ToTable(true, "OrderCode", "SerialNo");
                    foreach (DataRow row in _dtOrderDetail.Rows)
                    {
                        strQuery += " Delete from [dbo].[OrderBooking] Where [OrderCode]='" + row["OrderCode"] + "' and [SerialNo]=" + row["SerialNo"] + " ";
                    }

                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists(Select OrderCode from OrderBooking Where OrderCode='" + row["OrderCode"] + "' and OrderNo=" + row["OrderNo"] + " and NumberCode='" + row["NumberCode"] + "') begin "
                                 + " Insert into OrderBooking ([BookingNo],[Marketer],[OrderNo],[P_Party],[S_Party],[Station],[Items],[Pieces],[Quantity],[Amount],[Transport],[Booking],[Marka],[Haste],[Date],[Personal],[Status],[OrderCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[NumberCode],[SerialNo],[SalePartyID],[SubPartyID],[PurchasePartyID],[SchemeName],[OfferName],[Remark],[AdjustedQty],[CancelQty],[MRemark],[DeliveryDate],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[OrderType],[OrderCategory],[Imagepath1],[Imagepath2],[Imagepath3],[Imagepath4],[Imagepath5]) Values "
                                 + " ('" + row["BookingNo"] + "','" + row["Marketer"] + "','" + row["OrderNo"] + "','" + row["P_Party"] + "','" + row["S_Party"] + "','" + row["Station"] + "','" + row["Items"] + "','" + row["Pieces"] + "','" + row["Quantity"] + "'," + ConvertObjectToDoubleStatic(row["Amount"]) + ",'" + row["Transport"] + "','" + row["Booking"] + "','" + row["Marka"] + "','" + row["Haste"] + "','" + row["Date"] + "','" + row["Personal"] + "','" + row["Status"] + "','" + row["OrderCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["NumberCode"] + "','" + row["SerialNo"] + "','" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["PurchasePartyID"] + "','" + row["SchemeName"] + "','" + row["OfferName"] + "',N'" + row["Remark"] + "'," + ConvertObjectToDoubleStatic(row["AdjustedQty"]) + "," + ConvertObjectToDoubleStatic(row["CancelQty"]) + ",N'" + row["MRemark"] + "','" + row["DeliveryDate"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "','" + row["OrderType"] + "','" + row["OrderCategory"] + "','" + row["Imagepath1"] + "','" + row["Imagepath2"] + "','" + row["Imagepath3"] + "','" + row["Imagepath4"] + "','" + row["Imagepath5"] + "') end ";
                    }
                }

                table = ds.Tables[21];
                double dTCSAmt = 0;
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);
                    dTCSAmt = ConvertObjectToDoubleStatic(row["TCSAmt"]);

                    strQuery += " if not exists(Select BillCode from PurchaseRecord Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                                    + "Insert into PurchaseRecord ([BillCode],[BillNo],[GRSNo],[DueDays],[SupplierName],[SaleBillNo],[SalesParty],[Pieces],[Item],[Discount],[DiscountStatus],[Amount],[Freight],[Tax],[Packing],[FreightDiscount],[TaxDiscount],[PackingDiscount],[NetDiscount],[Remark],[OtherPer],[Others],[GrossAmt],[NetAmt],[BillDate],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SalePartyID],[PurchasePartyID],[TaxLedger],[TaxAmount],[TaxPer],[ReverseCharge],[Dhara],[InvoiceNo],[InvoiceDate],[CheckStatus],[CheckedBy],[PurchaseSource],[SpecialDscPer],[SpecialDscAmt],[PcsRateAmt],[TCSPer],[TCSAmt],[RoundOffSign],[RoundOffAmt],[TaxableAmt]) Values "
                                    + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["GRSNo"] + "','" + row["DueDays"] + "','" + row["SupplierName"] + "','" + row["SaleBillNo"] + "','" + row["SalesParty"] + "','" + row["Pieces"] + "','" + row["Item"] + "','" + row["Discount"] + "','" + row["DiscountStatus"] + "','" + row["Amount"] + "','" + row["Freight"] + "','" + row["Tax"] + "','" + row["Packing"] + "','" + row["FreightDiscount"] + "','" + row["TaxDiscount"] + "','" + row["PackingDiscount"] + "','" + row["NetDiscount"] + "','" + row["Remark"] + "','" + row["OtherPer"] + "','" + row["Others"] + "','" + row["GrossAmt"] + "','" + row["NetAmt"] + "','" + row["BillDate"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["SalePartyID"] + "','" + row["PurchasePartyID"] + "','" + row["TaxLedger"] + "'," + row["TaxAmount"] + "," + ConvertObjectToDoubleStatic(row["TaxPer"]) + ",'" + row["ReverseCharge"] + "','" + row["Dhara"] + "','" + row["InvoiceNo"] + "','" + row["InvoiceDate"] + "','" + row["CheckStatus"] + "','" + row["CheckedBy"] + "','" + row["PurchaseSource"] + "'," + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + "," + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + "," + ConvertObjectToDoubleStatic(row["PcsRateAmt"]) + "," + ConvertObjectToDoubleStatic(row["TCSPer"]) + "," + dTCSAmt + ",'" + row["RoundOffSign"] + "'," + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ") "
                                    + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values "
                                    + " ('" + row["BillDate"] + "','" + row["SupplierName"] + "' ,'PURCHASE A/C' ,'Credit' ,'" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Cr','0','0','False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0,'" + row["PurchasePartyID"] + "') ";
                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["TaxLedger"] + "'; "
                                    + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                    + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                    + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                    + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    if (dTCSAmt > 0)
                    {
                        strQuery += " Select TOP 1 @TCSAccount=(AreaCode+AccountNo) from SupplierMaster Where GroupName='SHORT-TERM LOANS AND ADVANCES' and Category='TCS RECEIVABLES' "
                                 + " INSERT INTO[dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                                 + " ('" + row["BillDate"] + "',@TCSAccount,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "'," + dTCSAmt + ",'DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@TCSAccount) ";
                    }

                    strQuery += " end ";
                }

                table = ds.Tables[22];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select BillCode from SalesEntry Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and GRSNo='" + row["GRSNo"] + "' ) begin "
                             + " Insert into SalesEntry ([BillCode],[BillNo],[SalesFrom],[GRSNo],[SupplierName],[Pieces],[Items],[Discount],[DiscountStatus],[SNDhara],[Amount],[Packing],[Freight],[Tax],[TotalAmt],[PBill],[RemPcs],[BillDate],[PurchaseBill],[Personal],[InsertStatus],[UpdateStatus],[PurchasePartyID],[PurchaseStatus]) Values "
                             + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["SalesFrom"] + "','" + row["GRSNo"] + "','" + row["SupplierName"] + "','" + row["Pieces"] + "','" + row["Items"] + "','" + row["Discount"] + "','" + row["DiscountStatus"] + "','" + row["SNDhara"] + "','" + row["Amount"] + "','" + row["Packing"] + "','" + row["Freight"] + "','" + row["Tax"] + "','" + row["TotalAmt"] + "','" + row["PBill"] + "','" + row["RemPcs"] + "','" + row["BillDate"] + "','" + row["PurchaseBill"] + "','" + row["Personal"] + "',0,0,'" + row["PurchasePartyID"] + "','" + row["PurchaseStatus"] + "') end "
                             + " Update PurchaseRecord set SaleBillNo = '" + row["BillCode"] + " " + row["BillNo"] + "',[Discount]='" + row["Discount"] + "',[DiscountStatus]='" + row["DiscountStatus"] + "' Where GRSNo = '" + row["GRSNo"] + "' ";
                }

                table = ds.Tables[23];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);

                    strQuery += " if not exists(Select BillCode from SalesRecord Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                                     + " Insert into SalesRecord ([BillCode],[BillNo],[SalesParty],[SubParty],[Transport],[Station],[GoodsType],[DueDays],[PackerName],[PackingDate],[CartoneType],[CartoneSize],[NetAddLs],[LrNumber],[LrDate],[Parcel],[Remark],[OtherPer],[Others],[OtherPacking],[Postage],[TotalPcs],[GrossAmt],[FinalAmt],[NetAmt],[BillDate],[ForwardingChallan],[Marka],[OtherPerText],[OtherText],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SalePartyID],[SubPartyID],[SalesType],[TaxAmount],[ServiceAmount],[GreenTaxAmt],[WayBillNo],[VehicleNo],[TimeOfSupply],[OtherField],[TaxPer],[AttachedBill],[BillStatus],[Description],[PackedBillNo],[WayBillDate],[Description_1],[Description_2],[RoundOffSign],[RoundOffAmt],[TaxableAmt],[IRNNO],[ACKNO],[QRCode]) Values "
                                     + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["SalesParty"] + "','" + row["SubParty"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["GoodsType"] + "','" + row["DueDays"] + "','" + row["PackerName"] + "','" + row["PackingDate"] + "','" + row["CartoneType"] + "','" + row["CartoneSize"] + "','" + row["NetAddLs"] + "','" + row["LrNumber"] + "','" + row["LrDate"] + "','" + row["Parcel"] + "','" + row["Remark"] + "','" + row["OtherPer"] + "','" + row["Others"] + "','" + row["OtherPacking"] + "','" + row["Postage"] + "','" + row["TotalPcs"] + "',"
                                     + " '" + row["GrossAmt"] + "','" + row["FinalAmt"] + "','" + row["NetAmt"] + "','" + row["BillDate"] + "','" + row["ForwardingChallan"] + "','" + row["Marka"] + "','" + row["OtherPerText"] + "','" + row["OtherText"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["SalesType"] + "','" + dTaxAmt + "','" + row["ServiceAmount"] + "','" + row["GreenTaxAmt"] + "','" + row["WayBillNo"] + "','" + row["VehicleNo"] + "','" + row["TimeOfSupply"] + "','" + row["OtherField"] + "'," + ConvertObjectToDoubleStatic(row["TaxPer"]) + ",'" + row["AttachedBill"] + "','" + row["BillStatus"] + "','" + row["Description"] + "','" + row["PackedBillNo"] + "','" + row["WayBillDate"] + "','" + row["Description_1"] + "','" + row["Description_2"] + "','" + row["RoundOffSign"] + "'," + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",'"+ row["IRNNO"]+ "','" + row["ACKNO"] + "','" + row["QRCode"] + "')  "
                                     + " if exists (Select AccountID from BalanceAmount Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='SALES A/C') begin "
                                     + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["BillDate"] + "',[PartyName]='" + row["SalesParty"] + "',[Amount]='" + row["NetAmt"] + "',[FinalAmount]='" + row["FinalAmt"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='SALES A/C' end else begin "
                                     + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values "
                                     + " ('" + row["BillDate"] + "' ,'" + row["SalesParty"] + "' ,'SALES A/C' ,'DEBIT' , '" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Dr','" + row["FinalAmt"] + "',0,'False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0,'" + row["SalePartyID"] + "') end ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SalesType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end ";
                }

                //table = ds.Tables[24];
                //foreach (DataRow row in table.Rows)
                //{
                //    strQuery += " Insert into SMSReport ([SenderID],[MobileNo],[TextMessage],[Status],[Date],[SendBy],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) Values "
                //                  + " ('" + row["SenderID"] + "','" + row["MobileNo"] + "','" + row["TextMessage"] + "','" + row["Status"] + "','" + row["Date"] + "','" + row["SendBy"] + "','" + row["UpdatedBy"] + "'," + row["ID"] + ",0,0) ";
                //}

                table = ds.Tables[25];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select * from Station Where StationName='" + row["StationName"] + "') begin "
                                  + " Insert into Station ([StationName],[Date],[InsertStatus],[UpdateStatus],[CreatedBy],[UpdatedBy]) Values('" + row["StationName"] + "','" + row["Date"] + "',1,0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "')  end ";
                }

                table = ds.Tables[26];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select Name from SupplierMaster Where AreaCode='" + row["AreaCode"] + "' and AccountNo='" + row["AccountNo"] + "') begin "
                                 + " Insert into SupplierMaster([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[Other],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[Other1],[Other2],[Other3]) "
                                 + " Values('" + row["Name"] + "','" + row["Category"] + "','" + row["GroupName"] + "','" + row["OpeningBal"] + "','" + row["Status"] + "','" + row["Address"] + "','" + row["State"] + "','" + row["PINCode"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["BookingStation"] + "','" + row["TINNumber"] + "','" + row["NormalDhara"] + "','" + row["SNDhara"] + "','" + row["ContactPerson"] + "', '" + row["PhoneNo"] + "','" + row["MobileNo"] + "','" + row["PvtMarka"] + "',"
                                 + " '" + row["Reference"] + "','" + row["EmailID"] + "','" + row["DueDays"] + "','" + row["Date"] + "','" + row["CFormApply"] + "','" + row["AmountLimit"] + "','" + row["ExtendedAmt"] + "','" + row["HasteSale"] + "','" + row["PermanentAddress"] + "','" + row["SecondTransport"] + "','" + row["ThirdTransport"] + "','" + row["FourthTransport"] + "','" + row["Remark"] + "','" + row["CDDays"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["Postage"] + "','" + row["TransactionLock"] + "','" + row["BlackList"] + "','" + row["BlackListReason"] + "','" + row["GroupII"] + "','" + row["Other"] + "','" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["CardNumber"] + "','" + row["CardStatus"] + "','" + row["SaleIncentive"] + "','" + row["GSTNo"] + "','" + row["PANNumber"] + "','" + row["TaxType"] + "','" + row["AccountantMobileNo"] + "','" + row["MainPartyID"] + "','" + row["CourierName"] + "','" + row["DistrictName"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["Other3"] + "') "
                                 + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values('" + row["Date"] + "' ,'" + row["AreaCode"] + "" + row["AccountNo"] + "' ,'OPENING' ,'" + row["Status"] + "' ,'' ,'" + row["OpeningBal"] + "','','',0,'False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["AreaCode"] + row["AccountNo"] + "') end ";
                }

                table = ds.Tables[27];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select TransportName from Transport Where TransportName='" + row["TransportName"] + "') begin "
                             + " Insert into Transport ([TransportName],[ContactPersonI],[ContactPersonII],[PhoneNoI],[PhoneNoII],[MobileNo],[City],[Address],[Date],[InsertStatus],[UpdateStatus],[GSTNo],[GreenTaxAmt],[CreatedBy],[UpdatedBy],[ForwardingCharges],[ExtraCharges]) Values "
                             + " ('" + row["TransportName"] + "','" + row["ContactPersonI"] + "','" + row["ContactPersonII"] + "','" + row["PhoneNoI"] + "','" + row["PhoneNoII"] + "','" + row["MobileNo"] + "','" + row["City"] + "','" + row["Address"] + "','" + row["Date"] + "',0,0,'" + row["GSTNo"] + "'," + ConvertObjectToDoubleStatic(row["GreenTaxAmt"]) + ",'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "'," + ConvertObjectToDoubleStatic(row["ForwardingCharges"]) + "," + ConvertObjectToDoubleStatic(row["ExtraCharges"]) + ") end ";
                }

                //table = ds.Tables[28];
                //foreach (DataRow row in table.Rows)
                //{
                //    strQuery += " INSERT INTO [dbo].[EmailDetails] ([Date],[EmailID],[Subject],[MessageBody],[FilePath],[Status],[EmailType],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                //                  + " ('" + row["Date"] + "','" + row["EmailID"] + "','" + row["Subject"] + "','" + row["MessageBody"] + "','" + row["FilePath"] + "','" + row["Status"] + "','" + row["EmailType"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) ";
                //}


                table = ds.Tables[32];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select GroupName from ItemGroupMaster Where GroupName='" + row["GroupName"] + "') begin "
                             + "  INSERT INTO [dbo].[ItemGroupMaster] ([GroupName],[CategoryName],[ParentGroup],[HSNCode],[AmtRange],[TaxRate],[HSNType],[Other],[InsertStatus],[UpdateStatus],[TaxCategoryName]) Values "
                             + " ('" + row["GroupName"] + "','" + row["CategoryName"] + "','" + row["ParentGroup"] + "','" + row["HSNCode"] + "'," + ConvertObjectToDoubleStatic(row["AmtRange"]) + "," + ConvertObjectToDoubleStatic(row["TaxRate"]) + ",'" + row["HSNType"] + "','" + row["Other"] + "',1,0 ,'" + row["TaxCategoryName"] + "') end ";
                }
                table = ds.Tables[33];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select * from UnitMaster Where UnitName='" + row["UnitName"] + "' ) begin "
                                  + " INSERT INTO [dbo].[UnitMaster] ([UnitName],[FormalName],[DecimalPoint],[InsertStatus],[UpdateStatus]) VALUES "
                                  + " ('" + row["UnitName"] + "','" + row["FormalName"] + "','" + row["DecimalPoint"] + "',1,0 ) end ";
                }

                table = ds.Tables[35];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select TaxName from SaleTypeMaster Where [TaxName]='" + row["TaxName"] + "' and [SaleType]='" + row["SaleType"] + "') begin "
                                  + " INSERT INTO [dbo].[SaleTypeMaster] ([TaxName],[Region],[TaxationType],[EcommType],[TaxOnMRP],[TaxIncluded],[EcommPortalName],[TaxAccountIGST],[TaxAccountSGST],[Other],[SkipGST],[InsertStatus],[UpdateStatus],[CreatedBy],[UpdatedBy],[SaleType],[IGSTTaxRate],[SGSTTaxRate])  VALUES "
                                 + " ('" + row["TaxName"] + "','" + row["Region"] + "','" + row["TaxationType"] + "','" + row["EcommType"] + "','" + row["TaxOnMRP"] + "','" + row["TaxIncluded"] + "','" + row["EcommPortalName"] + "','" + row["TaxAccountIGST"] + "','" + row["TaxAccountSGST"] + "','" + row["Other"] + "','" + row["SkipGST"] + "',0,0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["SaleType"] + "','" + row["IGSTTaxRate"] + "','" + row["SGSTTaxRate"] + "') end  ";
                }

                table = ds.Tables[36];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select CategoryName from [dbo].[TaxCategory] Where [CategoryName]='" + row["CategoryName"] + "' ) begin "
                                  + " INSERT INTO [dbo].[TaxCategory] ([CategoryName],[TaxType],[TaxRateIGST],[TaxRateCGST],[TaxRateSGST],[TaxOnMRP],[CalculateTaxON],[TaxInclPrice],[ChangeTaxRate],[AmountType],[GreaterORSmaller],[ChangeAmt],[TaxChangeRateIGST],[TaxChangeRateCGST],[TaxChangeRateSGST],[Other],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["CategoryName"] + "','" + row["TaxType"] + "','" + row["TaxRateIGST"] + "','" + row["TaxRateCGST"] + "','" + row["TaxRateSGST"] + "','" + row["TaxOnMRP"] + "','" + row["CalculateTaxON"] + "','" + row["TaxInclPrice"] + "','" + row["ChangeTaxRate"] + "','" + row["AmountType"] + "','" + row["GreaterORSmaller"] + "','" + row["ChangeAmt"] + "','" + row["TaxChangeRateIGST"] + "','" + row["TaxChangeRateCGST"] + "','" + row["TaxChangeRateSGST"] + "','" + row["Other"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end  ";
                }

                table = ds.Tables[38];
                if (table != null)
                {
                    DataTable _dtJVDetail = table.DefaultView.ToTable(true, "VoucherCode", "VoucherNo");
                    foreach (DataRow row in _dtJVDetail.Rows)
                    {
                        strQuery += " Delete from [dbo].[JournalVoucherDetails] Where [VoucherCode]='" + row["VoucherCode"] + "' and [VoucherNo]=" + row["VoucherNo"] + " ";
                    }

                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " INSERT INTO [dbo].[JournalVoucherDetails] ([VoucherCode],[VoucherNo],[PartyID],[AccountID],[OriginalInvoiceNo],[InvoiceDate],[DiffAmt],[GSTPer],[IGSTAmt],[CGSTAmt],[SGSTAmt],[Other],[TotalAmt],[TotalDiffAmt],[TotalTaxAmt],[RCMNature],[Remark],[Region],[InsertStatus]) VALUES "
                                     + " ('" + row["VoucherCode"] + "','" + row["VoucherNo"] + "','" + row["PartyID"] + "','" + row["AccountID"] + "','" + row["OriginalInvoiceNo"] + "','" + row["InvoiceDate"] + "'," + row["DiffAmt"] + "," + row["GSTPer"] + "," + row["IGSTAmt"] + "," + row["CGSTAmt"] + "," + row["SGSTAmt"] + ",'" + row["Other"] + "'," + row["TotalAmt"] + "," + row["TotalDiffAmt"] + "," + row["TotalTaxAmt"] + ",'" + row["RCMNature"] + "','" + row["Remark"] + "','" + row["Region"] + "',0)  ";
                    }
                }

                table = ds.Tables[40];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += "  if not exists (Select BillCode from SaleReturnDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + ") begin  "
                               + " INSERT INTO [dbo].[SaleReturnDetails] ([BillCode],[BillNo],[RemoteID],[PurchaseBillNo],[PurchasePartyID],[ItemName],[DisStatus],[Discount],[Dhara],[Qty],[Amount],[Packing],[Freight],[TaxFree],[TotalAmt],[PurchaseReturnStatus],[PurchaseReturnNumber],[InsertStatus],[UpdateStatus],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[MRP],[Rate],[UnitName],[ItemStatus],[SDisPer],[Disc],[BarCode],[BrandName],[DesignName],[Other1],[Other2],[SalesMan],[SaleIncentive],[BarCode_S]) VALUES  "
                               + "  ('" + row["BillCode"] + "'," + row["BillNo"] + "," + row["SID"] + ",'" + row["PurchaseBillNo"] + "','" + row["PurchasePartyID"] + "','" + row["ItemName"] + "','" + row["DisStatus"] + "'," + row["Discount"] + ",'" + row["Dhara"] + "'," + row["Qty"] + "," + row["Amount"] + "," + ConvertObjectToDoubleStatic(row["Packing"]) + "," + ConvertObjectToDoubleStatic(row["Freight"]) + "," + ConvertObjectToDoubleStatic(row["TaxFree"]) + "," + row["TotalAmt"] + ",'" + row["PurchaseReturnStatus"] + "','" + row["PurchaseReturnNumber"] + "',0,0,'" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + ConvertObjectToDoubleStatic(row["MRP"]) + "," + ConvertObjectToDoubleStatic(row["Rate"]) + ",'" + row["UnitName"] + "','" + row["ItemStatus"] + "'," + ConvertObjectToDoubleStatic(row["SDisPer"]) + "," + ConvertObjectToDoubleStatic(row["Disc"]) + ",'" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["SalesMan"] + "'," + ConvertObjectToDoubleStatic(row["SaleIncentive"]) + ",'" + row["BarCode_S"] + "')  end ";
                }

                table = ds.Tables[39];
                double _dNetAmt = 0, _dServiceAmt = 0, _dPackingAmt = 0;
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);
                    _dNetAmt = ConvertObjectToDoubleStatic(row["NetAmt"]);
                    _dServiceAmt = ConvertObjectToDoubleStatic(row["ServiceAmt"]);
                    _dPackingAmt = ConvertObjectToDoubleStatic(row["PackingAmt"]);

                    strQuery += "  if not exists (Select BillCode from SaleReturn Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " ) begin  "
                               + " INSERT INTO [dbo].[SaleReturn] ([BillCode],[BillNo],[Date],[SalePartyID],[SubPartyID],[SaleBillCode],[SaleBillNo],[EntryType],[SaleType],[Remark],[OtherSign],[OtherAmt],[PackingAmt],[NetDiscount],[ServiceAmt],[TaxPer],[TaxAmount],[TotalQty],[GrossAmt],[NetAmt],[OtherText],[OtherValue],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SaleBillDate],[DiscountType],[Description1],[Description2],[Description3],[CashAmt],[CreditAmt],[ReturnType],[RoundOffSign],[RoundOffAmt],[TaxableAmt],[IRNNO],[ACKNO],[QRCode]) VALUES "
                               + "  ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["Date"] + "','" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["SaleBillCode"] + "','" + row["SaleBillNo"] + "','" + row["EntryType"] + "','" + row["SaleType"] + "','" + row["Remark"] + "','" + row["OtherSign"] + "'," + row["OtherAmt"] + "," + _dPackingAmt + "," + row["NetDiscount"] + "," + _dServiceAmt + "," + row["TaxPer"] + "," + row["TaxAmount"] + "," + row["TotalQty"] + "," + row["GrossAmt"] + "," + _dNetAmt + ",'" + row["OtherText"] + "','" + row["OtherValue"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["SaleBillDate"] + "','" + row["DiscountType"] + "','" + row["Description1"] + "','" + row["Description2"] + "','" + row["Description3"] + "'," + ConvertObjectToDoubleStatic(row["CashAmt"]) + "," + ConvertObjectToDoubleStatic(row["CreditAmt"]) + ",'" + row["ReturnType"] + "','" + row["RoundOffSign"] + "'," + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",'" + row["IRNNO"] + "','" + row["ACKNO"] + "','" + row["QRCode"] + "') "
                               + " if exists (Select PR.BillCode  from SaleReturn PR Cross APPLY (Select GReturnCode from CompanySetting Where BilLCode=GReturnCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin "
                               + " Select @_PackingAmt=SUM(Packing+Freight) from SaleReturnDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                               + " Select @_FinalAmt=(NetAmt-((CAST((OtherSign+CAST(OtherAmt as varchar)) as Money)+ServiceAmt+PackingAmt)+((@_PackingAmt+(CAST((OtherSign+CAST(OtherAmt as varchar)) as Money)+ServiceAmt+PackingAmt))*TaxPer/100))) from SaleReturn Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                               + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                               + " ('" + row["Date"] + "','" + row["SalePartyID"] + "','SALE RETURN','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + _dNetAmt + "','CR',@_FinalAmt,'0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["SalePartyID"] + "')   ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end else begin ";

                    strQuery += "  if exists (Select PR.BillCode from SaleReturn PR Cross APPLY (Select DebitNoteCode from CompanySetting Where BilLCode=DebitNoteCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + row["Date"] + "','" + row["SalePartyID"] + "','DEBIT NOTE','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + row["NetAmt"] + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["SalePartyID"] + "')   ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }

                    strQuery += " end end end ";

                }

                table = ds.Tables[41];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);

                    strQuery += "  if not exists (Select BillCode from PurchaseReturn Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " ) begin  "
                               + " INSERT INTO [dbo].[PurchaseReturn] ([BillCode],[BillNo],[Date],[PurchasePartyID],[EntryType],[PurchaseType],[Remark],[OtherSign],[OtherAmt],[NetDiscount],[TaxPer],[TaxAmount],[TotalQty],[GrossAmt],[NetAmt],[OtherText],[OtherValue],[CreatedBy],[UpdatedBy],[ReverseCharge],[InsertStatus],[UpdateStatus],[PurchaseBillCode],[PurchaseBillNo],[PurchaseBillDate],[Description1],[Description2],[Description3],[RoundOffSign],[RoundOffAmt],[TaxableAmt],[TaxFree]) VALUES "
                               + "  ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["Date"] + "','" + row["PurchasePartyID"] + "','" + row["EntryType"] + "','" + row["PurchaseType"] + "','" + row["Remark"] + "','" + row["OtherSign"] + "'," + row["OtherAmt"] + "," + row["NetDiscount"] + "," + row["TaxPer"] + "," + row["TaxAmount"] + "," + row["TotalQty"] + "," + row["GrossAmt"] + "," + row["NetAmt"] + ",'" + row["OtherText"] + "','" + row["OtherValue"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["ReverseCharge"] + "',0,0,'" + row["PurchaseBillCode"] + "','" + row["PurchaseBillNo"] + "','" + row["PurchaseBillDate"] + "','" + row["Description1"] + "','" + row["Description2"] + "','" + row["Description3"] + "','" + row["RoundOffSign"] + "'," + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxFree"]) + ")  "
                               + " if exists (Select PR.BillCode from PurchaseReturn PR Cross APPLY (Select PurchaseReturnCode from CompanySetting Where BilLCode=PurchaseReturnCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                               + " ('" + row["Date"] + "','" + row["PurchasePartyID"] + "','PURCHASE RETURN','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + row["NetAmt"] + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["PurchasePartyID"] + "')  ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["PurchaseType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName=Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end  else begin  "
                             + " if exists (Select PR.BillCode  from PurchaseReturn PR Cross APPLY (Select CreditNoteCode from CompanySetting Where BillCode=CreditNoteCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + row["Date"] + "','" + row["PurchasePartyID"] + "','CREDIT NOTE','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + row["NetAmt"] + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["PurchasePartyID"] + "')  ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["PurchaseType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName=Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end end end ";
                }

                table = ds.Tables[42];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += "  if not exists (Select BillCode from PurchaseReturnDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + ") begin  "
                              + " INSERT INTO [dbo].[PurchaseReturnDetails] ([BillCode],[BillNo],[RemoteID],[SRBillNo],[SalePartyID],[ItemName],[DisStatus],[Discount],[Dhara],[Qty],[Amount],[Packing],[Freight],[TaxFree],[TotalAmt],[InsertStatus],[UpdateStatus],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[MRP],[Rate],[UnitName],[ItemStatus],[SDisPer],[Disc],[BarCode],[BrandName],[DesignName],[Other1],[Other2]) VALUES  "
                               + "  ('" + row["BillCode"] + "'," + row["BillNo"] + "," + row["SID"] + ",'" + row["SRBillNo"] + "','" + row["SalePartyID"] + "','" + row["ItemName"] + "','" + row["DisStatus"] + "'," + row["Discount"] + ",'" + row["Dhara"] + "'," + row["Qty"] + "," + row["Amount"] + "," + ConvertObjectToDoubleStatic(row["Packing"]) + "," + ConvertObjectToDoubleStatic(row["Freight"]) + "," + ConvertObjectToDoubleStatic(row["TaxFree"]) + "," + row["TotalAmt"] + ",0,0,'" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + ConvertObjectToDoubleStatic(row["MRP"]) + "," + ConvertObjectToDoubleStatic(row["Rate"]) + ",'" + row["UnitName"] + "','" + row["ItemStatus"] + "'," + ConvertObjectToDoubleStatic(row["SDisPer"]) + "," + ConvertObjectToDoubleStatic(row["Disc"]) + ",'" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "') end ";
                }

                //table = ds.Tables[43];
                //foreach (DataRow row in table.Rows)
                //{
                //    strQuery += "  INSERT INTO [dbo].[PaymentRequest] ([BranchCode],[PartyID],[PartyName],[CashAmt],[CashStatus],[PurchaseAmt],[PurchaseStatus],[NetAmt],[NetStatus],[Date],[FilePath],[BankName],[BranchName],[AccountNumber],[AccountName],[IFSCCode],[CreatedBy],[RequestStatus],[InsertStatus],[UpdateStatus],[BeniID]) VALUES "
                //              + "  ('" + row["BranchCode"] + "','" + row["PartyID"] + "','" + row["PartyName"] + "','" + row["CashAmt"] + "','" + row["CashStatus"] + "','" + row["PurchaseAmt"] + "','" + row["PurchaseStatus"] + "','" + row["NetAmt"] + "','" + row["NetStatus"] + "','" + row["Date"] + "','" + row["FilePath"] + "','" + row["BankName"] + "','" + row["BranchName"] + "','" + row["AccountNumber"] + "','" + row["AccountName"] + "','" + row["IFSCCode"] + "','" + row["CreatedBy"] + "','" + row["RequestStatus"] + "',0,0,'" + row["BeniID"] + "')   ";
                //}

                table = ds.Tables[44];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " INSERT INTO [dbo].[CompanyDetails] ([CompanyName],[FullCompanyName],[Address],[StateName],[PinCode],[GSTNo],[PANNo],[TINNo],[EmailID],[STDNo],[PhoneNo],[MobileNo],[SignaturePath],[Other],[TAXEnabled],[CreatedBy],[UpdateBy],[InsertStatus],[UpdateStatus],[BankName],[AccountName],[IFSCCode],[BranchName],[CINNumber],[SACCode]) VALUES  "
                              + "  ('" + row["CompanyName"] + "','" + row["FullCompanyName"] + "','" + row["Address"] + "','" + row["StateName"] + "','" + row["PinCode"] + "','" + row["GSTNo"] + "','" + row["PANNo"] + "','" + row["TINNo"] + "','" + row["EmailID"] + "','" + row["STDNo"] + "','" + row["PhoneNo"] + "','" + row["MobileNo"] + "','" + row["SignaturePath"] + "','" + row["Other"] + "','" + row["TAXEnabled"] + "','" + row["CreatedBy"] + "','" + row["UpdateBy"] + "',0,0,'" + row["BankName"] + "','" + row["AccountName"] + "','" + row["IFSCCode"] + "','" + row["BranchName"] + "','" + row["CINNumber"] + "','" + row["SACCode"] + "')   ";
                }
                table = ds.Tables[45];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select CompanyName from CompanySetting Where CompanyName = '" + row["CompanyName"] + "') begin  "
                             + "  INSERT INTO [dbo].[CompanySetting] ([CompanyName],[StandardLogin],[ShowAccountCode],[PwdLimit],[MobileNo],[EmailID],[GReceiveCode],[SBillCode],[PBillCode],[FChallanCode],[GReturnCode],[CashVCode],[JournalVCode],[CourierCode],[OrderCode],[DaysInYear],[GraceDays],[CashDiscDays],[CashDiscRate],[DrInterest],[CrInterest],[FreightDhara],[TaxDhara],[Postage],[Packing],[Vat],[Rebate],[Date],[CreatedBy],[UpdatedBy],[UpdateStatus],[BankVCode],[Password],[PurchaseReturnCode],[SaleServiceCode],[DebitNoteCode],[CreditNoteCode],[RCMVCode],[SMTPServer],[SMTPPort],[AltrationCode],[STCode],[CHQCode],[OtherCode]) VALUES  "
                             + "  ('" + row["CompanyName"] + "','" + row["StandardLogin"] + "','" + row["ShowAccountCode"] + "','" + row["PwdLimit"] + "','" + row["MobileNo"] + "','" + row["EmailID"] + "','" + row["GReceiveCode"] + "','" + row["SBillCode"] + "','" + row["PBillCode"] + "','" + row["FChallanCode"] + "','" + row["GReturnCode"] + "','" + row["CashVCode"] + "','" + row["JournalVCode"] + "','" + row["CourierCode"] + "','" + row["OrderCode"] + "','" + row["DaysInYear"] + "','" + row["GraceDays"] + "','" + row["CashDiscDays"] + "','" + row["CashDiscRate"] + "','" + row["DrInterest"] + "','" + row["CrInterest"] + "','" + row["FreightDhara"] + "','" + row["TaxDhara"] + "','" + row["Postage"] + "','" + row["Packing"] + "','" + row["Vat"] + "','" + row["Rebate"] + "','" + row["Date"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["UpdateStatus"] + "','" + row["BankVCode"] + "','" + row["Password"] + "','" + row["PurchaseReturnCode"] + "','" + row["SaleServiceCode"] + "','" + row["DebitNoteCode"] + "','" + row["CreditNoteCode"] + "','" + row["RCMVCode"] + "','" + row["SMTPServer"] + "','" + row["SMTPPort"] + "','" + row["AltrationCode"] + "','" + row["STCode"] + "','" + row["CHQCode"] + "','" + row["OtherCode"] + "')  end ";
                }

                table = ds.Tables[46];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                             + "('" + row["BillType"] + "','" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["Date"] + "'," + row["NetAmt"] + ",'" + row["UpdatedBy"] + "',1,0,'" + row["EditStatus"] + "') ";
                }


                table = ds.Tables[47];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmt"]);

                    strQuery += "  if not exists (Select BillCode from SaleServiceBook Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " ) begin  "
                               + "  INSERT INTO [dbo].[SaleServiceBook] ([BillCode],[BillNo],[Date],[SalePartyID],[SubPartyID],[SaleType],[TransportName],[StationName],[Remark],[OtherText],[OtherSign],[OtherAmt],[TaxPer],[TaxAmt],[GrossAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[RoundOffSign],[RoundOffAmt],[TaxableAmt],[IRNNO],[ACKNO],[QRCode]) VALUES "
                               + "  ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["Date"] + "','" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["SaleType"] + "','" + row["TransportName"] + "','" + row["StationName"] + "','" + row["Remark"] + "','" + row["OtherText"] + "','" + row["OtherSign"] + "'," + row["OtherAmt"] + "," + row["TaxPer"] + "," + row["TaxAmt"] + "," + row["GrossAmt"] + "," + row["NetAmt"] + ",'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0,'" + row["RoundOffSign"] + "'," + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",'" + row["IRNNO"] + "','" + row["ACKNO"] + "','" + row["QRCode"] + "')  "
                               + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                               + " ('" + row["Date"] + "','" + row["SalePartyID"] + "','SALE SERVICE','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + row["NetAmt"] + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["SalePartyID"] + "')   ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end ";

                }

                table = ds.Tables[48];
                strQuery += " Select Top 1 @CardName=(AreaCode+AccountNo) from SupplierMaster Where Category='CARD SALE' "
                         + "  Select Top 1 @CashName=(AreaCode+AccountNo) from SupplierMaster Where Category='CASH SALE'";
                foreach (DataRow row in table.Rows)
                {
                    strQuery += "  if not exists (Select BillCode from SaleServiceDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + ") begin  "
                               + " INSERT INTO [dbo].[SaleServiceDetails] ([BillCode],[BillNo],[ItemName],[SAC],[Amount],[RemoteID],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES  "
                              + "  ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["ItemName"] + "','" + row["SAC"] + "'," + row["Amount"] + ",'" + row["ID"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0)  end ";
                }

                table = ds.Tables[49];
                string strSalePartyID, strDescription_4, strMobileNo, strAdvanceSlipNo, strReturnSlipNo, strSaleBillType, strMaterialLocation, strChequeSerialNo, strOfferApplied, strGrossProfit ;
                double dAdvanceAmt, dReturnAmt, dCreditAmt, dTenderAmt, dRefundAmt, dChequeAmt, dOfferDisPer, dOfferDisAmt, dPartSaleAmt;
                bool _registeredParty = false;
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmt"]);

                    if (!MainPage.strSoftwareType.Contains("AGENT"))
                    {
                        strDescription_4 = Convert.ToString(row["Description_4"]); strMobileNo = Convert.ToString(row["MobileNo"]); strAdvanceSlipNo = Convert.ToString(row["AdvanceSlipNo"]);
                        strReturnSlipNo = Convert.ToString(row["ReturnSlipNo"]); strSaleBillType = Convert.ToString(row["SaleBillType"]); strMaterialLocation = Convert.ToString(row["MaterialLocation"]); strChequeSerialNo = Convert.ToString(row["ChequeSerialNo"]);
                        strOfferApplied = Convert.ToString(row["OfferApplied"]); strGrossProfit = Convert.ToString(row["GrossProfit"]);
                        dAdvanceAmt = ConvertObjectToDoubleStatic(row["AdvanceAmt"]); dReturnAmt = ConvertObjectToDoubleStatic(row["ReturnAmt"]); dCreditAmt = ConvertObjectToDoubleStatic(row["CreditAmt"]); dTenderAmt = ConvertObjectToDoubleStatic(row["TenderAmt"]);
                        dRefundAmt = ConvertObjectToDoubleStatic(row["RefundAmt"]); dChequeAmt = ConvertObjectToDoubleStatic(row["ChequeAmt"]); dOfferDisPer = ConvertObjectToDoubleStatic(row["OfferDisPer"]); dOfferDisAmt = ConvertObjectToDoubleStatic(row["OfferDisAmt"]); dPartSaleAmt = ConvertObjectToDoubleStatic(row["PartSaleAmt"]);
                        dCashAmt = ConvertObjectToDoubleStatic(row["CashAmt"]); dCardAmt = ConvertObjectToDoubleStatic(row["CardAmt"]);
                        if (strOfferApplied == "")
                            strOfferApplied = strGrossProfit = "false";
                    }
                    else
                    {
                        strDescription_4 = strMobileNo = strAdvanceSlipNo = strReturnSlipNo = strSaleBillType = strMaterialLocation = strChequeSerialNo = "";
                        dCashAmt = dCardAmt = dAdvanceAmt = dReturnAmt = dCreditAmt = dTenderAmt = dRefundAmt = dChequeAmt = dOfferDisPer = dOfferDisAmt = dPartSaleAmt = 0;
                        strOfferApplied = strGrossProfit = "false";
                    }
                    strSalePartyID = Convert.ToString(row["SalePartyID"]);

                    string strCustomer = System.Text.RegularExpressions.Regex.Replace(strSalePartyID, "[^0-9.]", "");
                    if (strCustomer != "")
                        _registeredParty = true;

                    if (MainPage.strSoftwareType == "RETAIL")
                    {
                        strQuery += " if not exists(Select BillCode from [SalesBook] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                                            + "  INSERT INTO [dbo].[SalesBook] ([BillCode],[BillNo],[Date],[SalePartyID],[SubPartyID],[SalesType],[Station],[TransportName],[WaybillNo],[WayBillDate],[NoOfCase],[LRNumber],[LRDate],[LRTime],[PvtMarka],[Remark],[Description],[PackerName],[PackingDate],[CartonType],[CartonSize],[DisPer],[DisAmt],[TaxPer],[TaxAmt],[PackingAmt],[OtherSign],[OtherAmt],[PostageAmt],[GreenTax],[RoundOffSign],[RoundOffAmt],[TotalQty],[GrossAmt],[FinalAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[OrderNo],[AttachedBill],[PackedBillNo],[Description_1],[Description_2],[Description_3],[SpecialDscPer],[SpecialDscAmt],[Description_4],[MobileNo],[AdvanceSlipNo],[AdvanceAmt],[ReturnSlipNo],[ReturnAmt],[CardAmt],[CashAmt],[CreditAmt],[SaleBillType],[MaterialLocation],[TenderAmt],[RefundAmt],[ChequeSerialNo],[ChequeAmt],[OfferApplied],[GrossProfit],[OfferDisPer],[OfferDisAmt],[PartSaleAmt],[TaxableAmt],[IRNNO],[ACKNO],[QRCode]) VALUES  "
                                            + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["Date"] + "','" + strSalePartyID + "','" + row["SubPartyID"] + "','" + row["SalesType"] + "','" + row["Station"] + "','" + row["TransportName"] + "','" + row["WaybillNo"] + "','" + row["WayBillDate"] + "','" + row["NoOfCase"] + "','" + row["LRNumber"] + "','" + row["LRDate"] + "','" + row["LRTime"] + "','" + row["PvtMarka"] + "','" + row["Remark"] + "','" + row["Description"] + "','" + row["PackerName"] + "','" + row["PackingDate"] + "', "
                                            + " '" + row["CartonType"] + "','" + row["CartonSize"] + "'," + row["DisPer"] + "," + row["DisAmt"] + "," + row["TaxPer"] + "," + dTaxAmt + "," + row["PackingAmt"] + ",'" + row["OtherSign"] + "'," + row["OtherAmt"] + "," + row["PostageAmt"] + "," + row["GreenTax"] + ",'" + row["RoundOffSign"] + "'," + row["RoundOffAmt"] + "," + row["TotalQty"] + "," + row["GrossAmt"] + "," + row["FinalAmt"] + "," + row["NetAmt"] + ",'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["OrderNo"] + "','" + row["AttachedBill"] + "','" + row["PackedBillNo"] + "','" + row["Description_1"] + "','" + row["Description_2"] + "','" + row["Description_3"] + "'," + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + "," + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + ",'" + strDescription_4 + "','" + strMobileNo + "','" + strAdvanceSlipNo + "'," + dAdvanceAmt + ",'" + strReturnSlipNo + "'," + dReturnAmt + "," + dCardAmt + "," + dCashAmt + "," + dCreditAmt + ",'" + strSaleBillType + "','" + strMaterialLocation + "'," + dTenderAmt + "," + dRefundAmt + ",'" + strChequeSerialNo + "'," + dChequeAmt + ",'" + strOfferApplied + "','" + strGrossProfit + "'," + dOfferDisPer + "," + dOfferDisAmt + "," + dPartSaleAmt + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",'" + row["IRNNO"] + "','" + row["ACKNO"] + "','" + row["QRCode"] + "')  ";

                        //strQuery += " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values "
                        //        + " ('" + row["Date"] + "' ,'" + row["SalePartyID"] + "' ,'SALES A/C','DEBIT', '" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Dr','" + row["FinalAmt"] + "',0,'False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0,'" + row["SalePartyID"] + "') ";

                        if (_registeredParty && strSalePartyID != "")
                        {
                            strQuery += " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                       + " ('" + row["Date"] + "','" + strSalePartyID + "','SALES A/C','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + row["NetAmt"] + "','DR','0','0','FALSE','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + strSalePartyID + "')  ";
                        }

                        if (dCardAmt > 0)
                        {
                            if (_registeredParty && strSalePartyID != "")
                            {
                                strQuery += " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                           + " ('" + row["Date"] + "',@CardName,'CARD RECEIVE','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCardAmt + "','DR','" + dCardAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@CardName,'" + strSalePartyID + "')  "
                                           + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                           + " ('" + row["Date"] + "','" + strSalePartyID + "','CARD RECEIVE','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCardAmt + "','DR','" + dCardAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + strSalePartyID + "',@CardName)  ";

                            }
                            else
                            {
                                strQuery += " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                            + " ('" + row["Date"] + "',@CardName,'SALES A/C','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCardAmt + "','DR','" + dCardAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@CardName,'CARD SALE')  ";
                            }
                        }

                        if (dCashAmt > 0)
                        {
                            if (_registeredParty && strSalePartyID != "")
                            {
                                strQuery += " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                           + " ('" + row["Date"] + "',@CashName,'CASH RECEIVE','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@CashName,'" + strSalePartyID + "')  "
                                           + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                           + " ('" + row["Date"] + "','" + strSalePartyID + "','CASH RECEIVE','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + strSalePartyID + "',@CashName)  ";

                            }
                            else
                            {
                                strQuery += " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                        + " ('" + row["Date"] + "',@CashName,'SALES A/C','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@CashName,'CASH SALE')  ";
                            }
                        }

                        strQuery += " end else begin "
                                  + " UPDATE [SalesBook] SET [Date]='" + row["Date"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[SalesType]='" + row["SalesType"] + "',[Station]='" + row["Station"] + "',[TransportName]='" + row["TransportName"] + "',[WaybillNo]='" + row["WaybillNo"] + "',[WayBillDate]='" + row["WayBillDate"] + "',[NoOfCase]='" + row["NoOfCase"] + "',[LRNumber]='" + row["LRNumber"] + "',[LRDate]='" + row["LRDate"] + "',[LRTime]='" + row["LRTime"] + "',[PvtMarka]='" + row["PvtMarka"] + "',[Remark]='" + row["Remark"] + "',[Description]='" + row["Description"] + "',[PackerName]='" + row["PackerName"] + "',[PackingDate]='" + row["PackingDate"] + "', "
                                  + " [CartonType]='" + row["CartonType"] + "',[CartonSize]='" + row["CartonSize"] + "',[DisPer]=" + row["DisPer"] + ",[DisAmt]=" + row["DisAmt"] + ",[TaxPer]=" + row["TaxPer"] + ",[TaxAmt]=" + dTaxAmt + ",[PackingAmt]=" + row["PackingAmt"] + ",[OtherSign]='" + row["OtherSign"] + "',[OtherAmt]=" + row["OtherAmt"] + ",[PostageAmt]=" + row["PostageAmt"] + ",[GreenTax]=" + row["GreenTax"] + ",[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + row["RoundOffAmt"] + ",[TotalQty]=" + row["TotalQty"] + ",[GrossAmt]=" + row["GrossAmt"] + ",[FinalAmt]=" + row["FinalAmt"] + ",[NetAmt]=" + row["NetAmt"] + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[OrderNo]='" + row["OrderNo"] + "',[AttachedBill]='" + row["AttachedBill"] + "',[PackedBillNo]='" + row["PackedBillNo"] + "',[Description_1]='" + row["Description_1"] + "',[Description_2]='" + row["Description_2"] + "',[Description_3]='" + row["Description_3"] + "',[SpecialDscPer]=" + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + ",[SpecialDscAmt]=" + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + ","
                                  + " [Description_4]='" + strDescription_4 + "',[MobileNo]='" + strMobileNo + "',[AdvanceSlipNo]='" + strAdvanceSlipNo + "',[AdvanceAmt]=" + dAdvanceAmt + ",[ReturnSlipNo]='" + strReturnSlipNo + "',[ReturnAmt]=" + dReturnAmt + ",[CardAmt]=" + dCardAmt + ",[CashAmt]=" + dCashAmt + ",[CreditAmt]=" + dCreditAmt + ",[SaleBillType]='" + strSaleBillType + "',[MaterialLocation]='" + strMaterialLocation + "',[TenderAmt]=" + dTenderAmt + ",[RefundAmt]=" + dRefundAmt + ",[ChequeSerialNo]='" + strChequeSerialNo + "',[ChequeAmt]=" + dChequeAmt + ",[OfferApplied]='" + strOfferApplied + "',[GrossProfit]='" + strGrossProfit + "',[OfferDisPer]=" + dOfferDisPer + ",[OfferDisAmt]=" + dOfferDisAmt + ",[PartSaleAmt]=" + dPartSaleAmt + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",[IRNNO]='" + row["IRNNO"] + "',[ACKNO]='" + row["ACKNO"] + "',[QRCode]='" + row["QRCode"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " ";

                        ///strQuery += " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]=" + row["NetAmt"] + ",[FinalAmount]='" + row["FinalAmt"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='SALES A/C'  ";

                        if (_registeredParty && strSalePartyID != "")
                        {
                            strQuery += " if not exists (Select PartyName from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and ISNULL([AccountStatusID],'') NOT IN ('CARD SALE','CASH SALE')) begin "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "','" + strSalePartyID + "','SALES A/C','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + row["NetAmt"] + "','DR','" + row["NetAmt"] + "','0','FALSE','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + strSalePartyID + "')  end else begin "
                                     + " Update [dbo].[BalanceAmount] Set [Date]='" + row["Date"] + "',[PartyName]='" + strSalePartyID + "',[Amount]=" + row["NetAmt"] + ",[AccountID]='" + strSalePartyID + "'  Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and ISNULL([AccountStatusID],'') NOT IN ('CARD SALE','CASH SALE') end "
                                     + " Delete from BalanceAmount Where [AccountStatus] in ('SALES A/C') AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and ISNULL([AccountStatusID],'') IN ('CARD SALE','CASH SALE') ";
                        }
                        else
                            strQuery += " Delete from BalanceAmount Where [AccountStatus] in ('SALES A/C','CARD RECEIVE','CASH RECEIVE') AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and ISNULL([AccountStatusID],'') NOT IN ('CARD SALE','CASH SALE') ";

                        if (dCardAmt > 0)
                        {
                            if (_registeredParty && strSalePartyID != "")
                            {
                                strQuery += " if not exists (Select PartyName from BalanceAmount Where [AccountStatus]='CARD RECEIVE' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "') begin INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                         + " ('" + row["Date"] + "',@CardName,'CARD RECEIVE','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCardAmt + "','DR','" + dCardAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@CardName,'" + strSalePartyID + "')  "
                                         + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                         + " ('" + row["Date"] + "','" + strSalePartyID + "','CARD RECEIVE','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCardAmt + "','DR','" + dCardAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + strSalePartyID + "',@CardName) end else begin "
                                         + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]=@CardName,[Amount]=" + dCardAmt + ",[FinalAmount]='" + dCardAmt + "',[UpdatedBy]='" + row["CreatedBy"] + "',[AccountID]=@CardName Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='CARD RECEIVE'  and Status='DEBIT' "
                                         + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + strSalePartyID + "',[Amount]=" + dCardAmt + ",[FinalAmount]='" + dCardAmt + "',[UpdatedBy]='" + row["CreatedBy"] + "',[AccountID]='" + strSalePartyID + "'  Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='CARD RECEIVE'  and Status='CREDIT' end ";

                            }
                            else
                            {
                                strQuery += " if not exists (Select PartyName from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatusID]='CARD SALE' ) begin INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                            + " ('" + row["Date"] + "',@CardName,'SALES A/C','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCardAmt + "','DR','" + dCardAmt + "','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@CardName,'CARD SALE')  end else begin "
                                            + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]=@CardName,[Amount]=" + dCardAmt + ",[FinalAmount]='" + dCardAmt + "',[UpdatedBy]='" + row["CreatedBy"] + "',[AccountID]=@CardName Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='SALES A/C'  and [AccountStatusID]='CARD SALE'  end";
                            }
                        }
                        else
                            strQuery += " Delete from BalanceAmount Where (([AccountStatus] in ('SALES A/C') and [AccountStatusID]='CARD SALE') OR [AccountStatus] in ('CARD RECEIVE')) AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  ";

                        if (dCashAmt > 0)
                        {
                            if (_registeredParty && strSalePartyID != "")
                            {
                                strQuery += " if not exists (Select PartyName from BalanceAmount Where [AccountStatus]='CASH RECEIVE' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "') begin  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                           + " ('" + row["Date"] + "',@CashName,'CASH RECEIVE','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@CashName,'" + strSalePartyID + "')  "
                                           + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                           + " ('" + row["Date"] + "','" + strSalePartyID + "','CASH RECEIVE','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,'" + strSalePartyID + "',@CashName) end else begin "
                                           + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]=@CashName,[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]=@CashName Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='CASH RECEIVE'  and Status='DEBIT' "
                                           + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + strSalePartyID + "',[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]='" + strSalePartyID + "'  Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='CASH RECEIVE'  and Status='CREDIT' end ";

                            }
                            else
                            {
                                strQuery += " if not exists (Select PartyName from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatusID]='CASH SALE' ) begin INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                        + " ('" + row["Date"] + "',@CashName,'SALES A/C','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@CashName,'CASH SALE') end else begin "
                                        + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]=@CashName,[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]=@CashName Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='SALES A/C'  and [AccountStatusID]='CASH SALE'  end";
                            }
                        }
                        else
                            strQuery += " Delete from BalanceAmount Where (([AccountStatus] in ('SALES A/C') and [AccountStatusID]='CASH SALE') OR [AccountStatus] in ('CASH RECEIVE')) AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  ";
                        
                        strQuery += " Delete from BalanceAmount Where [AccountStatus]='DUTIES & TAXES' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                                + " Delete from [dbo].[GSTDetails] Where [BillType]='SALES' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " "
                                + " Delete from StockMaster Where BillType='SALES' and BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                                + " end ";

                        //if (dCashAmt > 0)
                        //{
                        //    strQuery += "  Select Top 1 @CashName=(AreaCode+AccountNo) from SupplierMaster Where Category='CASH SALE'; if not exists (Select PartyName from BalanceAmount Where [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "') begin "
                        //                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                        //                    + " ('" + row["Date"] + "',@CashName,'CASH RECEIVED','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@CashName,'" + row["SalePartyID"] + "')  "
                        //                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                        //                    + " ('" + row["Date"] + "','" + row["SalePartyID"] + "','CASH RECEIVED','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','false','',0,'" + MainPage.strLoginName + "','',0,0,0,'" + row["SalePartyID"] + "',@CashName) end else begin "
                        //                    + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]=@CashName,[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]=@CashName Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') and Status='DEBIT' "
                        //                    + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]='" + row["SalePartyID"] + "'  Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') and Status='CREDIT' end "
                        //                    + " Delete from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatusID]='CREDIT SALE' ";
                        //}
                        //else if (!MainPage.strSoftwareType.Contains("AGENT"))
                        //{
                        //    strQuery += " Delete from BalanceAmount Where [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                        //             + " Delete from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatusID]='CREDIT SALE' ";
                        //}

                    }
                    else
                    {
                        strQuery += " if not exists(Select BillCode from [SalesBook] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                                         + "  INSERT INTO [dbo].[SalesBook] ([BillCode],[BillNo],[Date],[SalePartyID],[SubPartyID],[SalesType],[Station],[TransportName],[WaybillNo],[WayBillDate],[NoOfCase],[LRNumber],[LRDate],[LRTime],[PvtMarka],[Remark],[Description],[PackerName],[PackingDate],[CartonType],[CartonSize],[DisPer],[DisAmt],[TaxPer],[TaxAmt],[PackingAmt],[OtherSign],[OtherAmt],[PostageAmt],[GreenTax],[RoundOffSign],[RoundOffAmt],[TotalQty],[GrossAmt],[FinalAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[OrderNo],[AttachedBill],[PackedBillNo],[Description_1],[Description_2],[Description_3],[SpecialDscPer],[SpecialDscAmt],[Description_4],[MobileNo],[AdvanceSlipNo],[AdvanceAmt],[ReturnSlipNo],[ReturnAmt],[CardAmt],[CashAmt],[CreditAmt],[SaleBillType],[MaterialLocation],[TenderAmt],[RefundAmt],[ChequeSerialNo],[ChequeAmt],[OfferApplied],[GrossProfit],[OfferDisPer],[OfferDisAmt],[PartSaleAmt],[TaxableAmt],[IRNNO],[ACKNO],[QRCode]) VALUES  "
                                         + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["Date"] + "','" + strSalePartyID + "','" + row["SubPartyID"] + "','" + row["SalesType"] + "','" + row["Station"] + "','" + row["TransportName"] + "','" + row["WaybillNo"] + "','" + row["WayBillDate"] + "','" + row["NoOfCase"] + "','" + row["LRNumber"] + "','" + row["LRDate"] + "','" + row["LRTime"] + "','" + row["PvtMarka"] + "','" + row["Remark"] + "','" + row["Description"] + "','" + row["PackerName"] + "','" + row["PackingDate"] + "', "
                                         + " '" + row["CartonType"] + "','" + row["CartonSize"] + "'," + row["DisPer"] + "," + row["DisAmt"] + "," + row["TaxPer"] + "," + dTaxAmt + "," + row["PackingAmt"] + ",'" + row["OtherSign"] + "'," + row["OtherAmt"] + "," + row["PostageAmt"] + "," + row["GreenTax"] + ",'" + row["RoundOffSign"] + "'," + row["RoundOffAmt"] + "," + row["TotalQty"] + "," + row["GrossAmt"] + "," + row["FinalAmt"] + "," + row["NetAmt"] + ",'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["OrderNo"] + "','" + row["AttachedBill"] + "','" + row["PackedBillNo"] + "','" + row["Description_1"] + "','" + row["Description_2"] + "','" + row["Description_3"] + "'," + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + "," + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + ",'" + strDescription_4 + "','" + strMobileNo + "','" + strAdvanceSlipNo + "'," + dAdvanceAmt + ",'" + strReturnSlipNo + "'," + dReturnAmt + "," + dCardAmt + "," + dCashAmt + "," + dCreditAmt + ",'" + strSaleBillType + "','" + strMaterialLocation + "'," + dTenderAmt + "," + dRefundAmt + ",'" + strChequeSerialNo + "'," + dChequeAmt + ",'" + strOfferApplied + "','" + strGrossProfit + "'," + dOfferDisPer + "," + dOfferDisAmt + "," + dPartSaleAmt + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",'" + row["IRNNO"] + "','" + row["ACKNO"] + "','" + row["QRCode"] + "')  "
                                         + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values "
                                         + " ('" + row["Date"] + "' ,'" + row["SalePartyID"] + "' ,'SALES A/C','DEBIT', '" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Dr','" + row["FinalAmt"] + "',0,'False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0,'" + row["SalePartyID"] + "') end else begin "
                                         + " UPDATE [SalesBook] SET [Date]='" + row["Date"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[SalesType]='" + row["SalesType"] + "',[Station]='" + row["Station"] + "',[TransportName]='" + row["TransportName"] + "',[WaybillNo]='" + row["WaybillNo"] + "',[WayBillDate]='" + row["WayBillDate"] + "',[NoOfCase]='" + row["NoOfCase"] + "',[LRNumber]='" + row["LRNumber"] + "',[LRDate]='" + row["LRDate"] + "',[LRTime]='" + row["LRTime"] + "',[PvtMarka]='" + row["PvtMarka"] + "',[Remark]='" + row["Remark"] + "',[Description]='" + row["Description"] + "',[PackerName]='" + row["PackerName"] + "',[PackingDate]='" + row["PackingDate"] + "', "
                                         + " [CartonType]='" + row["CartonType"] + "',[CartonSize]='" + row["CartonSize"] + "',[DisPer]=" + row["DisPer"] + ",[DisAmt]=" + row["DisAmt"] + ",[TaxPer]=" + row["TaxPer"] + ",[TaxAmt]=" + dTaxAmt + ",[PackingAmt]=" + row["PackingAmt"] + ",[OtherSign]='" + row["OtherSign"] + "',[OtherAmt]=" + row["OtherAmt"] + ",[PostageAmt]=" + row["PostageAmt"] + ",[GreenTax]=" + row["GreenTax"] + ",[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + row["RoundOffAmt"] + ",[TotalQty]=" + row["TotalQty"] + ",[GrossAmt]=" + row["GrossAmt"] + ",[FinalAmt]=" + row["FinalAmt"] + ",[NetAmt]=" + row["NetAmt"] + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[OrderNo]='" + row["OrderNo"] + "',[AttachedBill]='" + row["AttachedBill"] + "',[PackedBillNo]='" + row["PackedBillNo"] + "',[Description_1]='" + row["Description_1"] + "',[Description_2]='" + row["Description_2"] + "',[Description_3]='" + row["Description_3"] + "',[SpecialDscPer]=" + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + ",[SpecialDscAmt]=" + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + ","
                                         + " [Description_4]='" + strDescription_4 + "',[MobileNo]='" + strMobileNo + "',[AdvanceSlipNo]='" + strAdvanceSlipNo + "',[AdvanceAmt]=" + dAdvanceAmt + ",[ReturnSlipNo]='" + strReturnSlipNo + "',[ReturnAmt]=" + dReturnAmt + ",[CardAmt]=" + dCardAmt + ",[CashAmt]=" + dCashAmt + ",[CreditAmt]=" + dCreditAmt + ",[SaleBillType]='" + strSaleBillType + "',[MaterialLocation]='" + strMaterialLocation + "',[TenderAmt]=" + dTenderAmt + ",[RefundAmt]=" + dRefundAmt + ",[ChequeSerialNo]='" + strChequeSerialNo + "',[ChequeAmt]=" + dChequeAmt + ",[OfferApplied]='" + strOfferApplied + "',[GrossProfit]='" + strGrossProfit + "',[OfferDisPer]=" + dOfferDisPer + ",[OfferDisAmt]=" + dOfferDisAmt + ",[PartSaleAmt]=" + dPartSaleAmt + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",[IRNNO]='" + row["IRNNO"] + "',[ACKNO]='" + row["ACKNO"] + "',[QRCode]='" + row["QRCode"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                                         + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]=" + row["NetAmt"] + ",[FinalAmount]='" + row["FinalAmt"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='SALES A/C'  "
                                         + " Delete from BalanceAmount Where [AccountStatus]='DUTIES & TAXES' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                                         + " Delete from [dbo].[GSTDetails] Where [BillType]='SALES' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " "
                                         + " Delete from StockMaster Where BillType='SALES' and BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                                         + " Update OB SET OB.AdjustedQty=(OB.AdjustedQty-SBS.Qty),Status=(Case When (CAST(OB.Quantity as Money)-(OB.AdjustedQty+ISNULL(OB.CancelQty,0)- SBS.Qty))>0 Then 'PENDING' else 'CLEAR' end) from  OrderBooking OB CROSS APPLY (Select SBS.BillCode,SBS.BillNo,SBS.Qty from SalesBookSecondary SBS Where SBS.SONumber!='' and (OB.OrderCode+' '+CAST(OB.OrderNo as varchar)+' '+OB.NumberCode)=SBS.SONumber)SBS Where SBS.[BillCode]='" + row["BillCode"] + "' and SBS.[BillNo]=" + row["BillNo"] + " "
                                         + " end ";

                        if (dCashAmt > 0)
                        {
                            strQuery += "  Select Top 1 @CashName=(AreaCode+AccountNo) from SupplierMaster Where Category='CASH SALE'; if not exists (Select PartyName from BalanceAmount Where [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "') begin "
                                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                            + " ('" + row["Date"] + "',@CashName,'CASH RECEIVED','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@CashName,'" + row["SalePartyID"] + "')  "
                                            + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                            + " ('" + row["Date"] + "','" + row["SalePartyID"] + "','CASH RECEIVED','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dCashAmt + "','DR','" + dCashAmt + "','0','false','',0,'" + MainPage.strLoginName + "','',0,0,0,'" + row["SalePartyID"] + "',@CashName) end else begin "
                                            + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]=@CashName,[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]=@CashName Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') and Status='DEBIT' "
                                            + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]=" + dCashAmt + ",[FinalAmount]='" + dCashAmt + "',[UpdatedBy]='" + MainPage.strLoginName + "',[AccountID]='" + row["SalePartyID"] + "'  Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') and Status='CREDIT' end "
                                            + " Delete from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatusID]='CREDIT SALE' ";
                        }
                        else if (!MainPage.strSoftwareType.Contains("AGENT"))
                        {
                            strQuery += " Delete from BalanceAmount Where [AccountStatus] in ('CASH RECEIVE','CASH RECEIVED') AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                                     + " Delete from BalanceAmount Where [AccountStatus]='SALES A/C' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatusID]='CREDIT SALE' ";
                        }
                    }

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SalesType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                }

                table = ds.Tables[50];
                string strSONumber = "";
                foreach (DataRow row in table.Rows)
                {

                    strQuery += " if not exists(Select BillCode from [SalesBookSecondary] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + ") begin "
                                     + "  INSERT INTO [dbo].[SalesBookSecondary] ([BillCode],[BillNo],[RemoteID],[ItemName],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[Qty],[MRP],[SDisPer],[Rate],[Amount],[Disc],[OCharges],[BasicAmt],[UnitName],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SONumber],[BarCode],[BrandName],[DesignName],[Other1],[Other2],[SalesMan],[SaleIncentive],[BarCode_S]) VALUES  "
                                     + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["SID"] + "','" + row["ItemName"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "','" + row["Qty"] + "'," + row["MRP"] + "," + row["SDisPer"] + ",'" + row["Rate"] + "','" + row["Amount"] + "'," + ConvertObjectToDoubleStatic(row["Disc"]) + "," + ConvertObjectToDoubleStatic(row["OCharges"]) + ",'" + row["BasicAmt"] + "','" + row["UnitName"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["SONumber"] + "','" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["SalesMan"] + "','" + row["SaleIncentive"] + "','" + row["BarCode_S"] + "') end else begin  "
                                     + " UPDATE [dbo].[SalesBookSecondary] Set [SONumber]='" + row["SONumber"] + "', [ItemName]='" + row["ItemName"] + "',[Variant1]='" + row["Variant1"] + "',[Variant2]='" + row["Variant2"] + "',[Variant3]='" + row["Variant3"] + "',[Variant4]='" + row["Variant4"] + "',[Variant5]='" + row["Variant5"] + "',[Qty]=" + row["Qty"] + ",[MRP]=" + row["MRP"] + ",[SDisPer]=" + row["SDisPer"] + ",[Rate]=" + row["Rate"] + ",[Amount]=" + row["Amount"] + ",[Disc]=" + ConvertObjectToDoubleStatic(row["Disc"]) + ",[OCharges]=" + ConvertObjectToDoubleStatic(row["OCharges"]) + ",[BasicAmt]='" + row["BasicAmt"] + "',[UnitName]='" + row["UnitName"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',UpdateStatus=1,[BarCode]='" + row["BarCode"] + "',[BrandName]='" + row["BrandName"] + "',[DesignName]='" + row["DesignName"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[SalesMan]='" + row["SalesMan"] + "',[SaleIncentive]='" + row["SaleIncentive"] + "',[BarCode_S]='" + row["BarCode_S"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + " end ";

                    strSONumber = Convert.ToString(row["SONumber"]);
                    if (strSONumber != "")
                        strQuery += " Update OrderBooking set Status=(Case When (CAST(Quantity as Money)-(AdjustedQty+ISNULL(CancelQty,0)+ " + row["Qty"] + "))>0 Then 'PENDING' else 'CLEAR' end),AdjustedQty=(AdjustedQty+" + row["Qty"] + "), UpdateStatus=1 where (OrderCode+' '+CAST(OrderNo as varchar)+' '+NumberCode)='" + strSONumber + "'  ";
                }

                table = ds.Tables[51];
                double dTCSPer = 0, dTaxFree = 0;
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmt"]);
                    dTCSPer = ConvertObjectToDoubleStatic(row["TCSPer"]);
                    dTCSAmt = ConvertObjectToDoubleStatic(row["TCSAmt"]);
                    dSpcsPer = ConvertObjectToDoubleStatic(row["SpecialDscPer"]);
                    dSpclAmt = ConvertObjectToDoubleStatic(row["SpecialDscAmt"]);
                    dTaxFree = ConvertObjectToDoubleStatic(row["TaxFree"]);
                    strQuery += " if not exists(Select BillCode from [PurchaseBook] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                             + " INSERT INTO [dbo].[PurchaseBook] ([BillCode],[BillNo],[Date],[InvoiceNo],[InvoiceDate],[PurchasePartyID],[PurchaseParty],[PurchaseType],[TransportName],[GodownName],[Remark],[Description],[Other],[PackingAmt],[OtherSign],[OtherAmt],[DiscPer],[DiscAmt],[TaxPer],[TaxAmt],[TotalQty],[GrossAmt],[NetAmt],[ROSign],[RoundOff],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SpecialDscPer],[SpecialDscAmt],[TaxFree],[LRNumber],[LRDate],[StockStatus],[Other1],[Other2],[Other3],[DueDate],[NoOfPacks],[PackWeight],[TransportMode],[ChallanNo],[SupplierRefNo],[Agent],[ReceivedBy],[CountedBy],[BarCodedBy],[TCSPer],[TCSAmt],[TaxableAmt]) VALUES "
                             + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["Date"] + "','" + row["InvoiceNo"] + "','" + row["InvoiceDate"] + "','" + row["PurchasePartyID"] + "','" + row["PurchaseParty"] + "','" + row["PurchaseType"] + "','" + row["TransportName"] + "','" + row["GodownName"] + "','" + row["Remark"] + "','" + row["Description"] + "','" + row["Other"] + "'," + row["PackingAmt"] + ",'" + row["OtherSign"] + "'," + row["OtherAmt"] + "," + row["DiscPer"] + "," + row["DiscAmt"] + "," + row["TaxPer"] + "," + dTaxAmt + "," + row["TotalQty"] + "," + row["GrossAmt"] + "," + row["NetAmt"] + ",'" + row["ROSign"] + "'," + row["RoundOff"] + ",'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "'," + dSpcsPer + "," + dSpclAmt + "," + dTaxFree + ",'" + row["LRNumber"] + "','" + row["LRDate"] + "','" + row["StockStatus"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["Other3"] + "','" + row["DueDate"] + "','" + row["NoOfPacks"] + "','" + row["PackWeight"] + "','" + row["TransportMode"] + "','" + row["ChallanNo"] + "','" + row["SupplierRefNo"] + "','" + row["Agent"] + "','" + row["ReceivedBy"] + "','" + row["CountedBy"] + "','" + row["BarCodedBy"] + "'," + dTCSPer + "," + dTCSAmt + "," + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ")  "
                             + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values "
                             + " ('" + row["Date"] + "' ,'" + row["PurchasePartyID"] + "' ,'PURCHASE A/C','CREDIT', '" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Dr','0',0,'False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0,'" + row["PurchasePartyID"] + "') end else begin "
                             + " Update [dbo].[PurchaseBook] Set  [Date]='" + row["Date"] + "',[InvoiceNo]='" + row["InvoiceNo"] + "',[InvoiceDate]='" + row["InvoiceDate"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "',[PurchaseParty]='" + row["PurchaseParty"] + "',[PurchaseType]='" + row["PurchaseType"] + "',[TransportName]='" + row["TransportName"] + "',[GodownName]='" + row["GodownName"] + "',[Remark]='" + row["Remark"] + "',[Description]='" + row["Description"] + "',[Other]='" + row["Other"] + "',[PackingAmt]=" + row["PackingAmt"] + ",[OtherSign]='" + row["OtherSign"] + "',[OtherAmt]=" + row["OtherAmt"] + ",[DiscPer]=" + row["DiscPer"] + ",[DiscAmt]=" + row["DiscAmt"] + ",[TaxPer]=" + row["TaxPer"] + ",[TaxAmt]=" + dTaxAmt + ",[TotalQty]=" + row["TotalQty"] + ",[GrossAmt]=" + row["GrossAmt"] + ",[NetAmt]=" + row["NetAmt"] + ",[ROSign]='" + row["ROSign"] + "',[RoundOff]=" + row["RoundOff"] + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=1,[SpecialDscPer]=" + dSpcsPer + ",[SpecialDscAmt]=" + dSpclAmt + ",[TaxFree]=" + dTaxFree + ",[LRNumber]='" + row["LRNumber"] + "',[LRDate]='" + row["LRDate"] + "',[StockStatus]='" + row["StockStatus"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[Other3]='" + row["Other3"] + "',[DueDate]='" + row["DueDate"] + "',[NoOfPacks]='" + row["NoOfPacks"] + "',[PackWeight]='" + row["PackWeight"] + "',[TransportMode]='" + row["TransportMode"] + "',[ChallanNo]='" + row["ChallanNo"] + "',[SupplierRefNo]='" + row["SupplierRefNo"] + "',[Agent]='" + row["Agent"] + "',[ReceivedBy]='" + row["ReceivedBy"] + "',[CountedBy]='" + row["CountedBy"] + "',[BarCodedBy]='" + row["BarCodedBy"] + "',[TCSPer]=" + dTCSPer + ",[TCSAmt]=" + dTCSAmt + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + " Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"]
                             + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["PurchasePartyID"] + "',[Amount]=" + row["NetAmt"] + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["PurchasePartyID"] + "' Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and [AccountStatus]='PURCHASE A/C'  "
                             + " Delete from BalanceAmount Where [AccountStatus]='DUTIES & TAXES' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                             + " Delete from [dbo].[GSTDetails] Where [BillType]='PURCHASE' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " "
                             + " Delete from StockMaster Where BillType='PURCHASE' and BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                             + " end ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["PurchaseType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }

                    if (dTCSAmt > 0)
                    {
                        strQuery += " Select @TCSAccount=(AreaCode+AccountNo) from SupplierMaster Where GroupName='SHORT-TERM LOANS AND ADVANCES' and Category='TCS RECEIVABLES' "
                                 + " INSERT INTO[dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                                 + " ('" + row["Date"] + "',@TCSAccount,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "'," + dTCSAmt + ",'DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@TCSAccount) ";
                    }

                    //strQuery += " end ";
                }

                table = ds.Tables[52];
                foreach (DataRow row in table.Rows)
                {

                    strQuery += " if not exists(Select BillCode from [PurchaseBookSecondary] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + ") begin "
                                     + " INSERT INTO [dbo].[PurchaseBookSecondary] ([BillCode],[BillNo],[ItemName],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[Qty],[MRP],[SDisPer],[Rate],[Amount],[Discount],[OCharges],[BasicAmt],[UnitName],[RemoteID],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[PONumber],[BarCode],[BrandName],[DesignName],[Other1],[Other2],[SaleMargin],[SaleMRP],[WSDis],[WSMRP],[SaleDis],[SaleRate],[MarginType],[CompanyMarginType],[CompanyMargin],[CompanyMRP],[TaxAmt]) VALUES "
                                     + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["ItemName"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + row["Qty"] + "," + row["MRP"] + "," + row["SDisPer"] + "," + row["Rate"] + "," + row["Amount"] + ",'" + row["Discount"] + "','" + row["OCharges"] + "'," + row["BasicAmt"] + ",'" + row["UnitName"] + "','" + row["ID"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["PONumber"] + "','" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "'," + ConvertObjectToDoubleStatic(row["SaleMargin"]) + "," + ConvertObjectToDoubleStatic(row["SaleMRP"]) + "," + ConvertObjectToDoubleStatic(row["WSDis"]) + "," + ConvertObjectToDoubleStatic(row["WSMRP"]) + "," + ConvertObjectToDoubleStatic(row["SaleDis"]) + "," + ConvertObjectToDoubleStatic(row["SaleRate"]) + ",'" + row["MarginType"] + "','" + row["CompanyMarginType"] + "'," + ConvertObjectToDoubleStatic(row["CompanyMargin"]) + "," + ConvertObjectToDoubleStatic(row["CompanyMRP"]) + "," + ConvertObjectToDoubleStatic(row["TaxAmt"]) + ") end else begin  "
                                     + " UPDATE [dbo].[PurchaseBookSecondary] Set  [ItemName]='" + row["ItemName"] + "',[Variant1]='" + row["Variant1"] + "',[Variant2]='" + row["Variant2"] + "',[Variant3]='" + row["Variant3"] + "',[Variant4]='" + row["Variant4"] + "',[Variant5]='" + row["Variant5"] + "',[Qty]=" + row["Qty"] + ",[MRP]=" + row["MRP"] + ",[SDisPer]=" + row["SDisPer"] + ",[Rate]=" + row["Rate"] + ",[Amount]=" + row["Amount"] + ",[Discount]=" + row["Discount"] + ",[OCharges]='" + row["OCharges"] + "',[BasicAmt]='" + row["BasicAmt"] + "',[UnitName]='" + row["UnitName"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',UpdateStatus=1,[PONumber]='" + row["PONumber"] + "',[BarCode]='" + row["BarCode"] + "',[BrandName]='" + row["BrandName"] + "',[DesignName]='" + row["DesignName"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[SaleMargin]=" + ConvertObjectToDoubleStatic(row["SaleMargin"]) + ",[SaleMRP]=" + ConvertObjectToDoubleStatic(row["SaleMRP"]) + ",[WSDis]=" + ConvertObjectToDoubleStatic(row["WSDis"]) + ",[WSMRP]=" + ConvertObjectToDoubleStatic(row["WSMRP"]) + ",[SaleDis]=" + ConvertObjectToDoubleStatic(row["SaleDis"]) + ",[SaleRate]=" + ConvertObjectToDoubleStatic(row["SaleRate"]) + ",[MarginType]='" + row["MarginType"] + "',[CompanyMarginType]='" + row["CompanyMarginType"] + "',[CompanyMargin]=" + ConvertObjectToDoubleStatic(row["CompanyMargin"]) + ",[CompanyMRP]=" + ConvertObjectToDoubleStatic(row["CompanyMRP"]) + ",[TaxAmt]=" + ConvertObjectToDoubleStatic(row["TaxAmt"]) + " Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + " end ";
                }               

                table = ds.Tables[53];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists (Select BillCode from [ItemSecondary] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + ") begin "
                             + " INSERT INTO [dbo].[ItemSecondary] ([RemoteID],[BillCode],[BillNo],[PurchasePartyID],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[PurchaseRate],[Margin],[SaleRate],[Reorder],[OpeningQty],[OpeningRate],[ActiveStatus],[GodownName],[Description],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SaleMRP],[DesignName],[Brand]) Values "
                             + " ('" + row["ID"] + "','" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["PurchasePartyID"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + row["PurchaseRate"] + "," + row["Margin"] + "," + row["SaleRate"] + ",'" + row["Reorder"] + "','" + row["OpeningQty"] + "','" + row["OpeningRate"] + "','" + row["ActiveStatus"] + "','" + row["GodownName"] + "','" + row["Description"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "'," + ConvertObjectToDouble(row["SaleMRP"],0) + ",'" + row["DesignName"] + "','" + row["Brand"] + "') end ";
                }

                table = ds.Tables[54];
                if (table.Rows.Count > 0)
                {
                    string strStockQuery = "";
                    foreach (DataRow row in table.Rows)
                    {
                        //strQuery += " INSERT INTO [dbo].[StockMaster] ([BillType],[BillCode],[BillNo],[ItemName],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[Qty],[Rate],[GodownName],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[MRP],[Date],[BarCode],[BrandName],[DesignName],[Other1],[Other2]) VALUES "
                        //         + " ('" + row["BillType"] + "','" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["ItemName"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + row["Qty"] + "," + row["Rate"] + ",'" + row["GodownName"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "'," + ConvertObjectToDoubleStatic(row["MRP"]) + ",'" + row["Date"] + "','" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "') ";

                        if (strStockQuery != "")
                            strStockQuery += " UNION ALL ";
                        strStockQuery += " SELECT '" + row["BillType"] + "','" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["ItemName"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + row["Qty"] + "," + row["Rate"] + ",'" + row["GodownName"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "'," + ConvertObjectToDoubleStatic(row["MRP"]) + ",'" + row["Date"] + "','" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "' ";
                    }

                    if (strStockQuery != "")
                    {
                        strQuery += " INSERT INTO [dbo].[StockMaster] ([BillType],[BillCode],[BillNo],[ItemName],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[Qty],[Rate],[GodownName],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[MRP],[Date],[BarCode],[BrandName],[DesignName],[Other1],[Other2]) "
                                 + strStockQuery;
                    }
                }

                table = ds.Tables[55];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select SchemeName from [dbo].[SchemeMaster] Where SchemeName='" + row["SchemeName"] + "') begin "
                                 + " INSERT INTO [dbo].[SchemeMaster] ([BranchCode],[SchemeName],[StartDate],[EndDate],[Remark],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[ActiveStatus]) VALUES "
                                 + " ('" + row["BranchCode"] + "','" + row["SchemeName"] + "','" + row["StartDate"] + "','" + row["EndDate"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["ActiveStatus"] + "') end ";
                    }
                }
                table = ds.Tables[56];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select OfferName from [dbo].[GraceDaysMaster] Where OfferName='" + row["OfferName"] + "') begin "
                                 + " INSERT INTO [dbo].[GraceDaysMaster] ([BranchCode],[OfferName],[BuyerDays],[SupplierDays],[StartDate],[EndDate],[Remark],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[ActiveStatus]) VALUES "
                                 + " ('" + row["BranchCode"] + "','" + row["OfferName"] + "','" + row["BuyerDays"] + "','" + row["SupplierDays"] + "','" + row["StartDate"] + "','" + row["EndDate"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["ActiveStatus"] + "') end ";
                    }
                }

                //Supplier Other Details
                table = ds.Tables[57];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists(Select [AreaCode] from [dbo].[SupplierOtherDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin INSERT INTO [dbo].[SupplierOtherDetails] ([AreaCode],[AccountNo],[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],[Other],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[DOB],[DOA],[SpouseName],[Description],[ProfilePic1],[ProfilePic2],[ProfilePic3]) VALUES "
                                 + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["WaybillUserName"] + "','" + row["WaybillPassword"] + "','" + row["CompanyRegNo"] + "','" + row["NameOfFirm"] + "','" + row["OtherDetails"] + "','" + row["NB_Manufacturing"] + "','" + row["NB_SoleSellingAgent"] + "','" + row["NB_Dealer"] + "','" + row["NB_Agent"] + "','" + row["NB_Assembler"] + "','" + row["NB_Trader"] + "','" + row["NC_Proprietary"] + "','" + row["NC_Partnership"] + "','" + row["NC_Private"] + "','" + row["NC_Public"] + "','" + row["Other"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0,'" + row["DOB"] + "','" + row["DOA"] + "','" + row["SpouseName"] + "','" + row["Description"] + "','" + row["ProfilePic1"] + "','" + row["ProfilePic2"] + "','" + row["ProfilePic3"] + "') end "
                                 + " begin UPDATE [dbo].[SupplierOtherDetails] Set [WaybillUserName]='" + row["WaybillUserName"] + "',[WaybillPassword]='" + row["WaybillPassword"] + "',[CompanyRegNo]='" + row["CompanyRegNo"] + "',[NameOfFirm]='" + row["NameOfFirm"] + "',[OtherDetails]='" + row["OtherDetails"] + "',[NB_Manufacturing]='" + row["NB_Manufacturing"] + "',[NB_SoleSellingAgent]='" + row["NB_SoleSellingAgent"] + "',[NB_Dealer]='" + row["NB_Dealer"] + "',[NB_Agent]='" + row["NB_Agent"] + "',[NB_Assembler]='" + row["NB_Assembler"] + "',[NB_Trader]='" + row["NB_Trader"] + "',[NC_Proprietary]='" + row["NC_Proprietary"] + "',[NC_Partnership]='" + row["NC_Partnership"] + "',[NC_Private]='" + row["NC_Private"] + "',[NC_Public]='" + row["NC_Public"] + "',[Other]='" + row["Other"] + "',[ProfilePic1]='" + row["ProfilePic1"] + "',[ProfilePic2]='" + row["ProfilePic2"] + "',[ProfilePic3]='" + row["ProfilePic3"] + "',[UpdateStatus]=1 Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' end ";
                    }
                }

                table = ds.Tables[58];
                if (table != null)
                {

                    DataTable _dt = table.DefaultView.ToTable(true, "AreaCode", "AccountNo", "BankAccountNo");
                    foreach (DataRow row in _dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [BankAccountNo]='" + row["BankAccountNo"] + "') begin"
                                 + " Delete from [dbo].[SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [BankAccountNo]='" + row["BankAccountNo"] + "' end ";
                    }


                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [BankAccountNo]='" + row["BankAccountNo"] + "') begin "
                                 + " INSERT INTO [dbo].[SupplierBankDetails] ([AreaCode],[AccountNo],[BankName],[BranchName],[BankAccountNo],[BankIFSCCode],[BankAccountName],[VerifiedStatus],[VerifiedDate],[CreatedBy],[BeniID],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BankName"] + "','" + row["BranchName"] + "','" + row["BankAccountNo"] + "','" + row["BankIFSCCode"] + "','" + row["BankAccountName"] + "','" + row["VerifiedStatus"] + "','" + row["VerifiedDate"] + "','" + row["CreatedBy"] + "','" + row["BeniID"] + "',0,0) end ";
                    }
                }

                table = ds.Tables[59];
                if (table != null)
                {

                    DataTable _dt = table.DefaultView.ToTable(true, "AreaCode", "AccountNo", "Range", "BrandName", "ProductType");
                    foreach (DataRow row in _dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [Range]='" + row["Range"] + "' and [BrandName]='" + row["BrandName"] + "' and [ProductType]='" + row["ProductType"] + "') begin"
                                 + " Delete from [dbo].[SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [Range]='" + row["Range"] + "' and [BrandName]='" + row["BrandName"] + "' and [ProductType]='" + row["ProductType"] + "' end ";
                    }


                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [Range]='" + row["Range"] + "' and [BrandName]='" + row["BrandName"] + "' and [ProductType]='" + row["ProductType"] + "') begin "
                                 + " INSERT INTO [dbo].[SupplierBrandDetails] ([AreaCode],[AccountNo],[BrandName],[ProductType],[Range],[HSNCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BrandName"] + "','" + row["ProductType"] + "','" + row["Range"] + "','" + row["HSNCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                    }
                }

                table = ds.Tables[60];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        if (Convert.ToString(row["RemoteID"]) == "0")
                        {
                            strQuery += " if not exists (Select SchemeName from [dbo].[Scheme_CustomerDetails] Where CustomerName='" + row["CustomerName"] + "' and  SchemeName='" + row["SchemeName"] + "') begin   "
                                 + " INSERT INTO [dbo].[Scheme_CustomerDetails] ([RemoteID],[SchemeName],[SalesPartyID],[CustomerName],[TargetValue],[Remark],[Other],[Date],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " (" + row["ID"] + ",'" + row["SchemeName"] + "','" + row["SalesPartyID"] + "','" + row["CustomerName"] + "'," + ConvertObjectToDoubleStatic(row["TargetValue"]) + ",'" + row["Remark"] + "','" + row["Other"] + "','" + row["Date"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end begin if not exists (Select SchemeName from [dbo].[Scheme_CustomerDetails] Where CustomerName='" + row["CustomerName"] + "' and  SchemeName='" + row["SchemeName"] + "' and [RemoteID]=" + row["ID"] + ") begin "
                                 + " Update [dbo].[Scheme_CustomerDetails] Set [SchemeName]='" + row["SchemeName"] + "',[CustomerName]='" + row["CustomerName"] + "',[TargetValue]=" + ConvertObjectToDoubleStatic(row["TargetValue"]) + ",[UpdatedBy]='" + row["UpdatedBy"] + "' Where [RemoteID]=" + row["ID"] + " end end ";
                        }
                    }
                }

                table = ds.Tables[61];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        if (Convert.ToString(row["RemoteID"]) == "0")
                        {
                            strQuery += " if not exists (Select SchemeName from [dbo].[Scheme_SupplierDetails] Where SupplierName='" + row["SupplierName"] + "' and  SchemeName='" + row["SchemeName"] + "') begin   "
                                     + " INSERT INTO [dbo].[Scheme_SupplierDetails] ([RemoteID],[SchemeName],[PurchasePartyID],[SupplierName],[Discount],[BillValue],[Remark],[Other],[Date],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                     + " (" + row["ID"] + ",'" + row["SchemeName"] + "','" + row["PurchasePartyID"] + "','" + row["SupplierName"] + "'," + ConvertObjectToDoubleStatic(row["Discount"]) + "," + ConvertObjectToDoubleStatic(row["BillValue"]) + ",'" + row["Remark"] + "','" + row["Other"] + "','" + row["Date"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end begin if not exists (Select SchemeName from [dbo].[Scheme_SupplierDetails] Where SupplierName='" + row["SupplierName"] + "' and  SchemeName='" + row["SchemeName"] + "' and [RemoteID]=" + row["ID"] + " ) begin  "
                                     + " Update [dbo].[Scheme_SupplierDetails] Set [SchemeName]='" + row["SchemeName"] + "',[SupplierName]='" + row["SupplierName"] + "',[Discount]=" + ConvertObjectToDoubleStatic(row["Discount"]) + ",[BillValue]=" + ConvertObjectToDoubleStatic(row["BillValue"]) + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=1 Where [RemoteID]=" + row["ID"] + " and [Other]='" + row["Other"] + "'  end else begin Update [dbo].[Scheme_SupplierDetails] Set [Discount]=" + ConvertObjectToDoubleStatic(row["Discount"]) + ",[BillValue]=" + ConvertObjectToDoubleStatic(row["BillValue"]) + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=1 Where [RemoteID]=" + row["ID"] + " and [Other]='" + row["Other"] + "'  end end ";
                        }
                    }
                }

                table = ds.Tables[62];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select BillNo from [dbo].[ChequeDetails] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + ") begin   "
                                 + " INSERT INTO [dbo].[ChequeDetails] ([BillCode],[BillNo],[Date],[DebitAccountID],[CreditAccountID],[ChequeType],[DepositeDate],[Description],[Amount],[Status],[ActiveDate],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[RemoteID],[BankName],[BranchName],[FirmName],[ChequeNo]) VALUES "
                                 + " ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["Date"] + "','" + row["DebitAccountID"] + "','" + row["CreditAccountID"] + "','" + row["ChequeType"] + "','" + row["DepositeDate"] + "','" + row["Description"] + "'," + ConvertObjectToDoubleStatic(row["Amount"]) + ",'" + row["Status"] + "','" + row["ActiveDate"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0," + row["ID"] + ",'" + row["BankName"] + "','" + row["BranchName"] + "','" + row["FirmName"] + "','" + row["ChequeNo"] + "') end else begin  "
                                 + " Update [dbo].[ChequeDetails] Set [Date]='" + row["Date"] + "',[DebitAccountID]='" + row["DebitAccountID"] + "',[CreditAccountID]='" + row["CreditAccountID"] + "',[ChequeType]='" + row["ChequeType"] + "',[DepositeDate]='" + row["DepositeDate"] + "',[Description]='" + row["Description"] + "',[Amount]=" + ConvertObjectToDoubleStatic(row["Amount"]) + ",[Status]='" + row["Status"] + "',[ActiveDate]='" + row["ActiveDate"] + "',[CreatedBy]='" + row["CreatedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[BankName]='" + row["BankName"] + "',[BranchName]='" + row["BranchName"] + "',[FirmName]='" + row["FirmName"] + "',[ChequeNo]='" + row["ChequeNo"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + " end ";
                    }
                }
                table = ds.Tables[63];
                if (table != null)
                {
                    string strInvoiceType = "", strAccountStatus = "", strPStatus = "", strTStatus = "";

                    foreach (DataRow row in table.Rows)
                    {
                        strInvoiceType = Convert.ToString(row["InvoiceType"]);
                        dTCSAmt = ConvertObjectToDoubleStatic(row["TCSAmt"]);
                        strAccountStatus = "TCS DEBIT NOTE";
                        strPStatus = "DEBIT";
                        strTStatus = "CREDIT";
                        if (strInvoiceType == "CREDITNOTE")
                        {
                            strAccountStatus = "TCS CREDIT NOTE";
                            strPStatus = "CREDIT";
                            strTStatus = "DEBIT";
                        }

                        strQuery += " if not exists (Select BillNo from [dbo].[TCSDetails] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin   "
                                 + " INSERT INTO [dbo].[TCSDetails]([BillCode],[BillNo],[Date],[AccountID],[TCSAccountID],[VoucherCode],[VoucherNo],[Amount],[TCSPer],[TCSAmt],[Remark],[InvoiceType],[Status],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["Date"] + "','" + row["AccountID"] + "','" + row["TCSAccountID"] + "','" + row["VoucherCode"] + "'," + row["VoucherNo"] + "," + ConvertObjectToDoubleStatic(row["Amount"]) + "," + ConvertObjectToDoubleStatic(row["TCSPer"]) + "," + dTCSAmt + ",'" + row["Remark"] + "','" + strInvoiceType + "','','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0) "
                                 + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                                 + " ('" + row["Date"] + "','" + row["AccountID"] + "','" + strAccountStatus + "','" + strPStatus + "','" + row["BillCode"] + " " + row["BillNo"] + "'," + dTCSAmt + ",'CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["AccountID"] + "') "
                                 + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                                 + " ('" + row["Date"] + "','" + row["TCSAccountID"] + "','" + strAccountStatus + "','" + strTStatus + "','" + row["BillCode"] + " " + row["BillNo"] + "'," + dTCSAmt + ",'DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["TCSAccountID"] + "')  end ";
                    }
                }
                table = ds.Tables[64];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select BillNo from [dbo].[BankGuarantee] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " ) begin   "
                                 + " INSERT INTO [dbo].[BankGuarantee] ([BillCode],[BillNo],[Date],[CustomerName],[BankGuaranteeNo],[Amount],[BankName],[ValidUpto],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["Date"] + "','" + row["CustomerName"] + "','" + row["BankGuaranteeNo"] + "'," + ConvertObjectToDoubleStatic(row["Amount"]) + ",'" + row["BankName"] + "','" + row["ValidUpto"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0) end else begin "
                                 + " Update [dbo].[BankGuarantee] Set [Date]='" + row["Date"] + "',[CustomerName]='" + row["CustomerName"] + "',[BankGuaranteeNo]='" + row["BankGuaranteeNo"] + "',[BankName]='" + row["BankName"] + "',[ValidUpto]='" + row["ValidUpto"] + "',[Amount]=" + ConvertObjectToDoubleStatic(row["Amount"]) + ",[UpdatedBy]='" + row["UpdatedBy"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " end ";
                    }
                }

                table = ds.Tables[65];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists(Select Billcode from StockTransfer Where BillCode = '" + row["BillCode"] + "' and BillNo='" + row["BillNo"] + "') Begin "
                                 + " INSERT INTO [dbo].[STOCKTRANSFER] ([BillCode],[BillNo],[Date],[FromMCentre],[ToMCentre],[Remark],[StockType],[SourceBillNo],[SourceDate],[TotalQty],[TotalAmt],[WaybillNo],[WayBillDate],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Transport],[LRNumber],[LRDate],[Station]) VALUES "
                                 + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["Date"] + "','" + row["FromMCentre"] + "','" + row["ToMCentre"] + "','" + row["Remark"] + "','" + row["StockType"] + "','" + row["SourceBillNo"] + "','" + row["SourceDate"] + "'," + ConvertObjectToDoubleStatic(row["TotalQty"]) + "," + ConvertObjectToDoubleStatic(row["TotalAmt"]) + ",'" + row["WaybillNo"] + "','" + row["WayBillDate"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0,'" + row["Transport"] + "','" + row["LRNumber"] + "','" + row["LRDate"] + "','" + row["Station"] + "') end";
                    }
                }
                table = ds.Tables[66];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " UPDATE [dbo].[STOCKTRANSFER] SET [Date]='" + row["Date"] + "',[FromMCentre]='" + row["FromMCentre"] + "',[ToMCentre]='" + row["ToMCentre"] + "',[Remark]='" + row["Remark"] + "',[StockType]='" + row["StockType"] + "',[SourceBillNo]='" + row["SourceBillNo"] + "',[SourceDate]='" + row["SourceDate"] + "',[TotalQty]=" + ConvertObjectToDoubleStatic(row["TotalQty"]) + ",[TotalAmt]=" + ConvertObjectToDoubleStatic(row["TotalAmt"]) + ",[WaybillNo]='" + row["WaybillNo"] + "',[WayBillDate]='" + row["WayBillDate"] + "',[CreatedBy]='" + row["CreatedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[Transport]='" + row["Transport"] + "',[LRNumber]='" + row["LRNumber"] + "',[LRDate]='" + row["LRDate"] + "',[Station]='" + row["Station"] + "' Where BillCode = '" + row["BillCode"] + "' and BillNo='" + row["BillNo"] + "' ";
                               
                    }
                }
                table = ds.Tables[67];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " if not exists (Select BillNo from [dbo].[StockTransferSecondary] Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID="+row["ID"] +" ) begin   "
                                 + "INSERT INTO [dbo].[StockTransferSecondary]([RemoteID],[BillCode],[BillNo],[ItemName],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[Qty],[Unit],[MRP],[Rate],[Amount],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[BarCode],[BrandName],[DesignName],[SDisPer],[MarginType],[SaleMargin],[CompanyMarginType],[CompanyMargin],[CompanyMRP],[SaleMRP],[SaleDis],[SaleRate],[BarCode_S]) VALUES "
                                 + " ('" + row["ID"] + "','" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["ItemName"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + row["Qty"] + ",'" + row["Unit"] + "'," + row["MRP"] + "," + row["Rate"] + "," + row["Amount"] + ",'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0,'" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "'," + row["SDisPer"] + ",'" + row["MarginType"] + "'," + row["SaleMargin"] + ",'" + row["CompanyMarginType"] + "','" + row["CompanyMargin"] + "','" + row["CompanyMRP"] + "','" + row["SaleMRP"] + "','" + row["SaleDis"] + "','" + row["SaleRate"] + "','" + row["BarCode_S"] + "') end ";
                    }
                }
                table = ds.Tables[68];
                if (table != null)
                {
                    foreach (DataRow row in table.Rows)
                    {
                        strQuery += " UPDATE [dbo].[StockTransferSecondary] SET [ItemName]='" + row["ItemName"] + "',[Variant1]='" + row["Variant1"] + "',[Variant2]='" + row["Variant2"] + "',[Variant3]='" + row["Variant3"] + "',[Variant4]='" + row["Variant4"] + "',[Variant5]='" + row["Variant5"] + "',[Qty]=" + row["Qty"] + ",[Unit]='" + row["Unit"] + "',[MRP]='" + row["MRP"] + "',[Rate]='" + row["Rate"] + "',[Amount]='" + row["Amount"] + "',[CreatedBy]='" + row["CreatedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=1,[BarCode]='" + row["BarCode"] + "',[BrandName]='" + row["BrandName"] + "',[DesignName]='" + row["DesignName"] + "',[SDisPer]='" + row["SDisPer"] + "',[MarginType]='" + row["MarginType"] + "',[SaleMargin]='" + row["SaleMargin"] + "',[CompanyMarginType]='" + row["CompanyMarginType"] + "',[CompanyMargin]='" + row["CompanyMargin"] + "',[CompanyMRP]='" + row["CompanyMRP"] + "',[SaleMRP]='" + row["SaleMRP"] + "',[SaleDis]='" + row["SaleDis"] + "',[SaleRate]='" + row["SaleRate"] + "',[BarCode_S]='" + row["BarCode_S"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + " ";
                    }
                }

                dtGoodsReceiveDetails = ds.Tables[34];
                dtGSTDetails = ds.Tables[37];
            }

            #endregion

            #region Update Record

            strSelectQuery = " Select * from BalanceAmount Where InsertStatus=0 and UpdateStatus=1 and VoucherCode!='' Select * from BalanceAmount Where InsertStatus=0 and UpdateStatus=1 and JournalID!='0' and JournalID!='' Select * from CFormReceipt Where InsertStatus=0 and UpdateStatus=1 Select * from ForwardingEntry Where InsertStatus=0 and UpdateStatus=1 Select * from CostCentreAccount Where InsertStatus=0 and UpdateStatus=1 Select * from ForwardingRecord Where InsertStatus=0 and UpdateStatus=1 Select * from GoodsReceive Where InsertStatus=0 and UpdateStatus=1 "
                           + " Select * from GoodsReturned Where InsertStatus=0 and UpdateStatus=1 Select * from JournalAccount Where InsertStatus=0 and UpdateStatus=1  Select * from OrderBooking Where UpdateStatus=1 Select * from OnAccountSalesRecord Where InsertStatus=0 and UpdateStatus=1 Select * from PurchaseRecord Where InsertStatus=0 and UpdateStatus=1 Select * from SalesEntry  Where InsertStatus=0 and UpdateStatus=1 Select * from SalesRecord Where InsertStatus=0 and UpdateStatus=1 Select * from SMSReport Where InsertStatus=0 and UpdateStatus=1  Select * from SaleReturn Where InsertStatus=0 and UpdateStatus=1 Select * from SaleReturnDetails Where InsertStatus=0 and UpdateStatus=1 Select * from PurchaseReturn Where InsertStatus=0 and UpdateStatus=1 Select * from PurchaseReturnDetails Where InsertStatus=0 and UpdateStatus=1  Select * from CompanyDetails Where InsertStatus=0 and UpdateStatus=1 Select * from SaleServiceBook Where InsertStatus=0 and UpdateStatus=1 Select * from SaleServiceDetails Where InsertStatus=0 and UpdateStatus=1 Select * from TCSDetails Where InsertStatus=0 and UpdateStatus=1 Order by BillNo Select * from [dbo].[BankGuarantee] Where InsertStatus=0 and UpdateStatus=1  ";

            ds = new DataSet();

            adap = new SqlDataAdapter(strSelectQuery, MainPage.con);
            adap.Fill(ds);
            if (ds.Tables.Count > 0)
            {
                table = ds.Tables[0];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update BalanceAmount Set Date='" + row["Date"] + "',PartyName='" + row["PartyName"] + "',AccountStatus='" + row["AccountStatus"] + "',Status='" + row["Status"] + "',Description='" + row["Description"] + "',Amount='" + row["Amount"] + "',AmountStatus='" + row["AmountStatus"] + "',FinalAmount='" + row["FinalAmount"] + "',JournalID='" + row["JournalID"] + "',UpdatedBy='" + row["UpdatedBy"] + "',AccountID='" + row["AccountID"] + "',AccountStatusID='" + row["AccountStatusID"] + "',[GSTNature]='" + row["GSTNature"] + "',[CostCentreAccountID]='" + row["CostCentreAccountID"] + "' where VoucherCode='" + row["VoucherCode"] + "' and VoucherNo='" + row["VoucherNo"] + "' and RemoteCode=" + row["BalanceID"] + "  and RemoteCode!=0 ";
                }

                table = ds.Tables[1];

                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update BalanceAmount Set Date='" + row["Date"] + "',PartyName='" + row["PartyName"] + "',AccountStatus='" + row["AccountStatus"] + "',Status='" + row["Status"] + "', Description='" + row["Description"] + "',Amount='" + row["Amount"] + "',AmountStatus='" + row["AmountStatus"] + "',FinalAmount='" + row["FinalAmount"] + "',UpdatedBy='" + row["UpdatedBy"] + "',AccountID='" + row["AccountID"] + "',AccountStatusID='" + row["AccountStatusID"] + "',[CostCentreAccountID]='" + row["CostCentreAccountID"] + "' where JournalID='" + row["JournalID"] + "' and RemoteCode=" + row["BalanceID"] + "  and RemoteCode!=0 ";
                }

                table = ds.Tables[2];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update CFormReceipt Set [Date]='" + row["Date"] + "',[FormType]='" + row["FormType"] + "',[FormNo]='" + row["FormNo"] + "',[SalesParty]='" + row["SalesParty"] + "',[SubParty]='" + row["SubParty"] + "',[OnAccountName]='" + row["OnAccountName"] + "',[SaleBillID]='" + row["SaleBillID"] + "',[BillDate]='" + row["BillDate"] + "',[PBillNo]='" + row["PBillNo"] + "',[PurchaseParty]='" + row["PurchaseParty"] + "',[Amount]='" + row["Amount"] + "',[Status]='" + row["Status"] + "',[CreatedBy]='" + row["CreatedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "' Where  [ReceiptCode] ='" + row["ReceiptCode"] + "' and [ReceiptNo]='" + row["ReceiptNo"] + "' ";
                }

                table = ds.Tables[3];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update ForwardingEntry Set Rate='" + row["Rate"] + "',Pieces='" + row["Pieces"] + "',Amount='" + row["Amount"] + "' Where FCode='" + row["FCode"] + "' and FNumber='" + row["FNumber"] + "' and Item='" + row["Item"] + "' ";
                }

                table = ds.Tables[4];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update CostCentreAccount Set AccountName='" + row["AccountName"] + "',CostType='" + row["CostType"] + "',Description='" + row["Description"] + "',Amount='" + row["Amount"] + "',Status='" + row["Status"] + "',Date='" + row["Date"] + "' Where VoucherCode='" + row["VoucherCode"] + "' and BalanceID=" + row["BalanceID"] + "' and RemoteCode='" + row["RemoteCode"] + "' ";
                }

                table = ds.Tables[5];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update ForwardingRecord Set SaleBillNo='" + row["SaleBillNo"] + "',Buyer='" + row["Buyer"] + "',MS='" + row["MS"] + "',TINNumber='" + row["TINNumber"] + "',Transport='" + row["Transport"] + "',Station='" + row["Station"] + "',VATPer='" + row["VATPer"] + "',AddedPcs='" + row["AddedPcs"] + "',PendingPcs='" + row["PendingPcs"] + "',SaleAmt='" + row["SaleAmt"] + "',SaleAmountAfterVAT='" + row["SaleAmountAfterVAT"] + "',PvtMarka='" + row["PvtMarka"] + "',Date='" + row["Date"] + "',NetPercentage='" + row["NetPercentage"] + "',UpdatedBy='" + row["UpdatedBy"] + "' Where FCode='" + row["FCode"] + "' and FNumber='" + row["FNumber"] + "' ";
                }

                // Delete from GoodsReceiveDetails Where [ReceiptCode]='" + row["ReceiptCode"] + "'  and [ReceiptNo] =" + row["ReceiptNo"] +"

                table = ds.Tables[6];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update GoodsReceive Set [OrderNo]='" + row["OrderNo"] + "',[OrderDate]='" + row["OrderDate"] + "',[SalesParty]='" + row["SalesParty"] + "',[SubSalesParty]='" + row["SubSalesParty"] + "',[PurchaseParty]='" + row["PurchaseParty"] + "', [ReceivingDate]='" + row["ReceivingDate"] + "',[Pieces]='" + row["Pieces"] + "',[Quantity]='" + row["Quantity"] + "',[Amount]=" + row["Amount"] + ",[Freight]='" + row["Freight"] + "',[Tax]='" + row["Tax"] + "',[Item]='" + row["Item"] + "',[Packing]='" + row["Packing"] + "',[Personal]='" + row["Personal"] + "',[SaleBill]='" + row["SaleBill"] + "' ,"
                             + " [PackingStatus]='" + row["PackingStatus"] + "',[CreatedBy]='" + row["CreatedBy"] + "' ,[PrintedBy]='" + row["PrintedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[Box]='" + row["Box"] + "',[Remark]='" + row["Remark"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "',[InvoiceNo]='" + row["InvoiceNo"] + "',[InvoiceDate]='" + row["InvoiceDate"] + "',[PurchaseType]='" + row["PurchaseType"] + "',[ReverseCharge]='" + row["ReverseCharge"] + "',[Dhara]='" + row["Dhara"] + "',"
                             + " [GrossAmount]=" + ConvertObjectToDoubleStatic(row["GrossAmount"]) + ",[OtherSign]='" + row["OtherSign"] + "',[OtherAmount]=" + ConvertObjectToDoubleStatic(row["OtherAmount"]) + ",[DisPer]=" + ConvertObjectToDoubleStatic(row["DisPer"]) + ",[DisAmount]=" + ConvertObjectToDoubleStatic(row["DisAmount"]) + ",[TaxPer]=" + ConvertObjectToDoubleStatic(row["TaxPer"]) + ",[TaxAmount]=" + ConvertObjectToDoubleStatic(row["TaxAmount"]) + ",[NetAmount]=" + ConvertObjectToDoubleStatic(row["NetAmount"]) + ",[SpecialDscPer]=" + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + ",[SpecialDscAmt]=" + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + ",[PcsRateAmt]=" + ConvertObjectToDoubleStatic(row["PcsRateAmt"]) + ",[NoOfCase]=" + ConvertObjectToDoubleStatic(row["NoOfCase"]) + ",[TCSPer]=" + ConvertObjectToDoubleStatic(row["TCSPer"]) + ",[TCSAmt]=" + ConvertObjectToDoubleStatic(row["TCSAmt"]) + ",[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + "  Where [ReceiptCode]='" + row["ReceiptCode"] + "'  and [ReceiptNo] =" + row["ReceiptNo"] + "  ";
                }

                table = ds.Tables[7];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update GoodsReturned Set SalesParty='" + row["SalesParty"] + "',SubParty='" + row["SubParty"] + "',SalesFrom='" + row["SalesFrom"] + "',PartyName='" + row["PartyName"] + "',Pieces='" + row["Pieces"] + "',Item='" + row["Item"] + "',Status='" + row["Status"] + "',AdjustedSaleBillNumber='" + row["AdjustedSaleBillNumber"] + "',Date='" + row["Date"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "' Where SalesBill='" + row["SalesBill"] + "' and SerialNo='" + row["SerialNo"] + "'  ";
                }

                table = ds.Tables[8];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update JournalAccount Set Date='" + row["Date"] + "',DebitParty='" + row["DebitParty"] + "',CreditParty='" + row["CreditParty"] + "',[DebitPartyID]='" + row["DebitPartyID"] + "',[CreditPartyID]='" + row["CreditPartyID"] + "',Description='" + row["Description"] + "',Amount='" + row["Amount"] + "',UpdatedBy='" + row["UpdatedBy"] + "' Where RemoteCode='" + row["RemoteCode"] + "' and VoucherCode='" + row["VoucherCode"] + "' and VoucherNo='" + row["VoucherNo"] + "'  ";
                }

                table = ds.Tables[9];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update OrderBooking set Status='" + row["Status"] + "', Pieces='" + row["Pieces"] + "', Quantity='" + row["Quantity"] + "', Amount=" + row["Amount"] + ",[SchemeName]='" + row["SchemeName"] + "',[OfferName]='" + row["OfferName"] + "',[Remark]=N'" + row["Remark"] + "',[MRemark]=N'" + row["MRemark"] + "',[AdjustedQty]='" + ConvertObjectToDoubleStatic(row["AdjustedQty"]) + "',[CancelQty]='" + ConvertObjectToDoubleStatic(row["CancelQty"]) + "',[DeliveryDate]='" + row["DeliveryDate"] + "',[Variant1]='" + row["Variant1"] + "',[Variant2]='" + row["Variant2"] + "',[Variant3]='" + row["Variant3"] + "',[Variant4]='" + row["Variant4"] + "',[Variant5]='" + row["Variant5"] + "',[OrderType]='" + row["OrderType"] + "' Where OrderNo=" + row["OrderNo"] + " and OrderCode='" + row["OrderCode"] + "' and NumberCode='" + row["NumberCode"] + "' ";
                }

                table = ds.Tables[10];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update OnAccountSalesRecord set [BillDate]='" + row["BillDate"] + "',[SaleBillNo]='" + row["SaleBillNo"] + "',[SalesParty]='" + row["SalesParty"] + "',[SubParty]='" + row["SubParty"] + "',[OnaccountName]='" + row["OnaccountName"] + "',[RoadPermitNo]='" + row["RoadPermitNo"] + "',[Transport]='" + row["Transport"] + "',[Station]='" + row["Station"] + "',[TINNo]='" + row["TINNo"] + "',[LrNo]='" + row["LrNo"] + "',[LrDate]='" + row["LrDate"] + "',[Date]='" + row["Date"] + "',[BookNo]='" + row["BookNo"] + "',[PBillNo]='" + row["PBillNo"] + "',[PurchaseParty]='" + row["PurchaseParty"] + "',[Item]='" + row["Item"] + "',[Qty]='" + row["Qty"] + "',[Amount]='" + row["Amount"] + "',[TaxPer]='" + row["TaxPer"] + "', "
                                 + " [Tax]='" + row["Tax"] + "',[OtherAmt]='" + row["OtherAmt"] + "' , [FinalAmt]='" + row["FinalAmt"] + "',[Cash]='" + row["Cash"] + "',[FormRequired]='" + row["FormRequired"] + "',[FormType]='" + row["FormType"] + "',[CreatedBy]='" + row["CreatedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[ReceiveDate]='" + row["ReceiveDate"] + "',[ReceiveAmount]='" + row["ReceiveAmount"] + "',[ChqDate]='" + row["ChqDate"] + "',[ChqNo]='" + row["ChqNo"] + "',[ChqAmt]='" + row["ChqAmt"] + "',[BankName]='" + row["BankName"] + "',[Status]='" + row["Status"] + "',[CFormStatus]='" + row["CFormStatus"] + "' Where [BillNo]=" + row["BillNo"] + " and [SaleBillCode]='" + row["SaleBillCode"] + "' ";
                }

                table = ds.Tables[11];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);
                    strQuery += " UPDATE [dbo].[PurchaseRecord] SET [SupplierName]='" + row["SupplierName"] + "',[SalesParty]='" + row["SalesParty"] + "',[Pieces]=" + row["Pieces"] + ",[Item]='" + row["Item"] + "',"
                             + " [Discount]=" + row["Discount"] + ",[DiscountStatus]='" + row["DiscountStatus"] + "',[Amount]='" + row["Amount"] + "',[Freight]='" + row["Freight"] + "',[Tax]='" + row["Tax"] + "',[Packing]='" + row["Packing"] + "',"
                             + " [NetDiscount]='" + row["NetDiscount"] + "',[Remark]='" + row["Remark"] + "',[Others]='" + row["Others"] + "',[GrossAmt]='" + row["GrossAmt"] + "',[ReverseCharge]='" + row["ReverseCharge"] + "',[InvoiceNo]='" + row["InvoiceNo"] + "',[InvoiceDate]='" + row["InvoiceDate"] + "',[Dhara]='" + row["Dhara"] + "',[PurchaseSource]='" + row["PurchaseSource"] + "',[CheckStatus]='" + row["CheckStatus"] + "',[CheckedBy]='" + row["CheckedBy"] + "',"
                             + " [NetAmt]='" + row["NetAmt"] + "',[BillDate]='" + row["BillDate"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "',[TaxLedger]='" + row["TaxLedger"] + "',[TaxAmount]=" + row["TaxAmount"] + ",[TaxPer]=" + row["TaxPer"] + ",[SpecialDscPer]=" + ConvertObjectToDoubleStatic(row["SpecialDscPer"]) + ",[SpecialDscAmt]=" + ConvertObjectToDoubleStatic(row["SpecialDscAmt"]) + ",[PcsRateAmt]=" + ConvertObjectToDoubleStatic(row["PcsRateAmt"]) + ",[TCSPer]=" + ConvertObjectToDoubleStatic(row["TCSPer"]) + ",[TCSAmt]=" + ConvertObjectToDoubleStatic(row["TCSAmt"]) + ",[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + "  where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                             + " Update BalanceAmount Set Date='" + row["BillDate"] + "',PartyName='" + row["SupplierName"] + "' ,Amount='" + row["NetAmt"] + "',UpdatedBy='" + row["UpdatedBy"] + "',[AccountID]='" + row["PurchasePartyID"] + "' Where Description='" + row["BillCode"] + " " + row["BillNo"] + "' and AccountStatus='PURCHASE A/C' "
                             + " Delete from[dbo].[BalanceAmount] Where[AccountStatus]='DUTIES & TAXES' AND [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                             + " Delete from [dbo].[GSTDetails] Where [BillType]='PURCHASE' and ([BillCode]+' '+CAST([BillNo] as varchar))='" + row["GRSNo"] + "' ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["TaxLedger"] + "'; "
                                    + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                    + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                    + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                    + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                    + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','CR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                }

                table = ds.Tables[12];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update SalesEntry Set SalesFrom='" + row["SalesFrom"] + "',SupplierName='" + row["SupplierName"] + "',Pieces='" + row["Pieces"] + "',Items='" + row["Items"] + "',Discount='" + row["Discount"] + "',DiscountStatus='" + row["DiscountStatus"] + "',SNDhara='" + row["SNDhara"] + "',Amount='" + row["Amount"] + "',Packing='" + row["Packing"] + "',Freight='" + row["Freight"] + "',"
                             + " Tax='" + row["Tax"] + "',TotalAmt='" + row["TotalAmt"] + "',PBill='" + row["PBill"] + "',RemPcs='" + row["RemPcs"] + "',BillDate='" + row["BillDate"] + "',PurchaseBill='" + row["PurchaseBill"] + "',Personal='" + row["Personal"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and GRSNo='" + row["GRSNo"] + "' ";
                }

                table = ds.Tables[13];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);
                    strQuery += " Update SalesRecord Set SalesParty='" + row["SalesParty"] + "',SubParty='" + row["SubParty"] + "',Transport='" + row["Transport"] + "',Station='" + row["Station"] + "',GoodsType='" + row["GoodsType"] + "',DueDays='" + row["DueDays"] + "',PackerName='" + row["PackerName"] + "',PackingDate='" + row["PackingDate"] + "',CartoneType='" + row["CartoneType"] + "',[SalesType]='" + row["SalesType"] + "',[TaxAmount]=" + dTaxAmt + ",[ServiceAmount]=" + ConvertObjectToDoubleStatic(row["ServiceAmount"]) + ",[GreenTaxAmt]='" + row["GreenTaxAmt"] + "',"
                                  + " CartoneSize='" + row["CartoneSize"] + "',NetAddLs='" + row["NetAddLs"] + "',LrNumber='" + row["LrNumber"] + "',LrDate='" + row["LrDate"] + "',Parcel='" + row["Parcel"] + "',Remark='" + row["Remark"] + "',OtherPer='" + row["OtherPer"] + "',Others='" + row["Others"] + "',OtherPacking='" + row["OtherPacking"] + "',Postage='" + row["Postage"] + "',TotalPcs='" + row["TotalPcs"] + "',[WayBillNo]='" + row["WayBillNo"] + "',[VehicleNo]='" + row["VehicleNo"] + "',[TimeOfSupply]='" + row["TimeOfSupply"] + "',[OtherField]='" + row["OtherField"] + "',[TaxPer]=" + ConvertObjectToDoubleStatic(row["TaxPer"]) + ",GrossAmt='" + row["GrossAmt"] + "',FinalAmt='" + row["FinalAmt"] + "',NetAmt='" + row["NetAmt"] + "',BillDate='" + row["BillDate"] + "',ForwardingChallan='" + row["ForwardingChallan"] + "', Marka='" + row["Marka"] + "',"
                                  + " OtherPerText='" + row["OtherPerText"] + "', OtherText='" + row["OtherText"] + "', UpdatedBy='" + row["UpdatedBy"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[AttachedBill]='" + row["AttachedBill"] + "',[BillStatus]='" + row["BillStatus"] + "',[Description]='" + row["Description"] + "',[PackedBillNo]='" + row["PackedBillNo"] + "',[WayBillDate]='" + row["WayBillDate"] + "',[Description_1]='" + row["Description_1"] + "',[Description_2]='" + row["Description_2"] + "',[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",[IRNNO]='" + row["IRNNO"] + "',[ACKNO]='" + row["ACKNO"] + "',[QRCode]='" + row["QRCode"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + "  "
                                  + " Update BalanceAmount Set Date='" + row["BillDate"] + "', PartyName='" + row["SalesParty"] + "',Amount='" + row["NetAmt"] + "',FinalAmount='" + row["FinalAmt"] + "', UpdatedBy='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' where Description= '" + row["BillCode"] + " " + row["BillNo"] + "' and AccountStatus='SALES A/C'  "
                                  + " Delete from[dbo].[BalanceAmount] Where[AccountStatus]='DUTIES & TAXES' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                                  + " Delete from [dbo].[GSTDetails] Where [BillType]='SALES' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SalesType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["BillDate"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                }

                //table = ds.Tables[14];
                //foreach (DataRow row in table.Rows)
                //{
                //    strQuery += " Update SMSReport Set Status='" + row["Status"] + "',UpdatedBy='" + row["UpdatedBy"] + "' Where RemoteCode=" + row["RemoteCode"] + " and MobileNo='" + row["MobileNo"] + "' ";
                //}   

                table = ds.Tables[16];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += "  if not exists (Select BillCode from SaleReturnDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + ") begin  "
                               + " INSERT INTO [dbo].[SaleReturnDetails] ([BillCode],[BillNo],[RemoteID],[PurchaseBillNo],[PurchasePartyID],[ItemName],[DisStatus],[Discount],[Dhara],[Qty],[Amount],[Packing],[Freight],[TaxFree],[TotalAmt],[PurchaseReturnStatus],[PurchaseReturnNumber],[InsertStatus],[UpdateStatus],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[MRP],[Rate],[UnitName],[ItemStatus],[SDisPer],[Disc],[BarCode],[BrandName],[DesignName],[Other1],[Other2],[SalesMan],[SaleIncentive],[BarCode_S]) VALUES  "
                               + "  ('" + row["BillCode"] + "'," + row["BillNo"] + "," + row["SID"] + ",'" + row["PurchaseBillNo"] + "','" + row["PurchasePartyID"] + "','" + row["ItemName"] + "','" + row["DisStatus"] + "'," + row["Discount"] + ",'" + row["Dhara"] + "'," + row["Qty"] + "," + row["Amount"] + "," + ConvertObjectToDoubleStatic(row["Packing"]) + "," + ConvertObjectToDoubleStatic(row["Freight"]) + "," + ConvertObjectToDoubleStatic(row["TaxFree"]) + "," + row["TotalAmt"] + ",'" + row["PurchaseReturnStatus"] + "','" + row["PurchaseReturnNumber"] + "',0,0,'" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + ConvertObjectToDoubleStatic(row["MRP"]) + "," + ConvertObjectToDoubleStatic(row["Rate"]) + ",'" + row["UnitName"] + "','" + row["ItemStatus"] + "'," + ConvertObjectToDoubleStatic(row["SDisPer"]) + "," + ConvertObjectToDoubleStatic(row["Disc"]) + ",'" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["SalesMan"] + "'," + ConvertObjectToDoubleStatic(row["SaleIncentive"]) + ",'" + row["BarCode_S"] + "')  end else begin  "
                               + " UPDATE [dbo].[SaleReturnDetails] SET [PurchaseBillNo]='" + row["PurchaseBillNo"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "',[ItemName]='" + row["ItemName"] + "',[DisStatus]='" + row["DisStatus"] + "',[Discount]=" + row["Discount"] + ",[Dhara]='" + row["Dhara"] + "',[Qty]=" + row["Qty"] + ",[Amount]=" + row["Amount"] + ",[Packing]=" + ConvertObjectToDoubleStatic(row["Packing"]) + ",[Freight]=" + ConvertObjectToDoubleStatic(row["Freight"]) + ",[TaxFree]=" + ConvertObjectToDoubleStatic(row["TaxFree"]) + ",[TotalAmt]=" + row["TotalAmt"] + ",[PurchaseReturnStatus]='" + row["PurchaseReturnStatus"] + "',[PurchaseReturnNumber]='" + row["PurchaseReturnNumber"] + "',[Variant1]='" + row["Variant1"] + "',[Variant2]='" + row["Variant2"] + "',[Variant3]='" + row["Variant3"] + "',[Variant4]='" + row["Variant4"] + "',[Variant5]='" + row["Variant5"] + "',[MRP]=" + ConvertObjectToDoubleStatic(row["MRP"]) + ",[Rate]=" + ConvertObjectToDoubleStatic(row["Rate"]) + ",[UnitName]='" + row["UnitName"] + "',[ItemStatus]='" + row["ItemStatus"] + "',[SDisPer]=" + ConvertObjectToDoubleStatic(row["SDisPer"]) + ",[Disc]=" + ConvertObjectToDoubleStatic(row["Disc"]) + ",[BarCode]='" + row["BarCode"] + "',[BrandName]='" + row["BrandName"] + "',[DesignName]='" + row["DesignName"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[SalesMan]='" + row["SalesMan"] + "',[SaleIncentive]=" + ConvertObjectToDoubleStatic(row["SaleIncentive"]) + ",[BarCode_S]='" + row["BarCode_S"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + " end ";
                }


                double _dNetAmt = 0, _dServiceAmt = 0, _dPackingAmt = 0;
                table = ds.Tables[15];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);
                    _dNetAmt = ConvertObjectToDoubleStatic(row["NetAmt"]);
                    _dServiceAmt = ConvertObjectToDoubleStatic(row["ServiceAmt"]);
                    _dPackingAmt = ConvertObjectToDoubleStatic(row["PackingAmt"]);

                    strQuery += "  UPDATE [dbo].[SaleReturn]  SET  [Date]='" + row["Date"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[SaleBillCode]='" + row["SaleBillCode"] + "',[SaleBillNo]='" + row["SaleBillNo"] + "',[EntryType]='" + row["EntryType"] + "',[SaleType]='" + row["SaleType"] + "',[Remark]='" + row["Remark"] + "',[OtherSign]='" + row["OtherSign"] + "',[OtherAmt]=" + row["OtherAmt"] + ",[PackingAmt]=" + row["PackingAmt"] + ",[NetDiscount]=" + row["NetDiscount"] + ",[ServiceAmt]=" + row["ServiceAmt"] + ",[TaxPer]=" + row["TaxPer"] + ",[TaxAmount]=" + row["TaxAmount"] + ",[TotalQty]=" + row["TotalQty"] + ",[GrossAmt]=" + row["GrossAmt"] + ",[NetAmt]=" + row["NetAmt"] + ",[OtherText]='" + row["OtherText"] + "',[OtherValue]='" + row["OtherValue"] + "',[SaleBillDate]='" + row["SaleBillDate"] + "',[DiscountType]='" + row["DiscountType"] + "',[Description1]='" + row["Description1"] + "',[Description2]='" + row["Description2"] + "',[Description3]='" + row["Description3"] + "',[CashAmt]=" + ConvertObjectToDoubleStatic(row["CashAmt"]) + ",[CreditAmt]=" + ConvertObjectToDoubleStatic(row["CreditAmt"]) + ",[ReturnType]='" + row["ReturnType"] + "',[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",[IRNNO]='" + row["IRNNO"] + "',[ACKNO]='" + row["ACKNO"] + "',[QRCode]='" + row["QRCode"] + "'  Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                             + " Select @_PackingAmt=SUM(Packing+Freight) from SaleReturnDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                             + " Select @_FinalAmt=(NetAmt-((CAST((OtherSign+CAST(OtherAmt as varchar)) as Money)+ServiceAmt+PackingAmt)+((@_PackingAmt+(CAST((OtherSign+CAST(OtherAmt as varchar)) as Money)+ServiceAmt+PackingAmt))*TaxPer/100))) from SaleReturn Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " "
                             + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]='" + row["NetAmt"] + "',[FinalAmount]=CAST(@_FinalAmt as varchar),[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' Where [AccountStatus]='SALE RETURN' and [Status]='CREDIT' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                             + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]='" + row["NetAmt"] + "',[FinalAmount]=CAST(@_FinalAmt as varchar),[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' Where [AccountStatus]='DEBIT NOTE' and [Status]='DEBIT' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                             + " Delete from[dbo].[BalanceAmount] Where[AccountStatus]='DUTIES & TAXES' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                             + " Delete from [dbo].[GSTDetails] Where [BillType]='SALERETURN' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " ";

                    strQuery += " if exists(Select PR.BillCode  from SaleReturn PR Cross APPLY(Select GReturnCode from CompanySetting Where BilLCode = GReturnCode) CS Where PR.BillCode = '" + row["BillCode"] + "' and PR.BillNo = " + row["BillNo"] + ") begin ";
                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }

                    strQuery += " end else begin ";
                    strQuery += " if exists (Select PR.BillCode from SaleReturn PR Cross APPLY (Select DebitNoteCode from CompanySetting Where BilLCode=DebitNoteCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }

                    strQuery += " end end ";

                    //if (dTaxAmt > 0)
                    //{
                    //    strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                    //                 + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                    //                 + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                    //                 + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                    //                 + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                    //                 + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                    //                 + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                    //                 + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                    //                 + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                    //                 + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                    //                 + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    //}
                }

                table = ds.Tables[17];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmount"]);

                    strQuery += " UPDATE [dbo].[PurchaseReturn] SET [Date]='" + row["Date"] + "',[PurchasePartyID]='" + row["PurchasePartyID"] + "',[EntryType]='" + row["EntryType"] + "',[PurchaseType]='" + row["PurchaseType"] + "',[Remark]='" + row["Remark"] + "',[OtherSign]='" + row["OtherSign"] + "',[OtherAmt]=" + row["OtherAmt"] + ",[NetDiscount]=" + row["NetDiscount"] + ",[TaxPer]=" + row["TaxPer"] + ",[TaxAmount]=" + row["TaxAmount"] + ",[TotalQty]=" + row["TotalQty"] + ",[GrossAmt]=" + row["GrossAmt"] + ",[NetAmt]=" + row["NetAmt"] + ",[OtherText]='" + row["OtherText"] + "',[OtherValue]='" + row["OtherValue"] + "',[CreatedBy]='" + row["CreatedBy"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[ReverseCharge]='" + row["ReverseCharge"] + "',[PurchaseBillCode]='" + row["PurchaseBillCode"] + "',[PurchaseBillNo]='" + row["PurchaseBillNo"] + "',[PurchaseBillDate]='" + row["PurchaseBillDate"] + "',[Description1]='" + row["Description1"] + "',[Description2]='" + row["Description2"] + "',[Description3]='" + row["Description3"] + "',[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + "  Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + "  "
                             + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["PurchasePartyID"] + "',[Amount]='" + row["NetAmt"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["PurchasePartyID"] + "' Where [AccountStatus]='PURCHASE RETURN' and [Status]='DEBIT' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                             + " UPDATE [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["PurchasePartyID"] + "',[Amount]='" + row["NetAmt"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["PurchasePartyID"] + "' Where [AccountStatus]='CREDIT NOTE' and [Status]='CREDIT' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                             + " Delete from[dbo].[BalanceAmount] Where[AccountStatus]='DUTIES & TAXES' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                             + " Delete from [dbo].[GSTDetails] Where [BillType]='PURCHASERETURN' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " ";

                    strQuery += " if exists (Select PR.BillCode from PurchaseReturn PR Cross APPLY (Select PurchaseReturnCode from CompanySetting Where BilLCode=PurchaseReturnCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["PurchaseType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName=Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end  else begin  "
                             + " if exists (Select PR.BillCode  from PurchaseReturn PR Cross APPLY (Select CreditNoteCode from CompanySetting Where BilLCode=CreditNoteCode) CS Where PR.BillCode='" + row["BillCode"] + "' and PR.BillNo=" + row["BillNo"] + ") begin  ";
                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = '" + row["PurchaseType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName=Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','DEBIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                    strQuery += " end end ";                
                }

                table = ds.Tables[18];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += "  if not exists (Select BillCode from PurchaseReturnDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + ") begin  "
                               + " INSERT INTO [dbo].[PurchaseReturnDetails] ([BillCode],[BillNo],[RemoteID],[SRBillNo],[SalePartyID],[ItemName],[DisStatus],[Discount],[Dhara],[Qty],[Amount],[Packing],[Freight],[TaxFree],[TotalAmt],[InsertStatus],[UpdateStatus],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[MRP],[Rate],[UnitName],[ItemStatus],[SDisPer],[Disc],[BarCode],[BrandName],[DesignName],[Other1],[Other2]) VALUES  "
                               + "  ('" + row["BillCode"] + "'," + row["BillNo"] + "," + row["SID"] + ",'" + row["SRBillNo"] + "','" + row["SalePartyID"] + "','" + row["ItemName"] + "','" + row["DisStatus"] + "'," + row["Discount"] + ",'" + row["Dhara"] + "'," + row["Qty"] + "," + row["Amount"] + "," + ConvertObjectToDoubleStatic(row["Packing"]) + "," + ConvertObjectToDoubleStatic(row["Freight"]) + "," + ConvertObjectToDoubleStatic(row["TaxFree"]) + "," + row["TotalAmt"] + ",0,0,'" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + ConvertObjectToDoubleStatic(row["MRP"]) + "," + ConvertObjectToDoubleStatic(row["Rate"]) + ",'" + row["UnitName"] + "','" + row["ItemStatus"] + "'," + ConvertObjectToDoubleStatic(row["SDisPer"]) + "," + ConvertObjectToDoubleStatic(row["Disc"]) + ",'" + row["BarCode"] + "','" + row["BrandName"] + "','" + row["DesignName"] + "','" + row["Other1"] + "','" + row["Other2"] + "')  end else begin  "
                               + " UPDATE [dbo].[PurchaseReturnDetails] SET [SRBillNo]='" + row["SRBillNo"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[ItemName]='" + row["ItemName"] + "',[DisStatus]='" + row["DisStatus"] + "',[Discount]=" + row["Discount"] + ",[Dhara]='" + row["Dhara"] + "',[Qty]=" + row["Qty"] + ",[Amount]=" + row["Amount"] + ",[Packing]=" + ConvertObjectToDoubleStatic(row["Packing"]) + ",[Freight]=" + ConvertObjectToDoubleStatic(row["Freight"]) + ",[TaxFree]=" + ConvertObjectToDoubleStatic(row["TaxFree"]) + ",[TotalAmt]=" + row["TotalAmt"] + ",[Variant1]='" + row["Variant1"] + "',[Variant2]='" + row["Variant2"] + "',[Variant3]='" + row["Variant3"] + "',[Variant4]='" + row["Variant4"] + "',[Variant5]='" + row["Variant5"] + "',[MRP]=" + ConvertObjectToDoubleStatic(row["MRP"]) + ",[Rate]=" + ConvertObjectToDoubleStatic(row["Rate"]) + ",[UnitName]='" + row["UnitName"] + "',[ItemStatus]='" + row["ItemStatus"] + "',[SDisPer]=" + ConvertObjectToDoubleStatic(row["SDisPer"]) + ",[Disc]=" + ConvertObjectToDoubleStatic(row["Disc"]) + ",[BarCode]='" + row["BarCode"] + "',[BrandName]='" + row["BrandName"] + "',[DesignName]='" + row["DesignName"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["SID"] + " end ";
                }
              
                table = ds.Tables[19];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " UPDATE [dbo].[CompanyDetails] SET [CompanyName]='" + row["CompanyName"] + "',[FullCompanyName]='" + row["FullCompanyName"] + "',[Address]='" + row["Address"] + "',[StateName]='" + row["StateName"] + "',[PinCode]='" + row["PinCode"] + "',[GSTNo]='" + row["GSTNo"] + "',[PANNo]='" + row["PANNo"] + "',[TINNo]='" + row["TINNo"] + "',[EmailID]='" + row["EmailID"] + "',[STDNo]='" + row["STDNo"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[MobileNo]='" + row["MobileNo"] + "',[SignaturePath]='" + row["SignaturePath"] + "',[TAXEnabled]='" + row["TAXEnabled"] + "',[UpdateBy]='" + row["UpdateBy"] + "',[BankName]='" + row["BankName"] + "',[AccountName]='" + row["AccountName"] + "',[IFSCCode]='" + row["IFSCCode"] + "',[BranchName]='" + row["BranchName"] + "',[CINNumber]='" + row["CINNumber"] + "',[SACCode]='" + row["SACCode"] + "',[Website]='" + row["Website"] + "' Where [Other]='" + row["Other"] + "' ";
                }

                table = ds.Tables[20];
                foreach (DataRow row in table.Rows)
                {
                    dTaxAmt = ConvertObjectToDoubleStatic(row["TaxAmt"]);

                    strQuery += " UPDATE [dbo].[SaleServiceBook] SET [Date]='" + row["Date"] + "',[SalePartyID]='" + row["SalePartyID"] + "',[SubPartyID]='" + row["SubPartyID"] + "',[SaleType]='" + row["SaleType"] + "',[TransportName]='" + row["TransportName"] + "',[StationName]='" + row["StationName"] + "',[Remark]='" + row["Remark"] + "',[OtherText]='" + row["OtherText"] + "',[OtherSign]='" + row["OtherSign"] + "',[OtherAmt]=" + row["OtherAmt"] + ",[TaxPer]=" + row["TaxPer"] + ",[TaxAmt]=" + row["TaxAmt"] + ",[GrossAmt]=" + row["GrossAmt"] + ",[NetAmt]=" + row["NetAmt"] + ",[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=1,[RoundOffSign]='" + row["RoundOffSign"] + "',[RoundOffAmt]=" + ConvertObjectToDoubleStatic(row["RoundOffAmt"]) + ",[TaxableAmt]=" + ConvertObjectToDoubleStatic(row["TaxableAmt"]) + ",[IRNNO]='" + row["IRNNO"] + "',[ACKNO]='" + row["ACKNO"] + "',[QRCode]='" + row["QRCode"] + "'  Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + "  "
                               + " UPDATE  [dbo].[BalanceAmount] SET [Date]='" + row["Date"] + "',[PartyName]='" + row["SalePartyID"] + "',[Amount]='" + row["NetAmt"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[AccountID]='" + row["SalePartyID"] + "' Where [AccountStatus]='SALE SERVICE' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "'  "
                               + " Delete from[dbo].[BalanceAmount] Where[AccountStatus]='DUTIES & TAXES' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' "
                               + " Delete from [dbo].[GSTDetails] Where [BillType]='SALESERVICE' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " ";

                    if (dTaxAmt > 0)
                    {
                        strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = '" + row["SaleType"] + "'; "
                                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end else begin"
                                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end "
                                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@SGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@SGSTName) end end end "
                                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                     + " ('" + row["Date"] + "',@IGSTFullName,'DUTIES & TAXES','CREDIT','" + row["BillCode"] + " " + row["BillNo"] + "','" + dTaxAmt + "','DR','0','0','False','',0,'" + row["CreatedBy"] + "','',0,0,0,@IGSTName) end end ";
                    }
                }

                table = ds.Tables[21];
                foreach (DataRow row in table.Rows)
                {
                    strQuery += "  if not exists (Select BillCode from SaleServiceDetails Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and RemoteID=" + row["ID"] + ") begin  "
                               + " INSERT INTO [dbo].[SaleServiceDetails] ([BillCode],[BillNo],[ItemName],[SAC],[Amount],[RemoteID],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES  "
                              + "  ('" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["ItemName"] + "','" + row["SAC"] + "'," + row["Amount"] + ",'" + row["ID"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0)  end else begin  "
                               + " UPDATE [dbo].[SaleServiceDetails] SET [ItemName]='" + row["ItemName"] + "',[SAC]='" + row["SAC"] + "',[Amount]=" + row["Amount"] + ",[UpdatedBy]='" + row["UpdatedBy"] + "' Where  [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " and [RemoteID]=" + row["ID"] + " end ";
                }
            }

            table = ds.Tables[22];
            if (table != null)
            {
                string strInvoiceType = "", strAccountStatus = "", strPStatus = "", strTStatus = "";
                double dTCSAmt = 0;
                foreach (DataRow row in table.Rows)
                {
                    strInvoiceType = Convert.ToString(row["InvoiceType"]);
                    dTCSAmt = ConvertObjectToDoubleStatic(row["TCSAmt"]);
                    strAccountStatus = "TCS DEBIT NOTE";
                    strPStatus = "DEBIT";
                    strTStatus = "CREDIT";
                    if (strInvoiceType == "CREDITNOTE")
                    {
                        strAccountStatus = "TCS CREDIT NOTE";
                        strPStatus = "CREDIT";
                        strTStatus = "DEBIT";
                    }

                    strQuery += " if exists(Select [BillCode] from [dbo].[TCSDetails] Where [BillCode]='" + row["BillCode"] + "' and BIllNo=" + row["BIllNo"] + ") begin "
                       + " UPDATE [dbo].[TCSDetails] SET [Date]='" + row["Date"] + "',[AccountID]='" + row["AccountID"] + "',[TCSAccountID]='" + row["TCSAccountID"] + "',[VoucherCode]='" + row["VoucherCode"] + "',[VoucherNo]=" + row["VoucherNo"] + ",[Amount]=" + ConvertObjectToDoubleStatic(row["Amount"]) + ",[TCSPer]=" + ConvertObjectToDoubleStatic(row["TCSPer"]) + ",[TCSAmt]=" + dTCSAmt + ",[Remark]='" + row["Remark"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "' Where [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " "
                       + " UPDATE [dbo].[BalanceAmount]  Set [Date]='" + row["Date"] + "',[PartyName]='" + row["AccountID"] + "',[Amount]=" + dTCSAmt + ",[AccountID]='" + row["AccountID"] + "' Where [AccountStatus]='" + strAccountStatus + "' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [Status]='" + strPStatus + "'  "
                       + " UPDATE [dbo].[BalanceAmount]  Set [Date]='" + row["Date"] + "',[PartyName]='" + row["TCSAccountID"] + "',[Amount]=" + dTCSAmt + ",[AccountID]='" + row["TCSAccountID"] + "' Where [AccountStatus]='" + strAccountStatus + "' and [Description]='" + row["BillCode"] + " " + row["BillNo"] + "' and [Status]='" + strTStatus + "' end ";
                }
            }

            table = ds.Tables[23];
            if (table != null)
            {
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " UPDATE [dbo].[BankGuarantee] Set [Date]='" + row["Date"] + "',[CustomerName]='" + row["CustomerName"] + "',[BankGuaranteeNo]='" + row["BankGuaranteeNo"] + "',[BankName]='" + row["BankName"] + "',[ValidUpto]='" + row["ValidUpto"] + "',[Amount]=" + ConvertObjectToDoubleStatic(row["Amount"]) + ",[UpdatedBy]='" + row["UpdatedBy"] + "' Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " ";
                }
            }

            if (dtGoodsReceiveDetails != null)
            {

                DataTable _dt = dtGoodsReceiveDetails.DefaultView.ToTable(true, "ReceiptCode", "ReceiptNo");
                foreach (DataRow row in _dt.Rows)
                {
                    strQuery += " if exists(Select ReceiptCode from [dbo].[GoodsReceiveDetails] Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo=" + row["ReceiptNo"] + ") begin "
                             + " Delete from [dbo].[GoodsReceiveDetails] Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo=" + row["ReceiptNo"] + " end ";
                }


                foreach (DataRow row in dtGoodsReceiveDetails.Rows)
                {
                    strQuery += " if not exists(Select ReceiptCode from GoodsReceiveDetails Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo=" + row["ReceiptNo"] + " and [RemoteID]=" + row["ID"] + " ) begin "
                                  + " INSERT INTO [dbo].[GoodsReceiveDetails]([ReceiptCode],[ReceiptNo],[ItemName],[PcsType],[Quantity],[Amount],[PackingAmt],[FreightAmt],[TaxAmt],[InsertStatus],[UpdateStatus],[RemoteID],[Rate],[GRate],[DesignName],[Cut],[MTR],[Fold]) VALUES "
                                 + " ('" + row["ReceiptCode"] + "'," + row["ReceiptNo"] + ",'" + row["ItemName"] + "','" + row["PcsType"] + "'," + row["Quantity"] + "," + row["Amount"] + "," + row["PackingAmt"] + "," + row["FreightAmt"] + " ," + row["TaxAmt"] + " ,0,0," + row["ID"] + "," + ConvertObjectToDoubleStatic(row["Rate"]) + "," + ConvertObjectToDoubleStatic(row["GRate"]) + ",'" + row["DesignName"] + "'," + ConvertObjectToDoubleStatic(row["Cut"]) + "," + ConvertObjectToDoubleStatic(row["MTR"]) + "," + ConvertObjectToDoubleStatic(row["Fold"]) + ") end  ";
                }
            }

            if (dtGSTDetails != null)
            {
                foreach (DataRow row in dtGSTDetails.Rows)
                {
                    strQuery += " if not exists(Select BillType from [dbo].[GSTDetails] Where [BillType]='" + row["BillType"] + "' and [BillCode]='" + row["BillCode"] + "' and [BillNo]=" + row["BillNo"] + " and [GSTAccount]='" + row["GSTAccount"] + "' and [BillType]='" + row["BillType"] + "' and [TaxRate]=" + ConvertObjectToDoubleStatic(row["TaxRate"]) + " ) begin "
                             + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode]) VALUES "
                             + " ('" + row["BillType"] + "','" + row["BillCode"] + "'," + row["BillNo"] + ",'" + row["GSTAccount"] + "'," + ConvertObjectToDoubleStatic(row["TaxRate"]) + "," + ConvertObjectToDoubleStatic(row["TaxAmount"]) + ",'" + row["TaxType"] + "','') end ";// end ";
                }
            }


            #endregion

            return strQuery;
        }

        public static string GetAllInsertedRecordForServerOld(string strFileQuery, ref string strDeleteQuery)
        {
            string strQuery = "";
            DataTable table = new DataTable();

            #region Insert New Record

            string strEncript = "";
            if (strFileQuery != "")
            {
                strEncript = Convert.ToBase64String(Encoding.Unicode.GetBytes(strFileQuery));
                strQuery += " Insert into UpdateDataTable(UpdateQuery) Values('" + strEncript + "') ";
                strFileQuery = "";
            }
            SqlDataAdapter adap = new SqlDataAdapter("Select * from BiltyDetail Where LrNo!='' ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strFileQuery += " Update SalesRecord Set Transport='" + row["TransportName"] + "',Station='" + row["StationName"] + "',Marka='" + row["PvtMarka"] + "',LrNumber='" + row["LrNo"] + "',LrDate='" + row["LrDate"] + "',UpdateStatus=1  Where BillCode='" + row["BillCode"] + "' and BillNo='" + row["BillNo"] + "' ";
            }
            table = new DataTable();
            adap = new SqlDataAdapter("Select ReceiptCode,ReceiptNo,OrderNo,OrderDate,UpdatedBy from GoodsReceive Where OrderNo!='' and OrderNo!='0' and SaleBill='Clear' and InsertStatus=0 and UpdateStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strFileQuery += " Update GoodsReceive Set OrderNo='" + row["OrderNo"] + "' ,OrderDate='" + row["OrderDate"] + "',UpdatedBy='" + row["UpdatedBy"] + "' Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo=" + row["ReceiptNo"] + " ";
            }

            if (strFileQuery != "")
            {
                strEncript = Convert.ToBase64String(Encoding.Unicode.GetBytes(strFileQuery));
                strQuery += " Insert into UpdateDataTable(UpdateQuery) Values('" + strEncript + "') ";
                strFileQuery = "";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select Name,Other from SupplierMaster Where InsertStatus=0 and UpdateStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strFileQuery += " Update SupplierMaster Set Other='" + row["Other"] + "' Where Name='" + row["Name"] + "' ";
            }

            if (strFileQuery != "")
            {
                strEncript = Convert.ToBase64String(Encoding.Unicode.GetBytes(strFileQuery));
                strQuery += " Insert into UpdateDataTable(UpdateQuery) Values('" + strEncript + "') ";
                strFileQuery = "";
            }

            table = new DataTable();
            adap = new SqlDataAdapter(" Select * from AddressBook Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from AddressBook Where Name='" + row[1] + "') begin "
                              + " Insert into AddressBook Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "',1,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from BalanceAmount Where  VoucherCode!='' ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " Insert into BalanceAmount Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','False','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "'," + row[0] + ",0,0)";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CartoneSize Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CartoneSize Where CSize='" + row[1] + "') begin "
                             + " Insert into CartoneSize Values('" + row[1] + "','" + row[2] + "','" + row[3] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CartoneType Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CartoneType Where Cartone='" + row[1] + "') begin "
                              + " Insert into CartoneType Values('" + row[1] + "','" + row[2] + "',0,0)  end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from Category Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Category Where CategoryName='" + row[1] + "') begin "
                             + " Insert into Category Values('" + row[1] + "','" + row[2] + "','" + row[3] + "',0,0)  end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CostCentreAccount  ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " Insert into CostCentreAccount Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "',0,0,0)  ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CostMaster Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CostMaster Where CostType='" + row[1] + "') begin "
                             + " Insert into CostMaster Values('" + row[1] + "','" + row[2] + "',0,0) end  ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CourierMaster Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CourierMaster Where CourierName='" + row[1] + "') begin "
                             + " Insert into CourierMaster Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CourierRegister  ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CourierRegister Where SNo=" + row[1] + " and SerialCode='" + row[2] + "' and SCode='" + row[12] + "') begin "
                             + " Insert into CourierRegister Values(" + row[1] + ",'" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from CourierRegisterIn ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CourierRegisterIn Where CourierCode='" + row[1] + "' and SNo='" + row[2] + "' and SCode='" + row[3] + "') begin "
                             + " Insert into CourierRegisterIn Values('" + row[1] + "'," + row[2] + ",'" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from ForwardingEntry ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from ForwardingEntry Where FCode='" + row[1] + "' and FNumber=" + row[2] + "  and Item='" + row[3] + "') begin "
                             + " Insert into ForwardingEntry Values('" + row[1] + "'," + row[2] + ",'" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "',0,0) end ";
            }


            table = new DataTable();
            adap = new SqlDataAdapter("Select * from ForwardingRecord ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from ForwardingRecord Where FCode='" + row[1] + "' and FNumber='" + row[2] + "' ) begin "
                             + " Insert into ForwardingRecord Values('" + row[1] + "'," + row[2] + ",'" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "','" + row[16] + "','" + row[17] + "','" + row[18] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from GoodsReceive Where SaleBill='Clear' ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from GoodsReceive Where ReceiptCode='" + row[1] + "' and ReceiptNo='" + row[2] + "' ) begin "
                             + " Insert into GoodsReceive Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "','" + row[16] + "','" + row[17] + "','" + row[18] + "','" + row[19] + "','" + row[20] + "','" + row[21] + "',0,0,'" + row[24] + "') end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from GoodsReturned Where  Status='Clear' ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from GoodsReturned Where SalesBill='" + row[3] + "') begin "
                             + " Insert into GoodsReturned Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from GRRecords ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from GRRecords Where GRCode='" + row[1] + "' and GRNo=" + row[2] + " and PurchaseParty='" + row[7] + "') begin "
                             + " Insert into GRRecords Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from Items Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Items Where ItemName='" + row[1] + "') begin "
                              + " Insert into Items Values('" + row[1] + "','" + row[2] + "',0,0)  end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from JournalAccount  ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from JournalAccount Where VoucherCode='" + row[6] + "' and VoucherNo=" + row[7] + " ) begin "
                             + " Insert into JournalAccount Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "',0,0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from Marketer Where InsertStatus=1", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Marketer Where MarketerName='" + row[1] + "' ) begin "
                             + " Insert into Marketer Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "',0,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from OrderBooking Where  Status='Clear' ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from OrderBooking Where OrderCode='" + row[18] + "' and OrderNo=" + row[3] + " and NumberCode='" + row[23] + "') begin "
                             + " Insert into OrderBooking Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "','" + row[16] + "','" + row[17] + "','" + row[18] + "','" + row[19] + "','" + row[20] + "',1,0,'" + row[23] + "') end";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from PurchaseRecord ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from PurchaseRecord Where BillCode='" + row[1] + "' and BillNo=" + row[2] + ") begin "
                                + " Insert into PurchaseRecord values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "','" + row[16] + "','" + row[17] + "','" + row[18] + "','" + row[19] + "','" + row[20] + "','" + row[21] + "','" + row[22] + "','" + row[23] + "','" + row[24] + "','" + row[25] + "','" + row[26] + "','" + row[27] + "',0,0) "
                                + " Insert into BalanceAmount values('" + row[25] + "','" + row[5] + "' ,'PURCHASE A/C' ,'Credit' ,'" + row[1] + " " + row[2] + "' ,'" + row[24] + "','Cr','0','0','False','',0,'" + row[26] + "','" + row[27] + "',0,0,0)  end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from SalesEntry  ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from SalesEntry Where BillCode='" + row[1] + "' and BillNo=" + row[2] + " and GRSNo='" + row[4] + "' ) begin "
                             + " Insert into SalesEntry Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "','" + row[16] + "','" + row[17] + "','" + row[18] + "','" + row[19] + "','" + row[20] + "',1,0) end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from SalesRecord ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from SalesRecord Where BillCode='" + row[1] + "' and BillNo=" + row[2] + ") begin "
                                 + " Insert into SalesRecord values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "','" + row[16] + "','" + row[17] + "','" + row[18] + "','" + row[19] + "','" + row[20] + "','" + row[21] + "','" + row[22] + "','" + row[23] + "','" + row[24] + "','" + row[25] + "','" + row[26] + "','" + row[27] + "','" + row[28] + "','" + row[29] + "','" + row[30] + "','" + row[31] + "','" + row[32] + "',0,0)  "
                                 + " Insert into BalanceAmount values('" + row[26] + "' ,'" + row[3] + "' ,'SALES A/C' ,'Debit' , '" + row[1] + " " + row[2] + "' ,'" + row[25] + "','Dr','" + row[24] + "',0,'False','',0,'" + row[31] + "','" + row[32] + "',0,0,0) end ";
                if (Convert.ToString(row["LrNumber"]) == "")
                {
                    strDeleteQuery += "  if not exists(Select * from BiltyDetail Where BillCode='" + row[1] + "' and BillNo=" + row[2] + ") begin  "
                                           + " INSERT INTO [dbo].[BiltyDetail]([BillCode],[BillNo],[Date],[PartyName],[TransportName],[StationName],[LrNo],[LrDate],[PvtMarka],[InsertStatus],[UpdateStatus]) VALUES "
                                           + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["BillDate"] + "','" + row["SalesParty"] + "','" + row["Transport"] + "','" + row["Station"] + "','','" + row["LrDate"] + "','" + row["Marka"] + "',1,0) end ";
                }
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from SMSReport  ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " Insert into SMSReport Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "'," + row[0] + ",0,0) ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from Station Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Station Where StationName='" + row[1] + "') begin "
                              + " Insert into Station Values('" + row[1] + "','" + row[2] + "',0,0)  end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from SupplierMaster Where InsertStatus=1 ", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from SupplierMaster Where Name='" + row[1] + "') begin "
                             + " Insert into SupplierMaster([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[Other]) "
                             + " Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "','" + row[10] + "','" + row[11] + "','" + row[12] + "','" + row[13] + "','" + row[14] + "','" + row[15] + "', "
                             + " '" + row[16] + "','" + row[17] + "','" + row[18] + "','" + row[19] + "','" + row[20] + "','" + row[21] + "','" + row[22] + "','" + row[23] + "','" + row[24] + "','" + row[25] + "','" + row[26] + "','" + row[27] + "','" + row[28] + "','" + row[29] + "','" + row[30] + "','" + row[31] + "','" + row[32] + "','" + row[33] + "','" + row[34] + "',1,0,'" + row[37] + "','" + row[38] + "','" + row[39] + "','" + row[40] + "','" + row[41] + "','" + row[42] + "') "
                             + " Insert into BalanceAmount values('" + row[22] + "' ,'" + row[1] + "' ,'OPENING' ,'" + row[5] + "' ,'' ,'" + row[4] + "','','',0,'False','',0,'" + row[33] + "','',0,1,0)  end ";
            }

            table = new DataTable();
            adap = new SqlDataAdapter("Select * from Transport Where InsertStatus=1", MainPage.con);
            adap.Fill(table);
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Transport Where TransportName='" + row[1] + "') begin "
                             + " Insert into Transport Values('" + row[1] + "','" + row[2] + "','" + row[3] + "','" + row[4] + "','" + row[5] + "','" + row[6] + "','" + row[7] + "','" + row[8] + "','" + row[9] + "',0,0) end";
            }

            string strMaxQuery = "Select ISNULL(Max(VoucherNo),0)CashVNo,(Select ISNULL(Max(VoucherNo),0) from BalanceAmount Where VoucherCode in (Select BankVCode from CompanySetting))BankVNo,(Select ISNULL(Max(VoucherNo),0) from JournalAccount)JournalVNo,(Select ISNULL(Max(ReceiptNo),0) from GoodsReceive)ReceiptNo,(Select ISNULL(Max(BillNo),0) from SalesRecord) SaleBillNo ,(Select ISNULL(Max(BillNo),0) from PurchaseRecord)PBillNo,(Select ISNULL(Max(FNumber),0) from ForwardingRecord)FNumber,(Select ISNULL(Max(GRNo),0) from GRRecords)GRNo, (Select ISNULL(Max(SNo),0) from CourierRegister) SNo from BalanceAmount Where VoucherCode in (Select CashVCode from CompanySetting) Union All Select CashVNo,BankVNo,JournalVNo,GoodsReceiveNo,SaleBillNo,PurchaseBillNo,ForwardingNo,GRBillNo,CourierSNo from MaxSerialNo";

            table = new DataTable();
            adap = new SqlDataAdapter(strMaxQuery, MainPage.con);
            adap.Fill(table);
            strDeleteQuery += DeleteAllClearDatafromTable(table);
            #endregion

            return strQuery;
        }

        public static string GetAllInsertedRecordForServer(string strFileQuery, ref string strDeleteQuery)
        {
            string strQuery = "";
            DataSet ds = new DataSet();
            DataTable table = null;
            #region Insert New Record

            string strEncript = "";
            if (strFileQuery != "")
            {
                strEncript = Convert.ToBase64String(Encoding.Unicode.GetBytes(strFileQuery));
                strQuery += " Insert into UpdateDataTable(UpdateQuery) Values('" + strEncript + "') ";
                strFileQuery = "";
            }
            string strSelectQuery = "Select * from BiltyDetail Where LrNo!='' Select ReceiptCode,ReceiptNo,OrderNo,OrderDate,UpdatedBy from GoodsReceive Where OrderNo!='' and OrderNo!='0' and SaleBill='Clear' and InsertStatus=0 and UpdateStatus=1 Select Name,Other from SupplierMaster Where InsertStatus=0 and UpdateStatus=1  Select * from AddressBook Where InsertStatus=1 Select * from BalanceAmount Where  VoucherCode!=''  Select * from CartoneSize Where InsertStatus=1  Select * from CartoneType Where InsertStatus=1  Select * from Category Where InsertStatus=1  Select * from CostCentreAccount   Select * from CostMaster Where InsertStatus=1  Select * from CourierMaster Where InsertStatus=1 Select * from CourierRegister  Select * from CourierRegisterIn  Select * from ForwardingEntry  Select * from ForwardingRecord  Select * from GoodsReceive Where SaleBill='Clear'  "
                                           + " Select * from GoodsReturned Where  Status='Clear' Select * from GRRecords  Select * from Items Where InsertStatus=1  Select * from JournalAccount Select * from Marketer Where InsertStatus=1 Select * from OrderBooking Where  Status='Clear' Select * from PurchaseRecord  Select * from SalesEntry   Select * from SalesRecord  Select * from SMSReport  Select * from Station Where InsertStatus=1 Select * from SupplierMaster Where InsertStatus=1 Select * from Transport Where InsertStatus=1  Select * from FormTypeMaster Select * from EmailDetails Where InsertStatus=1 Select * from OnAccountParty Where InsertStatus=1 Select * from OnAccountSalesRecord Where InsertStatus=1 Select * from RoadPermit Where InsertStatus=1"
                                           + " Select ISNULL(Max(VoucherNo),0)CashVNo,(Select ISNULL(Max(VoucherNo),0) from BalanceAmount Where VoucherCode in (Select BankVCode from CompanySetting))BankVNo,(Select ISNULL(Max(VoucherNo),0) from JournalAccount)JournalVNo,(Select ISNULL(Max(ReceiptNo),0) from GoodsReceive)ReceiptNo,(Select ISNULL(Max(BillNo),0) from SalesRecord) SaleBillNo ,(Select ISNULL(Max(BillNo),0) from PurchaseRecord)PBillNo,(Select ISNULL(Max(FNumber),0) from ForwardingRecord)FNumber,(Select ISNULL(Max(GRNo),0) from GRRecords)GRNo, (Select ISNULL(Max(SNo),0) from CourierRegister) SNo from BalanceAmount Where VoucherCode in (Select CashVCode from CompanySetting) Union All Select CashVNo,BankVNo,JournalVNo,GoodsReceiveNo,SaleBillNo,PurchaseBillNo,ForwardingNo,GRBillNo,CourierSNo from MaxSerialNo ";

            SqlDataAdapter adap = new SqlDataAdapter(strSelectQuery, MainPage.con);
            adap.Fill(ds);
            table = ds.Tables[0];

            foreach (DataRow row in table.Rows)
            {
                strFileQuery += " Update SalesRecord Set Transport='" + row["TransportName"] + "',Station='" + row["StationName"] + "',Marka='" + row["PvtMarka"] + "',LrNumber='" + row["LrNo"] + "',LrDate='" + row["LrDate"] + "',UpdateStatus=1  Where BillCode='" + row["BillCode"] + "' and BillNo='" + row["BillNo"] + "' ";
            }

            table = ds.Tables[1];
            foreach (DataRow row in table.Rows)
            {
                strFileQuery += " Update GoodsReceive Set OrderNo='" + row["OrderNo"] + "' ,OrderDate='" + row["OrderDate"] + "',UpdatedBy='" + row["UpdatedBy"] + "' Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo=" + row["ReceiptNo"] + " ";
            }

            if (strFileQuery != "")
            {
                strEncript = Convert.ToBase64String(Encoding.Unicode.GetBytes(strFileQuery));
                strQuery += " Insert into UpdateDataTable(UpdateQuery) Values('" + strEncript + "') ";
                strFileQuery = "";
            }

            table = ds.Tables[2];
            foreach (DataRow row in table.Rows)
            {
                strFileQuery += " Update SupplierMaster Set Other='" + row["Other"] + "' Where Name='" + row["Name"] + "' ";
            }

            if (strFileQuery != "")
            {
                strEncript = Convert.ToBase64String(Encoding.Unicode.GetBytes(strFileQuery));
                strQuery += " Insert into UpdateDataTable(UpdateQuery) Values('" + strEncript + "') ";
                strFileQuery = "";
            }

            table = ds.Tables[3];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from AddressBook Where Name='" + row["Name"] + "') begin "
                                 + " Insert into AddressBook ([Name],[NickName],[GroupName],[MobileNo],[PhoneNoCode],[PhoneNo],[Address],[PinCode],[City],[State],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["Name"] + "','" + row["NickName"] + "','" + row["GroupName"] + "','" + row["MobileNo"] + "','" + row["PhoneNoCode"] + "','" + row["PhoneNo"] + "','" + row["Address"] + "','" + row["PinCode"] + "','" + row["City"] + "','" + row["State"] + "',0,0) end ";
            }

            table = ds.Tables[4];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) Values "
                              + " ('" + row["Date"] + "','" + row["PartyName"] + "','" + row["AccountStatus"] + "','" + row["Status"] + "','" + row["Description"] + "','" + row["Amount"] + "','" + row["AmountStatus"] + "','" + row["FinalAmount"] + "','" + row["JournalID"] + "','False','" + row["VoucherCode"] + "','" + row["VoucherNo"] + "','" + row["UserName"] + "','" + row["UpdatedBy"] + "'," + row["BalanceID"] + ",0,0)";

            }

            table = ds.Tables[5];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CartoneSize Where CSize='" + row["CSize"] + "') begin "
                              + " Insert into CartoneSize ([CSize],[PackingAmt],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["CSize"] + "','" + row["PackingAmt"] + "','" + row["Date"] + "',0,0) end ";

            }

            table = ds.Tables[6];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CartoneType Where Cartone='" + row["Cartone"] + "') begin "
                              + " Insert into CartoneType ([Cartone],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["Cartone"] + "','" + row["Date"] + "',0,0)  end ";

            }

            table = ds.Tables[7];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Category Where CategoryName='" + row["CategoryName"] + "') begin "
                              + " Insert into Category ([CategoryName],[DiscountDr],[DiscountCr],[InsertStatus],[UpdateStatus]) Values ('" + row["CategoryName"] + "','" + row["DiscountDr"] + "','" + row["DiscountCr"] + "',0,0)  end ";

            }

            table = ds.Tables[8];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CostCentreAccount Where VoucherCode='" + row["VoucherCode"] + "' and BalanceID='" + row["BalanceID"] + "') begin "
                        + " Insert into CostCentreAccount ([VoucherCode],[BalanceID],[AccountName],[CostType],[Description],[Amount],[Status],[Date],[RemoteCode],[InsertStatus],[UpdateStatus]) Values "
                        + " ('" + row["VoucherCode"] + "','" + row["BalanceID"] + "','" + row["AccountName"] + "','" + row["CostType"] + "','" + row["Description"] + "','" + row["Amount"] + "','" + row["Status"] + "','" + row["Date"] + "','" + row["ID"] + "',0,0) end ";
            }

            table = ds.Tables[9];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CostMaster Where CostType='" + row["CostType"] + "') begin "
                               + " Insert into CostMaster ([CostType],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["CostType"] + "','" + row["Date"] + "',1,0) end  ";
            }

            table = ds.Tables[10];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CourierMaster Where CourierName='" + row["CourierName"] + "') begin "
                                 + " Insert into CourierMaster ([CourierName],[MobileNo],[Address],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values('" + row["CourierName"] + "','" + row["MobileNo"] + "','" + row["Address"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }

            table = ds.Tables[11];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CourierRegister Where SNo=" + row["SNo"] + " and SerialCode='" + row["SerialCode"] + "' and SCode='" + row["SCode"] + "') begin "
                                + " Insert into CourierRegister ([SNo],[SerialCode],[CourierNo],[CourierName],[DocType],[SaleBillCode],[SaleBillNo],[SalesParty],[Station],[Remark],[Date],[SCode],[UserName],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                                 + " (" + row["SNo"] + ",'" + row["SerialCode"] + "','" + row["CourierNo"] + "','" + row["CourierName"] + "','" + row["DocType"] + "','" + row["SaleBillCode"] + "','" + row["SaleBillNo"] + "','" + row["SalesParty"] + "','" + row["Station"] + "','" + row["Remark"] + "','" + row["Date"] + "','" + row["SCode"] + "','" + row["UserName"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }

            table = ds.Tables[12];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from CourierRegisterIn Where CourierCode='" + row["CourierCode"] + "' and SNo='" + row["SNo"] + "' and SCode='" + row["SCode"] + "') begin "
                               + " Insert into CourierRegisterIn ([CourierCode],[SNo],[SCode],[CourierNo],[CourierName],[Date],[DocType],[PartyName],[Station],[Remark],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                               + " ('" + row["CourierCode"] + "'," + row["SNo"] + ",'" + row["SCode"] + "','" + row["CourierNo"] + "','" + row["CourierName"] + "','" + row["Date"] + "','" + row["DocType"] + "','" + row["PartyName"] + "','" + row["Station"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }

            table = ds.Tables[13];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from ForwardingEntry Where FCode='" + row["FCode"] + "' and FNumber=" + row["FNumber"] + "  and Item='" + row["Item"] + "') begin "
                               + " Insert into ForwardingEntry ([FCode],[FNumber],[Item],[Rate],[Pieces],[Amount],[InsertStatus],[UpdateStatus]) Values('" + row["FCode"] + "'," + row["FNumber"] + ",'" + row["Item"] + "','" + row["Rate"] + "','" + row["Pieces"] + "','" + row["Amount"] + "',0,0) end ";
            }

            table = ds.Tables[14];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from ForwardingRecord Where FCode='" + row["FCode"] + "' and FNumber=" + row["FNumber"] + ") begin "
                                 + " Insert into ForwardingRecord ([FCode],[FNumber],[SaleBillNo],[Buyer],[MS],[TINNumber],[Transport],[Station],[VATPer],[AddedPcs],[PendingPcs],[SaleAmt],[SaleAmountAfterVAT],[PvtMarka],[Date],[NetPercentage],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["FCode"] + "'," + row["FNumber"] + ",'" + row["SaleBillNo"] + "','" + row["Buyer"] + "','" + row["MS"] + "','" + row["TINNumber"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["VATPer"] + "','" + row["AddedPcs"] + "','" + row["PendingPcs"] + "','" + row["SaleAmt"] + "','" + row["SaleAmountAfterVAT"] + "','" + row["PvtMarka"] + "','" + row["Date"] + "','" + row["NetPercentage"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }

            table = ds.Tables[15];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from GoodsReceive Where ReceiptCode='" + row["ReceiptCode"] + "' and ReceiptNo='" + row["ReceiptNo"] + "' ) begin "
                                  + " Insert into GoodsReceive ([ReceiptCode],[ReceiptNo],[OrderNo],[OrderDate],[SalesParty],[SubSalesParty],[PurchaseParty],[ReceivingDate],[Pieces],[Quantity],[Amount],[Freight],[Tax],[Item],[Packing],[Personal],[SaleBill],[PackingStatus],[CreatedBy],[PrintedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Box],[Remark]) Values "
                                  + " ('" + row["ReceiptCode"] + "','" + row["ReceiptNo"] + "','" + row["OrderNo"] + "','" + row["OrderDate"] + "','" + row["SalesParty"] + "','" + row["SubSalesParty"] + "','" + row["PurchaseParty"] + "','" + row["ReceivingDate"] + "','" + row["Pieces"] + "','" + row["Quantity"] + "','" + row["Amount"] + "','" + row["Freight"] + "','" + row["Tax"] + "','" + row["Item"] + "','" + row["Packing"] + "','" + row["Personal"] + "','" + row["SaleBill"] + "','" + row["PackingStatus"] + "','" + row["CreatedBy"] + "','" + row["PrintedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["Box"] + "','" + row["Remark"] + "') end ";
            }

            table = ds.Tables[16];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from GoodsReturned Where SalesBill='" + row["SalesBill"] + "') begin "
                                 + " Insert into GoodsReturned ([SalesParty],[SubParty],[SalesBill],[SalesFrom],[SerialNo],[PartyName],[Pieces],[Item],[Status],[AdjustedSaleBillNumber],[Date],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["SalesParty"] + "','" + row["SubParty"] + "','" + row["SalesBill"] + "','" + row["SalesFrom"] + "','" + row["SerialNo"] + "','" + row["PartyName"] + "','" + row["Pieces"] + "','" + row["Item"] + "','" + row["Status"] + "','" + row["AdjustedSaleBillNumber"] + "','" + row["Date"] + "',0,0) end ";
            }

            table = ds.Tables[17];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from GRRecords Where GRCode='" + row["GRCode"] + "' and GRNo=" + row["GRNo"] + " and PurchaseParty='" + row["PurchaseParty"] + "') begin "
                                  + " Insert into GRRecords ([GRCode],[GRNo],[SaleParty],[SubParty],[Date],[Station],[PurchaseParty],[Pcs],[Item],[Amount],[Remark],[TotalPcs],[TotalAmount],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                                  + " ('" + row["GRCode"] + "','" + row["GRNo"] + "','" + row["SaleParty"] + "','" + row["SubParty"] + "','" + row["Date"] + "','" + row["Station"] + "','" + row["PurchaseParty"] + "','" + row["Pcs"] + "','" + row["Item"] + "','" + row["Amount"] + "','" + row["Remark"] + "','" + row["TotalPcs"] + "','" + row["TotalAmount"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }

            table = ds.Tables[18];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Items Where ItemName='" + row["ItemName"] + "') begin "
                                  + " Insert into Items ([ItemName],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["ItemName"] + "','" + row["Date"] + "',0,0)  end ";
            }

            table = ds.Tables[19];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from JournalAccount Where VoucherCode='" + row["VoucherCode"] + "' and VoucherNo=" + row["VoucherNo"] + " ) begin "
                                 + " Insert into JournalAccount ([Date],[DebitParty],[CreditParty],[Description],[Amount],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) Values "
                                 + "  ('" + row["Date"] + "','" + row["DebitParty"] + "','" + row["CreditParty"] + "','" + row["Description"] + "','" + row["Amount"] + "','" + row["VoucherCode"] + "','" + row["VoucherNo"] + "','" + row["UserName"] + "','" + row["UpdatedBy"] + "'," + row["ID"] + ",0,0) end ";
            }

            table = ds.Tables[20];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Marketer Where MarketerName='" + row["MarketerName"] + "' ) begin "
                                 + " Insert into Marketer ([MarketerName],[MobileNoI],[MobileNoII],[EmailID],[Address],[City],[Date],[OrderNoFrom],[OrderNoTo],[InsertStatus],[UpdateStatus]) Values "
                                 + " ('" + row["MarketerName"] + "','" + row["MobileNoI"] + "','" + row["MobileNoII"] + "','" + row["EmailID"] + "','" + row["Address"] + "','" + row["City"] + "','" + row["Date"] + "','" + row["OrderNoFrom"] + "','" + row["OrderNoTo"] + "',0,0) end ";
            }

            table = ds.Tables[21];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from OrderBooking Where OrderCode='" + row["OrderCode"] + "' and OrderNo=" + row["OrderNo"] + " and NumberCode='" + row["NumberCode"] + "') begin "
                                   + " Insert into OrderBooking ([BookingNo],[Marketer],[OrderNo],[P_Party],[S_Party],[Station],[Items],[Pieces],[Quantity],[Amount],[Transport],[Booking],[Marka],[Haste],[Date],[Personal],[Status],[OrderCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[NumberCode],[SerialNo]) Values "
                                   + " ('" + row["BookingNo"] + "','" + row["Marketer"] + "','" + row["OrderNo"] + "','" + row["P_Party"] + "','" + row["S_Party"] + "','" + row["Station"] + "','" + row["Items"] + "','" + row["Pieces"] + "','" + row["Quantity"] + "','" + row["Amount"] + "','" + row["Transport"] + "','" + row["Booking"] + "','" + row["Marka"] + "','" + row["Haste"] + "','" + row["Date"] + "','" + row["Personal"] + "','" + row["Status"] + "','" + row["OrderCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["NumberCode"] + "','" + row["SerialNo"] + "') end ";
            }

            table = ds.Tables[22];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from PurchaseRecord Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                                      + "Insert into PurchaseRecord ([BillCode],[BillNo],[GRSNo],[DueDays],[SupplierName],[SaleBillNo],[SalesParty],[Pieces],[Item],[Discount],[DiscountStatus],[Amount],[Freight],[Tax],[Packing],[FreightDiscount],[TaxDiscount],[PackingDiscount],[NetDiscount],[Remark],[OtherPer],[Others],[GrossAmt],[NetAmt],[BillDate],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SalePartyID],[PurchasePartyID],[TaxLedger],[TaxAmount]) Values "
                                      + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["GRSNo"] + "','" + row["DueDays"] + "','" + row["SupplierName"] + "','" + row["SaleBillNo"] + "','" + row["SalesParty"] + "','" + row["Pieces"] + "','" + row["Item"] + "','" + row["Discount"] + "','" + row["DiscountStatus"] + "','" + row["Amount"] + "','" + row["Freight"] + "','" + row["Tax"] + "','" + row["Packing"] + "','" + row["FreightDiscount"] + "','" + row["TaxDiscount"] + "','" + row["PackingDiscount"] + "','" + row["NetDiscount"] + "','" + row["Remark"] + "','" + row["OtherPer"] + "','" + row["Others"] + "','" + row["GrossAmt"] + "','" + row["NetAmt"] + "','" + row["BillDate"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["SalePartyID"] + "','" + row["PurchasePartyID"] + "','" + row["TaxLedger"] + "'," + row["TaxAmount"] + ") "
                                      + "Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values('" + row["BillDate"] + "','" + row["SupplierName"] + "' ,'PURCHASE A/C' ,'Credit' ,'" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Cr','0','0','False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0,'" + row["PurchasePartyID"] + "')  end ";
            }

            table = ds.Tables[23];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from SalesEntry Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + " and GRSNo='" + row["GRSNo"] + "' ) begin "
                                + " Insert into SalesEntry ([BillCode],[BillNo],[SalesFrom],[GRSNo],[SupplierName],[Pieces],[Items],[Discount],[DiscountStatus],[SNDhara],[Amount],[Packing],[Freight],[Tax],[TotalAmt],[PBill],[RemPcs],[BillDate],[PurchaseBill],[Personal],[InsertStatus],[UpdateStatus]) Values "
                                + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["SalesFrom"] + "','" + row["GRSNo"] + "','" + row["SupplierName"] + "','" + row["Pieces"] + "','" + row["Items"] + "','" + row["Discount"] + "','" + row["DiscountStatus"] + "','" + row["SNDhara"] + "','" + row["Amount"] + "','" + row["Packing"] + "','" + row["Freight"] + "','" + row["Tax"] + "','" + row["TotalAmt"] + "','" + row["PBill"] + "','" + row["RemPcs"] + "','" + row["BillDate"] + "','" + row["PurchaseBill"] + "','" + row["Personal"] + "',0,0) end ";
            }

            table = ds.Tables[24];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from SalesRecord Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin "
                                   + " Insert into SalesRecord ([BillCode],[BillNo],[SalesParty],[SubParty],[Transport],[Station],[GoodsType],[DueDays],[PackerName],[PackingDate],[CartoneType],[CartoneSize],[NetAddLs],[LrNumber],[LrDate],[Parcel],[Remark],[OtherPer],[Others],[OtherPacking],[Postage],[TotalPcs],[GrossAmt],[FinalAmt],[NetAmt],[BillDate],[ForwardingChallan],[Marka],[OtherPerText],[OtherText],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                                   + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["SalesParty"] + "','" + row["SubParty"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["GoodsType"] + "','" + row["DueDays"] + "','" + row["PackerName"] + "','" + row["PackingDate"] + "','" + row["CartoneType"] + "','" + row["CartoneSize"] + "','" + row["NetAddLs"] + "','" + row["LrNumber"] + "','" + row["LrDate"] + "','" + row["Parcel"] + "','" + row["Remark"] + "','" + row["OtherPer"] + "','" + row["Others"] + "','" + row["Others"] + "','" + row["Postage"] + "','" + row["TotalPcs"] + "','" + row["GrossAmt"] + "','" + row["FinalAmt"] + "','" + row["NetAmt"] + "','" + row["BillDate"] + "','" + row["ForwardingChallan"] + "','" + row["Marka"] + "','" + row["OtherPerText"] + "','" + row["OtherText"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0)  "
                                   + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) values "
                                   + " ('" + row["BillDate"] + "' ,'" + row["SalesParty"] + "' ,'SALES A/C' ,'Debit' , '" + row["BillCode"] + " " + row["BillNo"] + "' ,'" + row["NetAmt"] + "','Dr','" + row["FinalAmt"] + "',0,'False','',0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,0) end ";

                if (Convert.ToString(row["LrNumber"]) == "")
                {
                    strDeleteQuery += "  if not exists(Select * from BiltyDetail Where BillCode='" + row["BillCode"] + "' and BillNo=" + row["BillNo"] + ") begin  "
                                           + " INSERT INTO [dbo].[BiltyDetail]([BillCode],[BillNo],[Date],[PartyName],[TransportName],[StationName],[LrNo],[LrDate],[PvtMarka],[InsertStatus],[UpdateStatus]) VALUES "
                                           + " ('" + row["BillCode"] + "','" + row["BillNo"] + "','" + row["BillDate"] + "','" + row["SalesParty"] + "','" + row["Transport"] + "','" + row["Station"] + "','','" + row["LrDate"] + "','" + row["Marka"] + "',1,0) end ";
                }
            }

            table = ds.Tables[25];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " Insert into SMSReport ([SenderID],[MobileNo],[TextMessage],[Status],[Date],[SendBy],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) Values "
                                   + " ('" + row["SenderID"] + "','" + row["MobileNo"] + "','" + row["TextMessage"] + "','" + row["Status"] + "','" + row["Date"] + "','" + row["SendBy"] + "','" + row["UpdatedBy"] + "'," + row["ID"] + ",0,0) ";

            }

            table = ds.Tables[26];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Station Where StationName='" + row["StationName"] + "') begin "
                                  + " Insert into Station ([StationName],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["StationName"] + "','" + row["Date"] + "',0,0)  end ";
            }

            table = ds.Tables[27];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from SupplierMaster Where AreaCode='" + row["AreaCode"] + "' and AccountNo='" + row["AccountNo"] + "') begin "
                                  + " Insert into SupplierMaster([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[Other],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[SaleIncentive]) "
                                  + " Values('" + row["Name"] + "','" + row["Category"] + "','" + row["GroupName"] + "','" + row["OpeningBal"] + "','" + row["Status"] + "','" + row["Address"] + "','" + row["State"] + "','" + row["PINCode"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["BookingStation"] + "','" + row["TINNumber"] + "','" + row["NormalDhara"] + "','" + row["SNDhara"] + "','" + row["ContactPerson"] + "', '" + row["PhoneNo"] + "','" + row["MobileNo"] + "','" + row["PvtMarka"] + "',"
                                  + " '" + row["Reference"] + "','" + row["EmailID"] + "','" + row["DueDays"] + "','" + row["Date"] + "','" + row["CFormApply"] + "','" + row["AmountLimit"] + "','" + row["ExtendedAmt"] + "','" + row["HasteSale"] + "','" + row["PermanentAddress"] + "','" + row["SecondTransport"] + "','" + row["ThirdTransport"] + "','" + row["FourthTransport"] + "','" + row["Remark"] + "','" + row["CDDays"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["Postage"] + "','" + row["TransactionLock"] + "','" + row["BlackList"] + "','" + row["BlackListReason"] + "','" + row["GroupII"] + "','" + row["Other"] + "','" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["CardNumber"] + "','" + row["CardStatus"] + "','" + row["SaleIncentive"] + "') "
                                  + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) values('" + row["Date"] + "' ,'" + row["AreaCode"] + "" + row["AccountNo"] + "' ,'OPENING' ,'" + row["Status"] + "' ,'' ,'" + row["OpeningBal"] + "','','',0,'False','',0,'" + row["CreatedBy"] + "','',0,0,0) end ";
            }

            table = ds.Tables[28];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from Transport Where TransportName='" + row["TransportName"] + "') begin "
                                  + " Insert into Transport ([TransportName],[ContactPersonI],[ContactPersonII],[PhoneNoI],[PhoneNoII],[MobileNo],[City],[Address],[Date],[InsertStatus],[UpdateStatus]) Values "
                                  + " ('" + row["TransportName"] + "','" + row["ContactPersonI"] + "','" + row["ContactPersonII"] + "','" + row["PhoneNoI"] + "','" + row["PhoneNoII"] + "','" + row["MobileNo"] + "','" + row["City"] + "','" + row["Address"] + "','" + row["Date"] + "',0,0) end ";
            }

            table = ds.Tables[29];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from FormTypeMaster Where FormType='" + row["FormType"] + "') begin "
                                + " Insert into FormTypeMaster ([FormType],[Date],[InsertStatus],[UpdateStatus]) Values('" + row["FormType"] + "','" + row["Date"] + "',0,0) end  ";
            }

            table = ds.Tables[30];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " INSERT INTO [dbo].[EmailDetails] ([Date],[EmailID],[Subject],[MessageBody],[FilePath],[Status],[EmailType],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                              + " ('" + row["Date"] + "','" + row["EmailID"] + "','" + row["Subject"] + "','" + row["MessageBody"] + "','" + row["FilePath"] + "','" + row["Status"] + "','" + row["EmailType"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) ";
            }

            table = ds.Tables[31];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists (Select * from OnAccountParty Where PartyName='" + row["PartyName"] + "' and OnAccountName='" + row["OnAccountName"] + "' and SubPartyName='" + row["SubPartyName"] + "' ) begin "
                               + "  Insert into OnAccountParty ([GroupName],[PartyName],[SubPartyName],[OnAccountName],[TINNo],[Address],[PinCode],[Station],[State],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                               + " ('" + row["GroupName"] + "','" + row["PartyName"] + "','" + row["SubPartyName"] + "','" + row["OnAccountName"] + "','" + row["TINNo"] + "','" + row["Address"] + "','" + row["PinCode"] + "','" + row["Station"] + "','" + row["State"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }

            table = ds.Tables[32];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists (Select * from OnAccountSalesRecord Where SaleBillCode='" + row["SaleBillCode"] + "' and BillNo='" + row["BillNo"] + "') begin "
                            + "  Insert into OnAccountSalesRecord ([BillNo],[BillDate],[SaleBillCode],[SaleBillNo],[SalesParty],[SubParty],[OnaccountName],[RoadPermitNo],[Transport],[Station],[TINNo],[LrNo],[LrDate],[Date],[BookNo],[PBillNo],[PurchaseParty],[Item],[Qty],[Amount],[TaxPer],[Tax],[OtherAmt],[FinalAmt],[Cash],[FormRequired],[FormType],[CreatedBy],[UpdatedBy],[ReceiveDate],[ReceiveAmount],[ChqDate],[ChqNo],[ChqAmt],[BankName],[Status],[CFormStatus],[InsertStatus],[UpdateStatus]) Values "
                            + " ('" + row["BillNo"] + "','" + row["BillDate"] + "','" + row["SaleBillCode"] + "','" + row["SaleBillNo"] + "','" + row["SalesParty"] + "','" + row["SubParty"] + "','" + row["OnaccountName"] + "','" + row["RoadPermitNo"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["TINNo"] + "','" + row["LrNo"] + "','" + row["LrDate"] + "','" + row["Date"] + "','" + row["BookNo"] + "','" + row["PBillNo"] + "','" + row["PurchaseParty"] + "','" + row["Item"] + "','" + row["Qty"] + "',"
                            + " '" + row["Amount"] + "','" + row["TaxPer"] + "','" + row["Tax"] + "','" + row["OtherAmt"] + "','" + row["FinalAmt"] + "','" + row["Cash"] + "','" + row["FormRequired"] + "','" + row["FormType"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["ReceiveDate"] + "','" + row["ReceiveAmount"] + "','" + row["ChqDate"] + "','" + row["ChqNo"] + "','" + row["ChqAmt"] + "','" + row["BankName"] + "','" + row["Status"] + "','" + row["CFormStatus"] + "',0,0) end ";
            }

            table = ds.Tables[33];
            foreach (DataRow row in table.Rows)
            {
                strQuery += " if not exists(Select * from RoadPermit Where OnAccountName='" + row["OnAccountName"] + "' and RoadPermitNo='" + row["RoadPermitNo"] + "') begin "
                              + " Insert into RoadPermit ([SalesPartyName],[SubPartyName],[OnAccountName],[RoadPermitNo],[ExpiryDate],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                              + " ('" + row["SalesPartyName"] + "','" + row["SubPartyName"] + "','" + row["OnAccountName"] + "','" + row["RoadPermitNo"] + "','" + row["ExpiryDate"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
            }
            table = ds.Tables[34];
            strDeleteQuery += DeleteAllClearDatafromTable(table);
            #endregion

            return strQuery;
        }

        #endregion

        public static string SetStatusOnTable()
        {
            string strQuery = "";
            strQuery += " Update AddressBook Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update BalanceAmount Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CartoneSize Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CartoneType Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update Category Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CFormReceipt Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update Company Set UpdateStatus=0 Where UpdateStatus=1 ";
            strQuery += " Update CompanySetting Set UpdateStatus=0 Where UpdateStatus=1 ";
            strQuery += " Update CostCentreAccount Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CostMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CourierMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CourierRegister Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update CourierRegisterIn Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update FormTypeMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update ForwardingEntry Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update ForwardingRecord Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update GoodsReceive Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update GoodsReturned Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update GRRecords Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update Items Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update JournalAccount Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update LedgerAccount Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update Marketer Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update OnAccountParty Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update OnAccountSalesRecord Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update OrderBooking Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update RoadPermit Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update PurchaseRecord Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update SalesEntry Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update SalesRecord Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update SMSReport Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1";
            strQuery += " Update Station Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update SupplierMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update Transport Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update EmailDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update UnitMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update GoodsReceiveDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update ItemGroupMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update TaxCategory Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update SaleTypeMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 ";
            strQuery += " Update GSTDetails Set InsertStatus=0 Where InsertStatus=1 ";
            strQuery += " Update [JournalVoucherDetails] Set InsertStatus=0 Where InsertStatus=1 "
                     + " UPDATE SaleReturn Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " UPDATE SaleReturnDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1  "
                     + " UPDATE PurchaseReturn Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1  "
                     + " UPDATE PurchaseReturnDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1  "
                     + " Update CompanyDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update CompanySetting Set UpdateStatus=0 Where UpdateStatus=1 "
                     + " Update EditTrailDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update SaleServiceBook Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update SaleServiceDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update SalesBook Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update SalesBookSecondary Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update PurchaseBook Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update PurchaseBookSecondary Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update SupplierOtherDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update SupplierBankDetails Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " Update SupplierBrandDetails Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1"
                     + " Update ItemSecondary Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update StockMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update Scheme_SupplierDetails Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 OR UpdateStatus=1 "
                     + " Update Scheme_CustomerDetails Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " Update ChequeDetails Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " Update [TCSDetails] Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " Update [dbo].[BankGuarantee] Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " Update [dbo].[StockTransfer] Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " Update [dbo].[StockTransferSecondary] Set InsertStatus = 0, UpdateStatus = 0 Where InsertStatus = 1 OR UpdateStatus = 1 "
                     + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                     + "('SENDTOINTERNET','" + MainPage.strBranchCode + "',0,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),0,'" + MainPage.strLoginName + "',1,0,'SENT') ";


            return strQuery;
        }

        public static string DeleteAllClearDatafromTable(DataTable table)
        {
            string strQuery = "";

            strQuery += " Update AddressBook Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update CartoneSize Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update CartoneType Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update Category Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update CostMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update CourierMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update Items Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update GoodsReceive Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update Marketer Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update Station Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Update SupplierMaster Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1  "
                         + " Update Transport Set InsertStatus=0,UpdateStatus=0 Where InsertStatus=1 or UpdateStatus=1 "
                         + " Delete from BalanceAmount Where AccountStatus!='OPENING' "
                         + " Delete from CostCentreAccount  "
                         + " Delete from CourierRegister "
                         + " Delete from CourierRegisterIn "
                         + " Delete from ForwardingEntry "
                         + " Delete from ForwardingRecord "
                         + " Delete from GoodsReceive Where OrderNo!='' and OrderNo!='0' and SaleBill='Clear' "
                         + " Delete from GoodsReturned Where Status='Clear' "
                         + " Delete from GRRecords  "
                         + " Delete from JournalAccount "
                         + " Delete from LedgerAccount Where Description not in (Select Name from SupplierMaster) "
                         + " Delete from OrderBooking Where Status='Clear' "
                         + " Delete from PurchaseRecord "
                         + " Delete from SalesEntry  "
                         + " Delete from SalesRecord "
                         + " Delete from SMSReport "
                         + " Delete from BiltyDetail Where LrNo!='' "
                         + " Delete from EmailDetails  ";

            try
            {
                DataRow row = table.Rows[0], row1 = table.Rows[1];
                string strSubQuery = "";
                if (Convert.ToDouble(row["CashVNo"]) > Convert.ToDouble(row1["CashVNo"]))
                {
                    strSubQuery = " CashVNo='" + row["CashVNo"] + "' ";
                }
                if (Convert.ToDouble(row["BankVNo"]) > Convert.ToDouble(row1["BankVNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " BankVNo='" + row["BankVNo"] + "' ";
                }
                if (Convert.ToDouble(row["JournalVNo"]) > Convert.ToDouble(row1["JournalVNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " JournalVNo='" + row["JournalVNo"] + "' ";
                }

                if (Convert.ToDouble(row["ReceiptNo"]) > Convert.ToDouble(row1["ReceiptNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " GoodsReceiveNo='" + row["ReceiptNo"] + "' ";
                }

                if (Convert.ToDouble(row["SaleBillNo"]) > Convert.ToDouble(row1["SaleBillNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " SaleBillNo='" + row["SaleBillNo"] + "' ";
                }

                if (Convert.ToDouble(row["PBillNo"]) > Convert.ToDouble(row1["PBillNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " PurchaseBillNo='" + row["PBillNo"] + "' ";
                }
                if (Convert.ToDouble(row["FNumber"]) > Convert.ToDouble(row1["FNumber"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " ForwardingNo='" + row["FNumber"] + "' ";
                }
                if (Convert.ToDouble(row["GRNo"]) > Convert.ToDouble(row1["GRNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " GRBillNo='" + row["GRNo"] + "' ";
                }
                if (Convert.ToDouble(row["SNo"]) > Convert.ToDouble(row1["SNo"]))
                {
                    if (strSubQuery != "")
                    {
                        strSubQuery += " , ";
                    }
                    strSubQuery += " CourierSNo='" + row["SNo"] + "' ";
                }

                if (strSubQuery != "")
                {
                    strQuery += " Update  MaxSerialNo Set  " + strSubQuery;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! Delete Query : " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                strQuery = "";
            }
            return strQuery;
        }


        #region Get Send Data Via FTP
                
        public void DeleteSaleBillFile(string strFileName, string strBranchCode)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FtpWebRequest requestFileDownload = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/SALEBILL/" + strBranchCode + "/" + strFileName)) as FtpWebRequest;
                    requestFileDownload.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);
                    requestFileDownload.Method = WebRequestMethods.Ftp.DeleteFile;
                    FtpWebResponse response = (FtpWebResponse)requestFileDownload.GetResponse();
                }
            }
            catch { }
        }

        public bool UploadSaleBillPDFFile(string strPath, string strFileName, string strBranchCode)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FileInfo uploadFile = new FileInfo(strPath);

                    FtpWebRequest request = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/SALEBILL/" + strBranchCode + "/" + strFileName)) as FtpWebRequest;
                    request.UseBinary = true;
                    request.KeepAlive = false;
                    request.Method = WebRequestMethods.Ftp.UploadFile;
                    request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                    FileStream file = File.OpenRead(strPath);
                    int length = 2048;
                    byte[] buffer = new byte[length];
                    int bytesRead = 0;
                    int totalLength = Convert.ToInt32(file.Length);
                    int increment = totalLength / 2048;
                    Stream ftpStream = request.GetRequestStream();// response.GetResponseStream();
                    do
                    {
                        bytesRead = file.Read(buffer, 0, length);
                        ftpStream.Write(buffer, 0, bytesRead);
                    }
                    while (bytesRead != 0);
                    file.Close();
                    ftpStream.Close();
                }                
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return false;

        }

        public bool UploadBillPDFFile(string strPath, string strFileName, string strBranchCode,string strType)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FileInfo uploadFile = new FileInfo(strPath);
                    string strFile = MainPage.strFTPPath + "/" + strType + "/" + strBranchCode + "/" + strFileName;
                    FtpWebRequest request = FtpWebRequest.Create(new Uri(strFile)) as FtpWebRequest;
                    request.UseBinary = true;
                    request.KeepAlive = false;
                    request.Method = WebRequestMethods.Ftp.UploadFile;
                    request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                    FileStream file = File.OpenRead(strPath);
                    int length = 2048;
                    byte[] buffer = new byte[length];
                    int bytesRead = 0;
                    int totalLength = Convert.ToInt32(file.Length);
                    int increment = totalLength / 2048;
                    Stream ftpStream = request.GetRequestStream();// response.GetResponseStream();
                    do
                    {
                        bytesRead = file.Read(buffer, 0, length);
                        ftpStream.Write(buffer, 0, bytesRead);
                    }
                    while (bytesRead != 0);
                    file.Close();
                    ftpStream.Close();
                }
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return false;

        }


        public bool DeleteProfilePic(string strFileName)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FtpWebRequest requestFileDownload = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/ProfilePic/" + "/" + strFileName)) as FtpWebRequest;
                    requestFileDownload.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);
                    requestFileDownload.Method = WebRequestMethods.Ftp.DeleteFile;
                    FtpWebResponse response = (FtpWebResponse)requestFileDownload.GetResponse();
                }
                return true;
            }
            catch(Exception ex) { //MessageBox.Show(ex.Message);
            }
            return false;
        }

        public string SaveProfilePic_Local(string strPath, string strFileName)
        {
            try
            {
                string strNewPath = MainPage.strServerPath + "/ProfilePic";
                if (Directory.Exists(strNewPath))
                    Directory.CreateDirectory(strNewPath);
                strNewPath += "/" + strFileName;
                if (strPath != strNewPath)
                {
                    if (File.Exists(strNewPath))
                        File.Delete(strNewPath);

                    File.Copy(strPath, strNewPath);
                }
                return strNewPath;
            }
            catch (Exception ex)
            {
               // MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return "";
        }

        public bool UploadProfilePic(string strPath, string strFileName)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FileInfo uploadFile = new FileInfo(strPath);

                    FtpWebRequest request = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/ProfilePic/" + strFileName)) as FtpWebRequest;
                    request.UseBinary = true;
                    request.KeepAlive = false;
                    request.Method = WebRequestMethods.Ftp.UploadFile;
                    request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                    FileStream file = File.OpenRead(strPath);
                    int length = 2048;
                    byte[] buffer = new byte[length];
                    int bytesRead = 0;
                    int totalLength = Convert.ToInt32(file.Length);
                    int increment = totalLength / 2048;
                    Stream ftpStream = request.GetRequestStream();// response.GetResponseStream();
                    do
                    {

                        bytesRead = file.Read(buffer, 0, length);
                        ftpStream.Write(buffer, 0, bytesRead);
                    }
                    while (bytesRead != 0);
                    file.Close();
                    ftpStream.Close();
                }
                return true;
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return false;
        }

        public bool UploadWayBillPDFFile(string strPath, string strFileName, string strBranchCode)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FileInfo uploadFile = new FileInfo(strPath);

                    FtpWebRequest request = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/Waybill/" + strBranchCode + "/" + strFileName)) as FtpWebRequest;
                    request.UseBinary = true;
                    request.KeepAlive = false;
                    request.Method = WebRequestMethods.Ftp.UploadFile;
                    request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                    FileStream file = File.OpenRead(strPath);
                    int length = 2048;
                    byte[] buffer = new byte[length];
                    int bytesRead = 0;
                    int totalLength = Convert.ToInt32(file.Length);
                    int increment = totalLength / 2048;
                    Stream ftpStream = request.GetRequestStream();// response.GetResponseStream();
                    do
                    {
                        bytesRead = file.Read(buffer, 0, length);
                        ftpStream.Write(buffer, 0, bytesRead);
                    }
                    while (bytesRead != 0);
                    file.Close();
                    ftpStream.Close();
                }
                return true;
            }
            catch { }
            return false;

        }

        public bool UploadLedgerInterestStatementPDFFile(string strPath, string strFileName, string strCode)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FileInfo uploadFile = new FileInfo(strPath);

                    FtpWebRequest request = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/" + strCode + "/" + strFileName)) as FtpWebRequest;
                    request.UseBinary = true;
                    request.KeepAlive = false;
                    request.Method = WebRequestMethods.Ftp.UploadFile;
                    request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                    FileStream file = File.OpenRead(strPath);
                    int length = 2048;
                    byte[] buffer = new byte[length];
                    int bytesRead = 0;
                    int totalLength = Convert.ToInt32(file.Length);
                    int increment = totalLength / 2048;
                    Stream ftpStream = request.GetRequestStream();// response.GetResponseStream();
                    do
                    {
                        bytesRead = file.Read(buffer, 0, length);
                        ftpStream.Write(buffer, 0, bytesRead);
                    }
                    while (bytesRead != 0);
                    file.Close();
                    ftpStream.Close();
                }
                return true;
            }
            catch { }
            return false;

        }

        public bool UploadImageForWhatsApp(string strPath, string strFileName)
        {
            try
            {
                if (MainPage.strFTPPath != "")
                {
                    FileInfo uploadFile = new FileInfo(strPath);

                    FtpWebRequest request = FtpWebRequest.Create(new Uri(MainPage.strFTPPath + "/images/" + strFileName)) as FtpWebRequest;
                    request.UseBinary = true;
                    request.KeepAlive = false;
                    request.Method = WebRequestMethods.Ftp.UploadFile;
                    request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                    FileStream file = File.OpenRead(strPath);
                    int length = 2048;
                    byte[] buffer = new byte[length];
                    int bytesRead = 0;
                    int totalLength = Convert.ToInt32(file.Length);
                    int increment = totalLength / 2048;
                    Stream ftpStream = request.GetRequestStream();// response.GetResponseStream();
                    do
                    {
                        bytesRead = file.Read(buffer, 0, length);
                        ftpStream.Write(buffer, 0, bytesRead);
                    }
                    while (bytesRead != 0);
                    file.Close();
                    ftpStream.Close();
                }
                return true;
            }
            catch { }
            return false;
        }     

        #endregion

        public static int ExecuteQueryOnNet(string strQuery, string strDataBase)
        {
            int count = 0;
            string strUserName = Convert.ToString(DBConnection.DBCon.LiveDBUserName);
            if (strUserName == "")
                strUserName = strDataBase;

            SqlConnection netCon = new SqlConnection(@"Data Source=" + MainPage.strLiveDataBaseIP + ";Initial Catalog=" + strDataBase + "; User Id=" + strUserName + ";Password=" + MainPage.strLiveDBPassword + ";");
            if (netCon.State == ConnectionState.Closed)
            {
                netCon.Open();
            }
            SqlTransaction transaction = netCon.BeginTransaction();
            try
            {
                SqlCommand netCmd = new SqlCommand(strQuery, netCon, transaction);
                netCmd.CommandTimeout = 100000;
                count = netCmd.ExecuteNonQuery();
                if (count > 0)
                {
                    MainPage.OpenConnection();
                    string str = "select user_access_desc from sys.databases Where name='" + MainPage.con.Database + "' ";
                    netCmd = new SqlCommand(str, MainPage.con);
                    object objValue= netCmd.ExecuteScalar();
                    if (Convert.ToString(objValue) == "SINGLE_USER")
                    {
                        SqlTransaction localTransaction = MainPage.con.BeginTransaction();
                        try
                        {
                            string strStatusQuery = SetStatusOnTable();
                            netCmd = new SqlCommand(strStatusQuery, MainPage.con, localTransaction);
                            netCmd.CommandTimeout = 10000;
                            netCmd.ExecuteNonQuery();
                            transaction.Commit();
                            try
                            {
                                localTransaction.Commit();
                            }
                            catch { ExecuteDataAfterRollBack(strStatusQuery, localTransaction); }
                            SaveExecutedQuery(strQuery);
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Local Query : " + ex.Message, "Error",MessageBoxButtons.OK,MessageBoxIcon.Error);
                            localTransaction.Rollback();
                            transaction.Rollback();
                            count = 0;
                        }
                    }
                    else
                        transaction.Rollback();
                }
            }
            catch (Exception ex)
            {
                transaction.Rollback();
                MessageBox.Show("Sorry ! "+ex.Message, "Error",MessageBoxButtons.OK,MessageBoxIcon.Error);
                CreateInternetQuery(strQuery, "");
            }
            return count;
        }

        private static void ExecuteDataAfterRollBack(string strQuery,SqlTransaction _trans)
        {
            try
            {
                try
                {
                    _trans.Rollback();
                }
                catch { }
                if (MainPage.con.State == ConnectionState.Closed)
                    MainPage.con.Open();

                SqlCommand netCmd = new SqlCommand(strQuery, MainPage.con);
                netCmd.CommandTimeout = 10000;
                netCmd.ExecuteNonQuery();
            }
            catch { }
        }

        public static int ExecuteQueryOnNet(string strQuery, string strFileQuery, string strDeleteQuery, string strDataBase)
        {
            int count = 0;
            string strUserName = Convert.ToString(DBConnection.DBCon.LiveDBUserName);
            if (strUserName == "")
                strUserName = strDataBase;
            SqlConnection netCon = new SqlConnection(@"Data Source=" + MainPage.strLiveDataBaseIP + ";Initial Catalog=" + strDataBase + "; User Id=" + strUserName + ";Password=" + MainPage.strLiveDBPassword + "");
            if (netCon.State == ConnectionState.Closed)
            {
                netCon.Open();
            }
            using (SqlTransaction transaction = netCon.BeginTransaction())
            {
                try
                {
                    SqlCommand netCmd = new SqlCommand(strQuery, netCon, transaction);
                    netCmd.CommandTimeout = 10000;
                    count = netCmd.ExecuteNonQuery();

                    if (count > 0)
                    {
                        MainPage.OpenConnection();
                        SqlTransaction localTransaction = MainPage.con.BeginTransaction();
                        try
                        {
                            SqlCommand localCmd = new SqlCommand(strDeleteQuery, MainPage.con, localTransaction);
                            int lCount = localCmd.ExecuteNonQuery();
                            if (lCount > 0)
                            {
                                transaction.Commit();
                                localTransaction.Commit();
                                SaveExecutedQuery(strQuery);
                            }
                            else
                            {
                                localTransaction.Rollback();
                                transaction.Rollback();
                            }
                        }
                        catch (Exception ex)
                        {
                            localTransaction.Rollback();
                            transaction.Rollback();
                            count = 0;
                            MessageBox.Show("ERROR ! IN LOCAL QUERY : " + ex.Message, "Error");
                        }
                    }
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    MessageBox.Show("ERROR ! IN NET QUERY : " + ex.Message, "Error");
                    CreateInternetQuery(strQuery, strDeleteQuery);
                    count = 0;
                }
                finally
                {
                    SetMultiUserDataBase();
                }
            }
            return count;
        }

        public static DataTable GetDataTableFromNet(string strQuery, string strDBIP, string strDataBase)
        {
            string strUserName = Convert.ToString(DBConnection.DBCon.LiveDBUserName);
            if (strUserName == "")
                strUserName = strDataBase;

            DataTable dt = new DataTable();
            SqlConnection netCon = new SqlConnection(@"Data Source=" + strDBIP + ";Initial Catalog=" + strDataBase + "; User Id=" + strUserName + ";Password=" + MainPage.strLiveDBPassword + ";");
            if (netCon.State == ConnectionState.Closed)
            {
                netCon.Open();
            }
            try
            {
                SqlDataAdapter adap = new SqlDataAdapter(strQuery, netCon);
                adap.Fill(dt);
            }
            catch
            {
            }
            finally
            {
                MainPage.CloseConnection();
            }
            return dt;
        }

        public int DownloadStationMaster(string strDataBase)
        {
            int count = 0;
            try
            {
                string strNetQuery = "";
                if (MainPage.strLoginName == "SUPERADMIN")
                    strNetQuery = " Select * from [dbo].[Station] Where InsertStatus=1 Order by StationName ";
                else
                    strNetQuery = " Select * from [dbo].[Station] Where InsertStatus=1 and Date>DATEADD(dd,-5,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) ";

                DataTable dt = NetDBAccess.GetDataTableRecord(strNetQuery);

                string strQuery = "";
                int _rowCount = 0;

                foreach (DataRow row in dt.Rows)
                {
                    strQuery += " if not exists(Select StationName from Station Where StationName='" + row["StationName"] + "') begin "
                             + " Insert into Station ([StationName],[Date],[InsertStatus],[UpdateStatus],[CreatedBy],[UpdatedBy]) Values('" + row["StationName"] + "','" + row["Date"] + "',0,0,'" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "')  end ";
                    _rowCount++;
                    if ((_rowCount % 100) == 0)
                    {
                        if (strQuery != "")
                        {
                            count += ExecuteMyQuery(strQuery);
                            strQuery = "";
                            _rowCount = 0;
                        }
                    }
                }

                if (strQuery != "")
                    count += ExecuteMyQuery(strQuery);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        public int DownloadReferenceMaster(string strDataBase)
        {
            int count = 0;
            try
            {
                string strNetQuery = " Select * from (Select *,(SELECT MAX(ED.Date)MDate from EditTrailDetails ED  Where ED.BillType='REFERENCEBOOK' and ED.BillCode=AD.AreaCode and ED.BillNo=AD.AccountNo)MDate from AddressBook AD WHere AreaCode Like('%R') and (InsertStatus=1 OR UpdateStatus=1))AddressBook Where MDate>DATEADD(dd,-15,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) Order by Name ";

                DataTable dt = NetDBAccess.GetDataTableRecord(strNetQuery);

                string strQuery = "";
                int _rowCount = 0;

                foreach (DataRow row in dt.Rows)
                {
                    strQuery += " if not exists(Select [Name] from AddressBook Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin "
                            + " INSERT INTO [dbo].[AddressBook] ([Name],[NickName],[GroupName],[MobileNo],[PhoneNoCode],[PhoneNo],[Address],[PinCode],[City],[State],[InsertStatus],[UpdateStatus],[AreaCode],[AccountNo],[WhatsappNo],[EmailID],[VisitedBy],[VisitedDate],[GSTNo],[Reference],[Remark],[CreatedBy],[UpdatedBy])VALUES "
                            + " ('" + row["Name"] + "','" + row["NickName"] + "','" + row["GroupName"] + "','" + row["MobileNo"] + "','" + row["PhoneNoCode"] + "','" + row["PhoneNo"] + "','" + row["Address"] + "','" + row["PinCode"] + "','" + row["City"] + "','" + row["State"] + "',0,0,'" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["WhatsappNo"] + "','" + row["EmailID"] + "','" + row["VisitedBy"] + "','" + row["VisitedDate"] + "','" + row["GSTNo"] + "','" + row["Reference"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "') end else begin "
                            + " Update [AddressBook] Set [Name]='" + row["Name"] + "',[NickName]='" + row["NickName"] + "',[GroupName]='" + row["GroupName"] + "',[MobileNo]='" + row["MobileNo"] + "',[PhoneNoCode]='" + row["PhoneNoCode"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[Address]='" + row["Address"] + "',[PinCode]='" + row["PinCode"] + "',[City]='" + row["City"] + "',[State]='" + row["State"] + "',[WhatsappNo]='" + row["WhatsappNo"] + "',[EmailID]='" + row["EmailID"] + "',[VisitedBy]='" + row["VisitedBy"] + "',[VisitedDate]='" + row["VisitedDate"] + "',[GSTNo]='" + row["GSTNo"] + "',[Reference]='" + row["Reference"] + "',[Remark]='" + row["Remark"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' end ";

                    _rowCount++;
                    if ((_rowCount % 100) == 0)
                    {
                        if (strQuery != "")
                        {
                            count += ExecuteMyQuery(strQuery);
                            strQuery = "";
                            _rowCount = 0;
                        }
                    }
                }

                if (strQuery != "")
                    count += ExecuteMyQuery(strQuery);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        public int DownloadMaster(string strDataBase)
        {
            int count = 0;
            try
            {
                string strNetQuery = "";
                if (MainPage.strLoginName == "SUPERADMIN")
                    strNetQuery = " Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where  (GroupName in ('SUNDRY DEBTORS','BANK A/C') OR (GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('TCS PAYABLE')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('TCS RECEIVABLES')))  and SM.InsertStatus=1  Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (GroupName in ('SUNDRY DEBTORS','BANK A/C') OR (GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('TCS PAYABLE')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('TCS RECEIVABLES'))) and SM.UpdateStatus=1 Select * from [dbo].[MergePartyDetails] Where GroupName not in ('SUNDRY CREDITOR') and InsertStatus=1 ";
                else               
                    strNetQuery = " Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where  (GroupName in ('SUNDRY DEBTORS','BANK A/C') OR (GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('TCS PAYABLE')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('TCS RECEIVABLES')))  and SM.InsertStatus=1 and Date>DATEADD(dd,-10,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))  Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (GroupName in ('SUNDRY DEBTORS','BANK A/C') OR (GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('TCS PAYABLE')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('TCS RECEIVABLES'))) and SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) Select * from [dbo].[MergePartyDetails] Where GroupName not in ('SUNDRY CREDITOR') and InsertStatus=1 and Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) ";
                
                DataSet ds = NetDBAccess.GetDataSetRecord(strNetQuery);

                string strQuery = "";
                int _rowCount = 0;
                DataTable dt = null;
                if (ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists(Select Name from SupplierMaster Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin "
                                + " Insert into SupplierMaster([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[Other],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[OrderAmtLimit],[Other1],[Other2],[Other3],[TransactionLockRemark],[OrangeListRemark],[OrangeListStatus]) "
                                + " Values('" + row["Name"] + "','" + row["Category"] + "','" + row["GroupName"] + "','" + row["OpeningBal"] + "','" + row["Status"] + "','" + row["Address"] + "','" + row["State"] + "','" + row["PINCode"] + "','','" + row["Station"] + "','" + row["BookingStation"] + "','" + row["TINNumber"] + "','" + row["NormalDhara"] + "','" + row["SNDhara"] + "','" + row["ContactPerson"] + "', '" + row["PhoneNo"] + "','" + row["MobileNo"] + "','" + row["PvtMarka"] + "',"
                                + " '" + row["Reference"] + "','" + row["EmailID"] + "','" + row["DueDays"] + "','" + row["Date"] + "','" + row["CFormApply"] + "','" + row["AmountLimit"] + "','" + row["ExtendedAmt"] + "','" + row["HasteSale"] + "','" + row["PermanentAddress"] + "','" + row["SecondTransport"] + "','" + row["ThirdTransport"] + "','" + row["FourthTransport"] + "','" + row["Remark"] + "','" + row["CDDays"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'','" + row["TransactionLock"] + "','" + row["BlackList"] + "','" + row["BlackListReason"] + "','" + row["GroupII"] + "','" + row["Other"] + "','" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["CardNumber"] + "','" + row["CardStatus"] + "','" + row["SaleIncentive"] + "','" + row["GSTNo"] + "','" + row["PANNumber"] + "','" + row["TaxType"] + "','" + row["AccountantMobileNo"] + "','" + row["MainPartyID"] + "','" + row["CourierName"] + "','" + row["DistrictName"] + "','" + row["OrderAmtLimit"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["Other3"] + "','" + row["TransactionLockRemark"] + "','" + row["OrangeListRemark"] + "','" + row["OrangeListStatus"] + "') "
                                + " if not exists (Select [AreaCode] from [dbo].[SupplierOtherDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin INSERT INTO [dbo].[SupplierOtherDetails] ([AreaCode],[AccountNo],[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],[Other],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[DOB],[DOA],[SpouseName],[Description],[ProfilePic1],[ProfilePic2],[ProfilePic3]) VALUES "
                                + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["WaybillUserName"] + "','" + row["WaybillPassword"] + "','" + row["CompanyRegNo"] + "','" + row["NameOfFirm"] + "','" + row["OtherDetails"] + "','" + row["NB_Manufacturing"] + "','" + row["NB_SoleSellingAgent"] + "','" + row["NB_Dealer"] + "','" + row["NB_Agent"] + "','" + row["NB_Assembler"] + "','" + row["NB_Trader"] + "','" + row["NC_Proprietary"] + "','" + row["NC_Partnership"] + "','" + row["NC_Private"] + "','" + row["NC_Public"] + "','" + row["SODOthers"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["DOB"] + "','" + row["DOA"] + "','" + row["SpouseName"] + "','" + row["Description"] + "','" + row["ProfilePic1"] + "','" + row["ProfilePic2"] + "','" + row["ProfilePic3"] + "') end "
                                + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values('" + row["Date"] + "' ,'" + row["AreaCode"] + "" + row["AccountNo"] + "' ,'OPENING' ,'" + row["Status"] + "' ,'' ,'" + row["OpeningBal"] + "','','',0,'False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["AreaCode"] + "" + row["AccountNo"] + "') end ";

                        _rowCount++;
                        if ((_rowCount % 100) == 0)
                        {
                            if (strQuery != "")
                            {
                                count += ExecuteMyQuery(strQuery);
                                strQuery = "";
                                _rowCount = 0;
                            }
                        }
                    }

                    if (strQuery != "")
                        count += ExecuteMyQuery(strQuery);

                    dt = ds.Tables[1];
                    strQuery = "";
                    _rowCount = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " Update SupplierMaster Set Name='" + row["Name"] + "',Category='" + row["Category"] + "',[Address]='" + row["Address"] + "',[PermanentAddress]='" + row["PermanentAddress"] + "',[GroupName]='" + row["GroupName"] + "', [TransactionLock]='" + row["TransactionLock"] + "',[BlackList]='" + row["BlackList"] + "',[BlackListReason]='" + row["BlackListReason"] + "',[GroupII]='" + row["GroupII"] + "',[Other]='" + row["Other"] + "',[CardNumber]='" + row["CardNumber"] + "',[CardStatus]='" + row["CardStatus"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[MobileNo]='" + row["MobileNo"] + "',"
                                 + " [Reference]='" + row["Reference"] + "',[EmailID]='" + row["EmailID"] + "',[AmountLimit]='" + row["AmountLimit"] + "',[ExtendedAmt]='" + row["ExtendedAmt"] + "',[State]='" + row["State"] + "',[PINCode]='" + row["PINCode"] + "',[Station]='" + row["Station"] + "',[TINNumber]='" + row["TINNumber"] + "',[DueDays]='" + row["DueDays"] + "',FourthTransport='" + row["FourthTransport"] + "',[Remark]='" + row["Remark"] + "',[CDDays]='" + row["CDDays"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=0,[GSTNo]='" + row["GSTNo"] + "',[PANNumber]='" + row["PANNumber"] + "',[TaxType]='" + row["TaxType"] + "',[AccountantMobileNo]='" + row["AccountantMobileNo"] + "',[MainPartyID]='" + row["MainPartyID"] + "',[DistrictName]='" + row["DistrictName"] + "',[OrderAmtLimit]='" + row["OrderAmtLimit"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[Other3]='" + row["Other3"] + "',[TransactionLockRemark]='" + row["TransactionLockRemark"] + "',[OrangeListRemark]='" + row["OrangeListRemark"] + "',[OrangeListStatus]='" + row["OrangeListStatus"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "'  and GroupName!='Sub Party' "
                                 + " UPDATE [dbo].[SupplierOtherDetails] Set [WaybillUserName]='" + row["WaybillUserName"] + "',[WaybillPassword]='" + row["WaybillPassword"] + "',[CompanyRegNo]='" + row["CompanyRegNo"] + "',[NameOfFirm]='" + row["NameOfFirm"] + "',[OtherDetails]='" + row["OtherDetails"] + "',[NB_Manufacturing]='" + row["NB_Manufacturing"] + "',[NB_SoleSellingAgent]='" + row["NB_SoleSellingAgent"] + "',[NB_Dealer]='" + row["NB_Dealer"] + "',[NB_Agent]='" + row["NB_Agent"] + "',[NB_Assembler]='" + row["NB_Assembler"] + "',[NB_Trader]='" + row["NB_Trader"] + "',[NC_Proprietary]='" + row["NC_Proprietary"] + "',[NC_Partnership]='" + row["NC_Partnership"] + "',[NC_Private]='" + row["NC_Private"] + "',[NC_Public]='" + row["NC_Public"] + "',[Other]='" + row["SODOthers"] + "',[DOB]='" + row["DOB"] + "',[DOA]='" + row["DOA"] + "',[SpouseName]='" + row["SpouseName"] + "',[Description]='" + row["Description"] + "',[ProfilePic1]='" + row["ProfilePic1"] + "',[ProfilePic2]='" + row["ProfilePic2"] + "',[ProfilePic3]='" + row["ProfilePic3"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' "
                                 + " Delete from [dbo].[SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' "
                                 + " Delete from [dbo].[SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' ";

                        _rowCount++;
                        if ((_rowCount % 100) == 0)
                        {
                            if (strQuery != "")
                            {
                                count += ExecuteMyQuery(strQuery);
                                strQuery = "";
                                _rowCount = 0;
                            }
                        }

                    }

                    if (strQuery != "")
                        count = ExecuteMyQuery(strQuery);

                    dt = ds.Tables[2];
                    string strFirstParty = "", strSecondParty = "", strFinalParty = "", strGroupName = "";
                    foreach (DataRow row in dt.Rows)
                    {
                        strFirstParty = Convert.ToString(row["FirstParty"]);
                        strSecondParty = Convert.ToString(row["SecondParty"]);
                        strFinalParty = Convert.ToString(row["FinalParty"]);
                        strGroupName = Convert.ToString(row["GroupName"]);
                        if (strGroupName == "REFERENCE")
                            count += MergeReferenceName(strFirstParty, strSecondParty, strFinalParty, false);
                        else
                            count += MergePartyName(strFirstParty, strSecondParty, strFinalParty, strGroupName, false);
                    }
                }

                strNetQuery = " Select SBD.* from SupplierMaster SM inner join SupplierBankDetails SBD ON (SM.AreaCode+SM.AccountNo)=(SBD.AreaCode+SBD.AccountNo) inner join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where SM.GroupName in ('SUNDRY DEBTORS','BANK A/C','CAPITAL ACCOUNT') and ((SM.InsertStatus=1 and SM.Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))) OR (SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-30,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))))  Select SBD.* from SupplierMaster SM inner join SupplierBrandDetails SBD ON (SM.AreaCode+SM.AccountNo)=(SBD.AreaCode+SBD.AccountNo) inner join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo)  Where SM.GroupName in ('SUNDRY DEBTORS','BANK A/C','CAPITAL ACCOUNT') and ((SM.InsertStatus=1 and SM.Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))) OR (SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-30,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))))) ";

                ds = NetDBAccess.GetDataSetRecord(strNetQuery);
                strQuery = "";
                if (ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [BankAccountNo]='" + row["BankAccountNo"] + "') begin "
                         + " INSERT INTO [dbo].[SupplierBankDetails] ([AreaCode],[AccountNo],[BankName],[BranchName],[BankAccountNo],[BankIFSCCode],[BankAccountName],[VerifiedStatus],[VerifiedDate],[CreatedBy],[BeniID],[InsertStatus],[UpdateStatus]) VALUES "
                        + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BankName"] + "','" + row["BranchName"] + "','" + row["BankAccountNo"] + "','" + row["BankIFSCCode"] + "','" + row["BankAccountName"] + "','" + row["VerifiedStatus"] + "','" + row["VerifiedDate"] + "','" + row["CreatedBy"] + "','" + row["BeniID"] + "',0,0) end ";
                    }
                    if (strQuery != "")
                    {
                        count += ExecuteMyQuery(strQuery);
                        strQuery = "";
                    }
                    dt = ds.Tables[1];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [Range]='" + row["Range"] + "' and [BrandName]='" + row["BrandName"] + "' and [ProductType]='" + row["ProductType"] + "') begin "
                                 + " INSERT INTO [dbo].[SupplierBrandDetails] ([AreaCode],[AccountNo],[BrandName],[ProductType],[Range],[HSNCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BrandName"] + "','" + row["ProductType"] + "','" + row["Range"] + "','" + row["HSNCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                    }
                    if (strQuery != "")
                        count += ExecuteMyQuery(strQuery);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        public int DownloadMasterPurchaseParty(string strDataBase)
        {
            int count = 0;
            try
            {
                string strNetQuery;
                if(MainPage.strLoginName=="SUPERADMIN" && MainPage.strBranchCode=="LDH")
                strNetQuery = " Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where  (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'LDH'='" + MainPage.strBranchCode + "') and GroupName in ('SUNDRY CREDITOR')  Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'LDH'='" + MainPage.strBranchCode + "') and GroupName in ('SUNDRY CREDITOR') Select * from [dbo].[MergePartyDetails] Where GroupName in ('SUNDRY CREDITOR') ";
                else
                    strNetQuery = " Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where  (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and GroupName in ('SUNDRY CREDITOR') and SM.InsertStatus=1 and Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and GroupName in ('SUNDRY CREDITOR') and SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) Select * from [dbo].[MergePartyDetails] Where GroupName in ('SUNDRY CREDITOR') and InsertStatus=1 and Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) ";

                DataSet ds = NetDBAccess.GetDataSetRecord(strNetQuery);

                string strQuery = "";
                int _rowCount = 0;
                DataTable dt = null;
                if (ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists(Select Name from SupplierMaster Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin "
                                + " Insert into SupplierMaster([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[Other],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[Other1],[Other2],[Other3]) "
                                + " Values('" + row["Name"] + "','" + row["Category"] + "','" + row["GroupName"] + "','0','" + row["Status"] + "','" + row["Address"] + "','" + row["State"] + "','" + row["PINCode"] + "','','" + row["Station"] + "','" + row["BookingStation"] + "','" + row["TINNumber"] + "','" + row["NormalDhara"] + "','" + row["SNDhara"] + "','" + row["ContactPerson"] + "', '" + row["PhoneNo"] + "','" + row["MobileNo"] + "','" + row["PvtMarka"] + "',"
                                + " '" + row["Reference"] + "','" + row["EmailID"] + "','" + row["DueDays"] + "','" + row["Date"] + "','" + row["CFormApply"] + "','" + row["AmountLimit"] + "','" + row["ExtendedAmt"] + "','" + row["HasteSale"] + "','" + row["PermanentAddress"] + "','" + row["SecondTransport"] + "','" + row["ThirdTransport"] + "','" + row["FourthTransport"] + "','" + row["Remark"] + "','" + row["CDDays"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'','" + row["TransactionLock"] + "','" + row["BlackList"] + "','" + row["BlackListReason"] + "','" + row["GroupII"] + "','" + row["Other"] + "','" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["CardNumber"] + "','" + row["CardStatus"] + "','" + row["SaleIncentive"] + "','" + row["GSTNo"] + "','" + row["PANNumber"] + "','" + row["TaxType"] + "','" + row["AccountantMobileNo"] + "','" + row["MainPartyID"] + "','" + row["CourierName"] + "','" + row["DistrictName"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["Other3"] + "') "
                                + " if not exists (Select [AreaCode] from [dbo].[SupplierOtherDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin INSERT INTO [dbo].[SupplierOtherDetails] ([AreaCode],[AccountNo],[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],[Other],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[DOB],[DOA],[SpouseName],[Description],[ProfilePic1],[ProfilePic2],[ProfilePic3]) VALUES "
                                + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["WaybillUserName"] + "','" + row["WaybillPassword"] + "','" + row["CompanyRegNo"] + "','" + row["NameOfFirm"] + "','" + row["OtherDetails"] + "','" + row["NB_Manufacturing"] + "','" + row["NB_SoleSellingAgent"] + "','" + row["NB_Dealer"] + "','" + row["NB_Agent"] + "','" + row["NB_Assembler"] + "','" + row["NB_Trader"] + "','" + row["NC_Proprietary"] + "','" + row["NC_Partnership"] + "','" + row["NC_Private"] + "','" + row["NC_Public"] + "','" + row["SODOthers"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["DOB"] + "','" + row["DOA"] + "','" + row["SpouseName"] + "','" + row["Description"] + "','" + row["ProfilePic1"] + "','" + row["ProfilePic2"] + "','" + row["ProfilePic3"] + "') end "
                                + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values('" + row["Date"] + "' ,'" + row["AreaCode"] + "" + row["AccountNo"] + "' ,'OPENING' ,'" + row["Status"] + "' ,'' ,'0','','',0,'False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["AreaCode"] + "" + row["AccountNo"] + "') end ";

                        _rowCount++;
                        if ((_rowCount % 100) == 0)
                        {
                            if (strQuery != "")
                            {
                                count += ExecuteMyQuery(strQuery);
                                strQuery = "";
                                _rowCount = 0;
                            }
                        }
                    }

                    if (strQuery != "")
                        count += ExecuteMyQuery(strQuery);

                    dt = ds.Tables[1];
                    strQuery = "";
                    _rowCount = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " Update SupplierMaster Set Name='" + row["Name"] + "',Category='" + row["Category"] + "',[Address]='" + row["Address"] + "',[PermanentAddress]='" + row["PermanentAddress"] + "',[GroupName]='" + row["GroupName"] + "', [TransactionLock]='" + row["TransactionLock"] + "',[BlackList]='" + row["BlackList"] + "',[BlackListReason]='" + row["BlackListReason"] + "',[GroupII]='" + row["GroupII"] + "',[Other]='" + row["Other"] + "',[CardNumber]='" + row["CardNumber"] + "',[CardStatus]='" + row["CardStatus"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[MobileNo]='" + row["MobileNo"] + "',"
                                 + " [Reference]='" + row["Reference"] + "',[EmailID]='" + row["EmailID"] + "',[AmountLimit]='" + row["AmountLimit"] + "',[ExtendedAmt]='" + row["ExtendedAmt"] + "',[State]='" + row["State"] + "',[PINCode]='" + row["PINCode"] + "',[Station]='" + row["Station"] + "',[TINNumber]='" + row["TINNumber"] + "',[DueDays]='" + row["DueDays"] + "',[Remark]='" + row["Remark"] + "',[CDDays]='" + row["CDDays"] + "',[NormalDhara]='" + row["NormalDhara"] + "',[SNDhara]='" + row["SNDhara"] + "',[CFormApply]='" + row["CFormApply"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=0,[GSTNo]='" + row["GSTNo"] + "',[PANNumber]='" + row["PANNumber"] + "',[TaxType]='" + row["TaxType"] + "',[AccountantMobileNo]='" + row["AccountantMobileNo"] + "',[MainPartyID]='" + row["MainPartyID"] + "',[DistrictName]='" + row["DistrictName"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[Other3]='" + row["Other3"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "'  and GroupName!='Sub Party' "
                                 + " UPDATE [dbo].[SupplierOtherDetails] Set [WaybillUserName]='" + row["WaybillUserName"] + "',[WaybillPassword]='" + row["WaybillPassword"] + "',[CompanyRegNo]='" + row["CompanyRegNo"] + "',[NameOfFirm]='" + row["NameOfFirm"] + "',[OtherDetails]='" + row["OtherDetails"] + "',[NB_Manufacturing]='" + row["NB_Manufacturing"] + "',[NB_SoleSellingAgent]='" + row["NB_SoleSellingAgent"] + "',[NB_Dealer]='" + row["NB_Dealer"] + "',[NB_Agent]='" + row["NB_Agent"] + "',[NB_Assembler]='" + row["NB_Assembler"] + "',[NB_Trader]='" + row["NB_Trader"] + "',[NC_Proprietary]='" + row["NC_Proprietary"] + "',[NC_Partnership]='" + row["NC_Partnership"] + "',[NC_Private]='" + row["NC_Private"] + "',[NC_Public]='" + row["NC_Public"] + "',[Other]='" + row["SODOthers"] + "',[DOB]='" + row["DOB"] + "',[DOA]='" + row["DOA"] + "',[SpouseName]='" + row["SpouseName"] + "',[Description]='" + row["Description"] + "',[ProfilePic1]='" + row["ProfilePic1"] + "',[ProfilePic2]='" + row["ProfilePic2"] + "',[ProfilePic3]='" + row["ProfilePic3"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' "
                                 + " Delete from [dbo].[SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' "
                                 + " Delete from [dbo].[SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' ";

                        _rowCount++;
                        if ((_rowCount % 100) == 0)
                        {
                            if (strQuery != "")
                            {
                                count += ExecuteMyQuery(strQuery);
                                strQuery = "";
                                _rowCount = 0;
                            }
                        }

                    }

                    if (strQuery != "")
                        count = ExecuteMyQuery(strQuery);

                    dt = ds.Tables[2];
                    string strFirstParty = "", strSecondParty = "", strFinalParty = "", strGroupName = "";
                    foreach (DataRow row in dt.Rows)
                    {
                        strFirstParty = Convert.ToString(row["FirstParty"]);
                        strSecondParty = Convert.ToString(row["SecondParty"]);
                        strFinalParty = Convert.ToString(row["FinalParty"]);
                        strGroupName = Convert.ToString(row["GroupName"]);

                        count += MergePartyName(strFirstParty, strSecondParty, strFinalParty, strGroupName, false);
                    }
                }

                strNetQuery = " Select SBD.* from SupplierMaster SM inner join SupplierBankDetails SBD ON (SM.AreaCode+SM.AccountNo)=(SBD.AreaCode+SBD.AccountNo) inner join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and GroupName in ('SUNDRY CREDITOR')  and ((SM.InsertStatus=1 and SM.Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))) OR (SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-65,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))))  Select SBD.* from SupplierMaster SM inner join SupplierBrandDetails SBD ON (SM.AreaCode+SM.AccountNo)=(SBD.AreaCode+SBD.AccountNo) inner join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo)  Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and GroupName in ('SUNDRY CREDITOR') and ((SM.InsertStatus=1 and SM.Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))) OR (SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))))) ";

                ds = NetDBAccess.GetDataSetRecord(strNetQuery);
                strQuery = "";
                if (ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [BankAccountNo]='" + row["BankAccountNo"] + "') begin "
                         + " INSERT INTO [dbo].[SupplierBankDetails] ([AreaCode],[AccountNo],[BankName],[BranchName],[BankAccountNo],[BankIFSCCode],[BankAccountName],[VerifiedStatus],[VerifiedDate],[CreatedBy],[BeniID],[InsertStatus],[UpdateStatus]) VALUES "
                        + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BankName"] + "','" + row["BranchName"] + "','" + row["BankAccountNo"] + "','" + row["BankIFSCCode"] + "','" + row["BankAccountName"] + "','" + row["VerifiedStatus"] + "','" + row["VerifiedDate"] + "','" + row["CreatedBy"] + "','" + row["BeniID"] + "',0,0) end ";
                    }
                    if (strQuery != "")
                    {
                        count += ExecuteMyQuery(strQuery);
                        strQuery = "";
                    }
                    dt = ds.Tables[1];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [Range]='" + row["Range"] + "' and [BrandName]='" + row["BrandName"] + "' and [ProductType]='" + row["ProductType"] + "') begin "
                                 + " INSERT INTO [dbo].[SupplierBrandDetails] ([AreaCode],[AccountNo],[BrandName],[ProductType],[Range],[HSNCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BrandName"] + "','" + row["ProductType"] + "','" + row["Range"] + "','" + row["HSNCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                    }
                    if (strQuery != "")
                        count += ExecuteMyQuery(strQuery);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        public int DownloadMasterOtherParty(string strDataBase)
        {
            int count = 0;
            try
            {
                string strNetQuery = " Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and (Name not Like('%GST%')and Name not Like('%TDS%') and ((GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('SALARIES PAYABLES','STATUTORY DUES','TCS PAYABLE')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('ADVANCE TO STAFF','TCS RECEIVABLES')) OR (GroupName in ('EMPLOYEE BENEFIT EXPENSE') and Category in ('CONTRIBUTION TO EPF','CONTRIBUTION TO ESI','SALARIES & WAGES'))))  and SM.InsertStatus=1 and Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) Select SM.*,[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],SOD.[Other] as SODOthers,SOD.UpdatedDate,SOD.DOB,SOD.DOA,SOD.SpouseName,SOD.Description,[ProfilePic1],[ProfilePic2],[ProfilePic3] from SupplierMaster SM left join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and (Name not Like('%GST%')and Name not Like('%TDS%') and ((GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('SALARIES PAYABLES','STATUTORY DUES','TCS PAYABLE')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('ADVANCE TO STAFF','TCS RECEIVABLES')) OR (GroupName in ('EMPLOYEE BENEFIT EXPENSE') and Category in ('CONTRIBUTION TO EPF','CONTRIBUTION TO ESI','SALARIES & WAGES'))))  and SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))  ";

                DataSet ds = NetDBAccess.GetDataSetRecord(strNetQuery);

                string strQuery = "";
                int _rowCount = 0;
                DataTable dt = null;
                if (ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists(Select Name from SupplierMaster Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin "
                                + " Insert into SupplierMaster([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[Other],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[Other1],[Other2],[Other3]) "
                                + " Values('" + row["Name"] + "','" + row["Category"] + "','" + row["GroupName"] + "','0','" + row["Status"] + "','" + row["Address"] + "','" + row["State"] + "','" + row["PINCode"] + "','','" + row["Station"] + "','" + row["BookingStation"] + "','" + row["TINNumber"] + "','" + row["NormalDhara"] + "','" + row["SNDhara"] + "','" + row["ContactPerson"] + "', '" + row["PhoneNo"] + "','" + row["MobileNo"] + "','" + row["PvtMarka"] + "',"
                                + " '" + row["Reference"] + "','" + row["EmailID"] + "','" + row["DueDays"] + "','" + row["Date"] + "','" + row["CFormApply"] + "','" + row["AmountLimit"] + "','" + row["ExtendedAmt"] + "','" + row["HasteSale"] + "','" + row["PermanentAddress"] + "','" + row["SecondTransport"] + "','" + row["ThirdTransport"] + "','" + row["FourthTransport"] + "','" + row["Remark"] + "','" + row["CDDays"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'','" + row["TransactionLock"] + "','" + row["BlackList"] + "','" + row["BlackListReason"] + "','" + row["GroupII"] + "','" + row["Other"] + "','" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["CardNumber"] + "','" + row["CardStatus"] + "','" + row["SaleIncentive"] + "','" + row["GSTNo"] + "','" + row["PANNumber"] + "','" + row["TaxType"] + "','" + row["AccountantMobileNo"] + "','" + row["MainPartyID"] + "','" + row["CourierName"] + "','" + row["DistrictName"] + "','" + row["Other1"] + "','" + row["Other2"] + "','" + row["Other3"] + "') "
                                + " if not exists (Select [AreaCode] from [dbo].[SupplierOtherDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "') begin INSERT INTO [dbo].[SupplierOtherDetails] ([AreaCode],[AccountNo],[WaybillUserName],[WaybillPassword],[CompanyRegNo],[NameOfFirm],[OtherDetails],[NB_Manufacturing],[NB_SoleSellingAgent],[NB_Dealer],[NB_Agent],[NB_Assembler],[NB_Trader],[NC_Proprietary],[NC_Partnership],[NC_Private],[NC_Public],[Other],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[DOB],[DOA],[SpouseName],[Description],[ProfilePic1],[ProfilePic2],[ProfilePic3]) VALUES "
                                + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["WaybillUserName"] + "','" + row["WaybillPassword"] + "','" + row["CompanyRegNo"] + "','" + row["NameOfFirm"] + "','" + row["OtherDetails"] + "','" + row["NB_Manufacturing"] + "','" + row["NB_SoleSellingAgent"] + "','" + row["NB_Dealer"] + "','" + row["NB_Agent"] + "','" + row["NB_Assembler"] + "','" + row["NB_Trader"] + "','" + row["NC_Proprietary"] + "','" + row["NC_Partnership"] + "','" + row["NC_Private"] + "','" + row["NC_Public"] + "','" + row["SODOthers"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["DOB"] + "','" + row["DOA"] + "','" + row["SpouseName"] + "','" + row["Description"] + "','" + row["ProfilePic1"] + "','" + row["ProfilePic2"] + "','" + row["ProfilePic3"] + "') end "
                                + " Insert into BalanceAmount ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) values('" + row["Date"] + "' ,'" + row["AreaCode"] + "" + row["AccountNo"] + "' ,'OPENING' ,'" + row["Status"] + "' ,'' ,'0','','',0,'False','',0,'" + row["CreatedBy"] + "','',0,0,0,'" + row["AreaCode"] + "" + row["AccountNo"] + "') end ";

                        _rowCount++;
                        if ((_rowCount % 100) == 0)
                        {
                            if (strQuery != "")
                            {
                                count += ExecuteMyQuery(strQuery);
                                strQuery = "";
                                _rowCount = 0;
                            }
                        }
                    }

                    if (strQuery != "")
                        count += ExecuteMyQuery(strQuery);

                    dt = ds.Tables[1];
                    strQuery = "";
                    _rowCount = 0;
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " Update SupplierMaster Set Name='" + row["Name"] + "',Category='" + row["Category"] + "',[Address]='" + row["Address"] + "',[PermanentAddress]='" + row["PermanentAddress"] + "',[GroupName]='" + row["GroupName"] + "', [TransactionLock]='" + row["TransactionLock"] + "',[BlackList]='" + row["BlackList"] + "',[BlackListReason]='" + row["BlackListReason"] + "',[GroupII]='" + row["GroupII"] + "',[Other]='" + row["Other"] + "',[CardNumber]='" + row["CardNumber"] + "',[CardStatus]='" + row["CardStatus"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[MobileNo]='" + row["MobileNo"] + "',"
                                 + " [Reference]='" + row["Reference"] + "',[EmailID]='" + row["EmailID"] + "',[AmountLimit]='" + row["AmountLimit"] + "',[ExtendedAmt]='" + row["ExtendedAmt"] + "',[State]='" + row["State"] + "',[PINCode]='" + row["PINCode"] + "',[Station]='" + row["Station"] + "',[TINNumber]='" + row["TINNumber"] + "',[DueDays]='" + row["DueDays"] + "',[Remark]='" + row["Remark"] + "',[CDDays]='" + row["CDDays"] + "',[NormalDhara]='" + row["NormalDhara"] + "',[SNDhara]='" + row["SNDhara"] + "',[CFormApply]='" + row["CFormApply"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=0,[GSTNo]='" + row["GSTNo"] + "',[PANNumber]='" + row["PANNumber"] + "',[TaxType]='" + row["TaxType"] + "',[AccountantMobileNo]='" + row["AccountantMobileNo"] + "',[MainPartyID]='" + row["MainPartyID"] + "',[DistrictName]='" + row["DistrictName"] + "',[Other1]='" + row["Other1"] + "',[Other2]='" + row["Other2"] + "',[Other3]='" + row["Other3"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "'  and GroupName!='Sub Party' "
                                 + " UPDATE [dbo].[SupplierOtherDetails] Set [WaybillUserName]='" + row["WaybillUserName"] + "',[WaybillPassword]='" + row["WaybillPassword"] + "',[CompanyRegNo]='" + row["CompanyRegNo"] + "',[NameOfFirm]='" + row["NameOfFirm"] + "',[OtherDetails]='" + row["OtherDetails"] + "',[NB_Manufacturing]='" + row["NB_Manufacturing"] + "',[NB_SoleSellingAgent]='" + row["NB_SoleSellingAgent"] + "',[NB_Dealer]='" + row["NB_Dealer"] + "',[NB_Agent]='" + row["NB_Agent"] + "',[NB_Assembler]='" + row["NB_Assembler"] + "',[NB_Trader]='" + row["NB_Trader"] + "',[NC_Proprietary]='" + row["NC_Proprietary"] + "',[NC_Partnership]='" + row["NC_Partnership"] + "',[NC_Private]='" + row["NC_Private"] + "',[NC_Public]='" + row["NC_Public"] + "',[Other]='" + row["SODOthers"] + "',[DOB]='" + row["DOB"] + "',[DOA]='" + row["DOA"] + "',[SpouseName]='" + row["SpouseName"] + "',[Description]='" + row["Description"] + "',[ProfilePic1]='" + row["ProfilePic1"] + "',[ProfilePic2]='" + row["ProfilePic2"] + "',[ProfilePic3]='" + row["ProfilePic3"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' "
                                 + " Delete from [dbo].[SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' "
                                 + " Delete from [dbo].[SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' ";

                        _rowCount++;
                        if ((_rowCount % 100) == 0)
                        {
                            if (strQuery != "")
                            {
                                count += ExecuteMyQuery(strQuery);
                                strQuery = "";
                                _rowCount = 0;
                            }
                        }

                    }

                    if (strQuery != "")
                        count = ExecuteMyQuery(strQuery);
                }

                strNetQuery = " Select SBD.* from SupplierMaster SM inner join SupplierBankDetails SBD ON (SM.AreaCode+SM.AccountNo)=(SBD.AreaCode+SBD.AccountNo) inner join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo) Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and (Name not Like('%GST%') and Name not Like('%TDS%') and ((GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('SALARIES PAYABLES','STATUTORY DUES')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('ADVANCE TO STAFF')) OR (GroupName in ('EMPLOYEE BENEFIT EXPENSE') and Category in ('CONTRIBUTION TO EPF','CONTRIBUTION TO ESI','SALARIES & WAGES')))) and ((SM.InsertStatus=1 and SM.Date>DATEADD(dd,-7,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))) OR (SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-15,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))))  Select SBD.* from SupplierMaster SM inner join SupplierBrandDetails SBD ON (SM.AreaCode+SM.AccountNo)=(SBD.AreaCode+SBD.AccountNo) inner join SupplierOtherDetails SOD on (SM.AreaCode+SM.AccountNo)=(SOD.AreaCode+SOD.AccountNo)  Where (SM.AreaCode='" + MainPage.strBranchCode + "' OR 'DL'='" + MainPage.strBranchCode + "') and (Name not Like('%GST%')and Name not Like('%TDS%') and ((GroupName in ('OTHER CURRENT LIABILITIES') and Category in ('SALARIES PAYABLES','STATUTORY DUES')) OR (GroupName in ('SHORT-TERM LOANS AND ADVANCES') and Category in ('ADVANCE TO STAFF')) OR (GroupName in ('EMPLOYEE BENEFIT EXPENSE') and Category in ('CONTRIBUTION TO EPF','CONTRIBUTION TO ESI','SALARIES & WAGES')))) and ((SM.InsertStatus=1 and SM.Date>DATEADD(dd,-5,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())))) OR (SM.UpdateStatus=1 and SOD.UpdatedDate>DATEADD(dd,-5,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))))) ";

                ds = NetDBAccess.GetDataSetRecord(strNetQuery);
                strQuery = "";
                if (ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBankDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [BankAccountNo]='" + row["BankAccountNo"] + "') begin "
                         + " INSERT INTO [dbo].[SupplierBankDetails] ([AreaCode],[AccountNo],[BankName],[BranchName],[BankAccountNo],[BankIFSCCode],[BankAccountName],[VerifiedStatus],[VerifiedDate],[CreatedBy],[BeniID],[InsertStatus],[UpdateStatus]) VALUES "
                        + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BankName"] + "','" + row["BranchName"] + "','" + row["BankAccountNo"] + "','" + row["BankIFSCCode"] + "','" + row["BankAccountName"] + "','" + row["VerifiedStatus"] + "','" + row["VerifiedDate"] + "','" + row["CreatedBy"] + "','" + row["BeniID"] + "',0,0) end ";
                    }
                    if (strQuery != "")
                    {
                        count += ExecuteMyQuery(strQuery);
                        strQuery = "";
                    }
                    dt = ds.Tables[1];
                    foreach (DataRow row in dt.Rows)
                    {
                        strQuery += " if not exists (Select AreaCode from [SupplierBrandDetails] Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' and [Range]='" + row["Range"] + "' and [BrandName]='" + row["BrandName"] + "' and [ProductType]='" + row["ProductType"] + "') begin "
                                 + " INSERT INTO [dbo].[SupplierBrandDetails] ([AreaCode],[AccountNo],[BrandName],[ProductType],[Range],[HSNCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                 + " ('" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["BrandName"] + "','" + row["ProductType"] + "','" + row["Range"] + "','" + row["HSNCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                    }
                    if (strQuery != "")
                        count += ExecuteMyQuery(strQuery);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        protected internal int DownloadSchemeSupplierName()
        {
            int count = 0;
            try
            {
                string strNetQuery = "";

                strNetQuery = "Select * from Scheme_SupplierDetails Where SchemeName in (Select SchemeName from SchemeMaster Where ActiveStatus=1) and (InsertStatus=1 OR UpdateStatus=1) and Other='" + MainPage.strBranchCode + "' Order by SupplierName "
                            + " Select * from Scheme_CustomerDetails Where SchemeName in (Select SchemeName from SchemeMaster Where ActiveStatus=1) and (InsertStatus=1 OR UpdateStatus=1) Order by CustomerName "
                            + " Select * from SchemeMaster Where InsertStatus=1 Order by SchemeName ";
               
               DataSet ds= NetDBAccess.GetDataSetRecord(strNetQuery);
                DataTable table = null;
                if (ds.Tables.Count > 1)
                {
                    table = ds.Tables[0];
                    string strQuery = "";
                    if (table != null)
                    {
                        if (table.Rows.Count > 0)
                        {
                            DataTable _dt = table.DefaultView.ToTable(true, "SchemeName");
                            foreach (DataRow _row in _dt.Rows)
                            {
                                strQuery += " Delete from Scheme_SupplierDetails Where SchemeName='" + _row["SchemeName"] + "' ";
                            }

                            foreach (DataRow row in table.Rows)
                            {
                                strQuery += " if not exists (Select SchemeName from [dbo].[Scheme_SupplierDetails] Where SupplierName='" + row["SupplierName"] + "' and  SchemeName='" + row["SchemeName"] + "') begin   "
                                         + " INSERT INTO [dbo].[Scheme_SupplierDetails] ([RemoteID],[SchemeName],[PurchasePartyID],[SupplierName],[Discount],[BillValue],[Remark],[Other],[Date],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[StartDate],[EndDate]) VALUES "
                                         + " (" + row["ID"] + ",'" + row["SchemeName"] + "','" + row["PurchasePartyID"] + "','" + row["SupplierName"] + "'," + ConvertObjectToDoubleStatic(row["Discount"]) + "," + ConvertObjectToDoubleStatic(row["BillValue"]) + ",'" + row["Remark"] + "','" + row["Other"] + "','" + row["Date"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["StartDate"] + "','" + row["EndDate"] + "') end ";
                            }
                            if (strQuery != "")
                                count = ExecuteMyNonQuery(strQuery);
                        }
                        strQuery = "";

                        table = ds.Tables[1];
                        if (table != null)
                        {
                            if (table.Rows.Count > 0)
                            {
                                DataTable _dt = table.DefaultView.ToTable(true, "SchemeName");
                                foreach (DataRow _row in _dt.Rows)
                                {
                                    strQuery += " Delete from Scheme_CustomerDetails Where SchemeName='" + _row["SchemeName"] + "' ";
                                }

                                foreach (DataRow row in table.Rows)
                                {
                                    strQuery += " if not exists (Select SchemeName from [dbo].[Scheme_CustomerDetails] Where CustomerName='" + row["CustomerName"] + "' and  SchemeName='" + row["SchemeName"] + "') begin   "
                                             + " INSERT INTO [dbo].[Scheme_CustomerDetails] ([RemoteID],[SchemeName],[SalesPartyID],[CustomerName],[TargetValue],[Remark],[Other],[Date],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                             + " (" + row["ID"] + ",'" + row["SchemeName"] + "','" + row["SalesPartyID"] + "','" + row["CustomerName"] + "'," + ConvertObjectToDoubleStatic(row["TargetValue"]) + ",'" + row["Remark"] + "','" + row["Other"] + "','" + row["Date"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0) end ";
                                }

                                if (strQuery != "")
                                    count += ExecuteMyNonQuery(strQuery);
                            }
                        }
                        strQuery = "";
                        table = ds.Tables[2];
                        if (table != null)
                        {
                            foreach (DataRow row in table.Rows)
                            {
                                strQuery += " if not exists (Select SchemeName from [dbo].[SchemeMaster] Where SchemeName='" + row["SchemeName"] + "') begin "
                                         + " INSERT INTO [dbo].[SchemeMaster] ([BranchCode],[SchemeName],[StartDate],[EndDate],[Remark],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[ActiveStatus]) VALUES "
                                         + " ('" + row["BranchCode"] + "','" + row["SchemeName"] + "','" + row["StartDate"] + "','" + row["EndDate"] + "','" + row["Remark"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "','" + row["InsertStatus"] + "','" + row["UpdateStatus"] + "','" + row["ActiveStatus"] + "') end else begin "
                                         + " UPDATE [dbo].[SchemeMaster] SET [StartDate]='" + row["StartDate"] + "',[EndDate]='" + row["EndDate"] + "',[Remark]='" + row["Remark"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[ActiveStatus]='" + row["ActiveStatus"] + "' Where SchemeName='" + row["SchemeName"] + "' end ";
                            }
                            if (strQuery != "")
                                count += ExecuteMyNonQuery(strQuery);
                        }

                    }
                }               
            }
            catch { }
            return count;
        }

        public static bool CheckPartyAdjustedAmount(string strBillNo)
        {
            bool partyStatus = true;
            try
            {
                string strQuery = "Select BalanceID from BalanceAmount Where Tick='True' and Description='" + strBillNo + "' and AccountStatus in ('SALES A/C','PURCHASE A/C','SALE RETURN','PURCHASE RETURN','SALE SERVICE') ";
                object objBalanceID = null;

                if (MainPage.strLiveDataBaseIP != "" && MainPage.strOnlineDataBaseName != "")
                    objBalanceID = NetDBAccess.ExecuteMyScalar(strQuery);
                else
                    objBalanceID = ExecuteMyScalar(strQuery);

                if (Convert.ToString(objBalanceID) != "")
                {
                    partyStatus = false;
                    MessageBox.Show("This Bill is adjusted in Party account ! Please unadjust this Account on Internet after that you can Change Details ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                partyStatus = false;
                throw ex;
            }

            if (MainPage.strUserRole.Contains("SUPERADMIN"))
                partyStatus = true;
            return partyStatus;
        }

        public static bool CheckPartyAdjustedAmount(string strVoucherCode, string strVoucherNo)
        {
            bool partyStatus = false;
            try
            {
                object objBalanceID = null;

                string strQuery = " Select BalanceID from BalanceAmount Where VoucherCode='" + strVoucherCode + "' and VoucherNo=" + strVoucherNo + " and Tick='True' ";
                if (MainPage.strLiveDataBaseIP != "" && MainPage.strOnlineDataBaseName != "")
                    objBalanceID = NetDBAccess.ExecuteMyScalar(strQuery);
                else
                    objBalanceID = ExecuteMyScalar(strQuery);

                if (Convert.ToString(objBalanceID) != "")
                {
                    if (MainPage.strUserRole.Contains("SUPERADMIN"))
                        partyStatus = true;
                    else
                        partyStatus = false;
                    MessageBox.Show("This Voucher no is adjusted in Party account ! Please unadjust this account after that you can change/delete voucher ", "Account Adjusted", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                    partyStatus = true;
            }
            catch
            {
                MessageBox.Show("Please connect the Internet Connection after that you can change Amount of this Bill ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                partyStatus = false;
            }
            return partyStatus;
        }

        public double GetGroupAmountFromQuery(string strGroup, DateTime sDate, DateTime eDate, int month)
        {
            double dAmt = 0;
            strGroup = strGroup.ToUpper();
            if (strGroup != "")
            {
                string strSubQuery = "";
                if (month > 0)
                    strSubQuery = "  and DATEPART(MM,Date)=" + month + "  ";
                eDate = eDate.AddDays(1);

                if (strGroup == "SALES A/C" || strGroup == "PURCHASE A/C" || strGroup == "SALE RETURN" || strGroup == "PURCHASE RETURN" || strGroup == "SALE SERVICE")
                {
                    dAmt = GetGroupAmountFromQueryWithSaleAndPurchase(strGroup, sDate, eDate, month);
                }
                else
                {
                    string strQuery = " Select SUM(Amt) Amt From(Select ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Status='Debit' and  Date>='" + sDate.ToString("MM/dd/yyyy") + "'  and Date<'" + eDate.ToString("MM/dd/yyyy") + "' " + strSubQuery + " and AccountID in (Select (AreaCode+CAST(AccountNo as varchar)) Name from SupplierMaster Where GroupName in ('" + strGroup + "')) Union All "
                                           + " Select -ISNULL(SUM(CAST(Amount as Money)),0) Amt  from BalanceAmount Where Status='Credit' and  Date>='" + sDate.ToString("MM/dd/yyyy") + "'  and Date<'" + eDate.ToString("MM/dd/yyyy") + "' " + strSubQuery + " and AccountID in (Select (AreaCode+CAST(AccountNo as varchar)) Name from SupplierMaster Where GroupName in ('" + strGroup + "')))Balance ";
                    object objValue = DataBaseAccess.ExecuteMyScalar(strQuery);
                    if (objValue != null)
                    {
                        dAmt = Convert.ToDouble(objValue);
                    }
                }
            }
            return dAmt;
        }

        public DataTable GetAllDetailsByGroupName(string strGroupName, DateTime sDate, DateTime eDate, int _month)
        {
            DataTable dt = null;
            try
            {
                eDate = eDate.AddDays(1);

                string strQuery = "", strSubQuery = "";
                if (_month > 0)
                    strSubQuery = "  and DATEPART(MM,Date)=" + _month + "  ";
                if (strGroupName == "SALES A/C" || strGroupName == "PURCHASE A/C" || strGroupName == "SALE RETURN" || strGroupName == "PURCHASE RETURN" || strGroupName == "SALE SERVICE" || strGroupName == "DEBIT NOTE" || strGroupName == "CREDIT NOTE")
                {
                    double dAmt = GetGroupAmountFromQueryWithSaleAndPurchase(strGroupName, sDate, eDate, 0);
                    dt = CreateDataTableForSaleAndPurchase(strGroupName, dAmt);
                }
                else
                {
                    strQuery = " Select dbo.GetFullName(PartyName) as Name ,ISNULL(SUM(Amt),0) Amount from (Select AccountID as PartyName,ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Date>='" + sDate.ToString("MM/dd/yyyy") + "' and Date<'" + eDate.ToString("MM/dd/yyyy") + "' and Status='DEBIT' and AccountID in (Select (AreaCode+CAST(AccountNo as varchar)) from SupplierMaster Where GroupName='" + strGroupName + "') " + strSubQuery + "  Group by AccountID Union All "
                            + " Select AccountID as PartyName,-ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Date>='" + sDate.ToString("MM/dd/yyyy") + "' and Date<'" + eDate.ToString("MM/dd/yyyy") + "' and Status='CREDIT' and AccountID in (Select (AreaCode+CAST(AccountNo as varchar)) from SupplierMaster Where GroupName='" + strGroupName + "')  " + strSubQuery + " Group by AccountID)Balance Group by PartyName Order by PartyName ";

                    dt = GetDataTable(strQuery);
                }
            }
            catch
            {
            }
            return dt;
        }

        private DataTable CreateDataTableForSaleAndPurchase(string strGroupName, double dAmt)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Name", typeof(String));
            dt.Columns.Add("Amount", typeof(String));
            DataRow row = dt.NewRow();
            row["Name"] = strGroupName;
            row["Amount"] = dAmt;
            dt.Rows.Add(row);
            return dt;
        }

        public double GetNetProfitAndLoss(DateTime sDate, DateTime eDate, int _month)
        {
            double dAmt = 0;
            string strGroups = "SALES A/C','SALE SERVICE','PURCHASE A/C','SALE RETURN','PURCHASE RETURN','DEBIT NOTE','CREDIT NOTE";
            dAmt += GetGroupAmountFromQueryWithSaleAndPurchase(strGroups, sDate, eDate.AddDays(1), _month);
            strGroups = "DIRECT EXPENSE A/C','DIRECT INCOME A/C','DEPRECIATION','INDIRECT EXPENSE A/C','INDIRECT INCOME A/C','REVENUE FROM OPERATIONS','OTHER INCOME','COST OF MATERIAL TRADED','EMPLOYEE BENEFIT EXPENSE','OTHER EXPENSES','SELLING & DISTRIBUTION EXPENSES";
            dAmt += GetGroupAmountFromQuery(strGroups, sDate, eDate, _month);
            dAmt += GetOpeningStockAmount(sDate);

            return dAmt;
        }

        public DataTable GetNetProfitAndLossDataTable(DateTime sDate, DateTime eDate, int _month, bool _bStatus)
        {
            DataTable _dt = null;
            string strQuery = "", strSubQuery = "", strAccountStatus = "'SALES A/C','SALE SERVICE','PURCHASE A/C','SALE RETURN','PURCHASE RETURN','DEBIT NOTE','CREDIT NOTE'";
            string strGroups = "'DIRECT EXPENSE A/C','DIRECT INCOME A/C','DEPRECIATION','INDIRECT EXPENSE A/C','INDIRECT INCOME A/C','REVENUE FROM OPERATIONS','OTHER INCOME','COST OF MATERIAL TRADED','EMPLOYEE BENEFIT EXPENSE','OTHER EXPENSES','SELLING & DISTRIBUTION EXPENSES'";

            if (_month > 0)
                strSubQuery = "  and DATEPART(MM,Date)=" + _month + "  ";

            strSubQuery += " and Date>= '" + sDate.ToString("MM/dd/yyyy") + "'  and Date< '" + eDate.ToString("MM/dd/yyyy") + "' ";


            strQuery = " Select GroupName,SUM(ISNULL(Amt,0)) Amt From("
                    + " Select AccountStatus  as GroupName ,Round(((CAST(ISNULL(BA.Amount,0) as Money)-(isnull(GST.GSTAmt,0)+isnull(TCSAmt,0)+isnull(ROAmt,0)))),2) * (CASE WHEN BA.Status='DEBIT' then -1 else 1 end) Amt from BalanceAmount BA  inner join (  Select BillCode,BillNo,isnull(TCSAmt,0)TCSAmt, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from PurchaseRecord  UNION ALL  Select BillCode,BillNo,isnull(TCSAmt,0)TCSAmt, ISNULL(CAST(ROSign+Convert(varchar(50),RoundOff) as Money),0)ROAmt from PurchaseBook  UNION ALL  Select BillCode,BillNo,0 TCSAmt, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SalesRecord  UNION ALL  Select BillCode,BillNo,0 TCSAmt, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SalesBook   UNION ALL  Select BillCode,BillNo,0 TCSAmt, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SaleServiceBook  UNION ALL  Select BillCode,BillNo,0 TCSAmt, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SaleReturn  UNION ALL  Select BillCode,BillNo,0 TCSAmt, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from PurchaseReturn  )PB on (BillCode+' '+CAST(BillNo as varchar))=BA.Description  LEFT JOIN(   Select BillCode, BillNo,SUM(ISNULL(GD.TaxAmount, 0))GSTAmt from GSTDetails GD  WHere ISNULL(TaxRate, 0) > 0   Group by BillCode, BillNo ) as GST ON (GST.BillCode+' '+CAST(GST.BillNo as varchar)) = BA.Description  Where  BA.AccountStatus in (" + strAccountStatus + ") " + strSubQuery
                     //+ " Select AccountStatus  as GroupName,(ISNULL((CAST(BA.Amount as Money) - (ISNULL(TaxAmount+ROAmt,0))),0)*(CASE WHEN BA.Status='DEBIT' then -1 else 1 end)) Amt from BalanceAmount BA inner join (Select BillCode,BillNo, TaxAmount, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from PurchaseRecord UNION ALL Select BillCode,BillNo,TaxAmt as TaxAmount, ISNULL(CAST(ROSign+Convert(varchar(50),RoundOff) as Money),0)ROAmt from PurchaseBook  UNION ALL Select BillCode,BillNo,TaxAmount, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SalesRecord UNION ALL Select BillCode,BillNo,TaxAmt as TaxAmount, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SalesBook  UNION ALL Select BillCode,BillNo,TaxAmt TaxAmount, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SaleServiceBook UNION ALL Select BillCode,BillNo,TaxAmount, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from SaleReturn UNION ALL Select BillCode,BillNo,TaxAmount, ISNULL(CAST(RoundOffSign+Convert(varchar(50),RoundOffAmt) as Money),0)ROAmt from PurchaseReturn )PB on (BillCode+' '+CAST(BillNo as varchar))=BA.Description Where  BA.AccountStatus in (" + strAccountStatus + ") " + strSubQuery 
                     //+ " Select AccountStatus as GroupName, -ISNULL((CAST(BA.Amount as Money)-ISNULL((SELECT SUM(CAST(BA1.Amount as Money))  from BalanceAmount BA1 Where BA1.Description=BA.Description and BA1.AccountStatus='DUTIES & TAXES'),0)),0) Amt from BalanceAmount BA  Where BA.Status='DEBIT' and BA.AccountStatus in (" + strAccountStatus + ") " + strSubQuery + "  Union All  "
                     //+ " Select AccountStatus  as GroupName ,ISNULL((CAST(BA.Amount as Money) - ISNULL((SELECT SUM(CAST(BA1.Amount as Money))  from BalanceAmount BA1 Where BA1.Description = BA.Description and BA1.AccountStatus = 'DUTIES & TAXES'), 0)),0) Amt from BalanceAmount BA Where BA.Status = 'CREDIT' and BA.AccountStatus in (" + strAccountStatus + ") " + strSubQuery 
                     + " )Balance Group by GroupName UNION ALL "
                     + " Select GroupName, SUM(Amount)Amt from(Select GroupName, SUM(CAST(Amount as Money)) Amount from BalanceAmount BA OUTER APPLY(SELECT GroupName from SupplierMaster SM Where(SM.AreaCode + SM.AccountNo) = BA.AccountID) SM Where Status = 'DEBIT' and GroupName in (" + strGroups + ") " + strSubQuery + " Group by GroupName UNION ALL "
                     + " Select GroupName, -SUM(CAST(Amount as Money)) Amount from BalanceAmount BA OUTER APPLY(SELECT GroupName from SupplierMaster SM Where(SM.AreaCode + SM.AccountNo) = BA.AccountID) SM Where Status = 'CREDIT' and GroupName in (" + strGroups + ") " + strSubQuery + " Group by GroupName )Sales Group by GroupName ";

            if (_bStatus)
                strQuery = "Select SUM(Amt) Amt from (" + strQuery + " ) Sales ";

            _dt = GetDataTable(strQuery);

            return _dt;
        }

        public DataTable GetNetProfitAndLossDataTable_Agent(DateTime sDate, DateTime eDate, int _month, bool _bStatus)
        {
            DataTable _dt = null;
            eDate = eDate.AddDays(1);
            string strQuery = "", strSubQuery = "", strAccountStatus = "'SALES A/C','SALE SERVICE','PURCHASE A/C','SALE RETURN','PURCHASE RETURN','DEBIT NOTE','CREDIT NOTE'";
            string strGroups = "'DIRECT EXPENSE A/C','DIRECT INCOME A/C','DEPRECIATION','INDIRECT EXPENSE A/C','INDIRECT INCOME A/C','REVENUE FROM OPERATIONS','OTHER INCOME','COST OF MATERIAL TRADED','EMPLOYEE BENEFIT EXPENSE','OTHER EXPENSES','SELLING & DISTRIBUTION EXPENSES'";

            if (_month > 0)
                strSubQuery = "  and DATEPART(MM,Date)=" + _month + "  ";

            strSubQuery += " and BA.Date>= '" + sDate.ToString("MM/dd/yyyy") + "'  and BA.Date<'" + eDate.ToString("MM/dd/yyyy") + "' ";


            strQuery = " Select GroupName,SUM(ISNULL(Amt,0)) Amt From(Select AccountStatus as GroupName, -ISNULL((CAST(BA.Amount as Money)-ISNULL((SELECT SUM(CAST(BA1.Amount as Money))  from BalanceAmount BA1 Where BA1.Description=BA.Description and BA1.AccountStatus='DUTIES & TAXES'),0)),0) Amt from BalanceAmount BA  Where BA.Status='DEBIT' and BA.AccountStatus in (" + strAccountStatus + ") " + strSubQuery + "  Union All  "
                     + " Select AccountStatus  as GroupName ,ISNULL((CAST(BA.Amount as Money) - ISNULL((SELECT SUM(CAST(BA1.Amount as Money))  from BalanceAmount BA1 Where BA1.Description = BA.Description and BA1.AccountStatus = 'DUTIES & TAXES'), 0)),0) Amt from BalanceAmount BA Where BA.Status = 'CREDIT' and BA.AccountStatus in (" + strAccountStatus + ") " + strSubQuery + "  )Balance Group by GroupName UNION ALL "
                     + " Select GroupName, SUM(CAST(Amount as Money)*(CASE WHEN BA.Status = 'CREDIT' then -1 else 1 end)) Amount from BalanceAmount BA inner join SupplierMaster SM on (SM.AreaCode + SM.AccountNo) = BA.AccountID Where GroupName in (" + strGroups + ") " + strSubQuery + " Group by GroupName  ";
                     

            if (_bStatus)
                strQuery = "Select SUM(Amt) Amt from (" + strQuery + ") Sales ";

            _dt = GetDataTable(strQuery);

            return _dt;
        }

        public double GetPartyAmountFromQuery(string strPartyName)
        {
            double dAmt = 0;
            if (strPartyName != "")
            {
                string[] strParty = strPartyName.Split(' ');
                if (strParty[0] != "")
                {
                    string strQuery = " Select ISNULL(SUM(CAST(Amount as Money)*(CASE WHEN Status='Credit' then -1 else 1 end)),0) Amt from BalanceAmount Where AccountID in ('" + strParty[0] + "') ";

                    object objValue = DataBaseAccess.ExecuteMyScalar(strQuery);
                    if (objValue != null)
                    {
                        dAmt = Convert.ToDouble(objValue);
                    }
                }
            }
            return dAmt;
        }


        public double GetGroupAmountFromQueryWithSaleAndPurchase(string strGroup, DateTime sDate, DateTime eDate, int month)
        {
            double dAmt = 0;
            if (strGroup != "")
            {
                string strSubQuery = "";
                if (month > 0)
                    strSubQuery = "  and DATEPART(MM,BA.Date)=" + month + "  ";

                //string strQuery = " Select SUM(Amt) Amt From(Select -ISNULL(SUM(CAST(Amount as Money)-BA1.TaxAmount),0) Amt from BalanceAmount  BA OUTER APPLY (SELECT SUM(CAST(Amount as Money)) TAXAmount from BalanceAmount BA1 Where BA1.Description=BA.Description and BA1.AccountStatus='DUTIES & TAXES') BA1 Where Status='Debit' and AccountStatus in ('" + strGroup + "') and Date>='" + sDate.ToString("MM/dd/yyyy") + "' and Date<'" + eDate.ToString("MM/dd/yyyy") + "' "+strSubQuery+" Union All "
                //                       + " Select ISNULL(SUM(CAST(Amount as Money)-BA1.TaxAmount),0) Amt  from BalanceAmount BA OUTER APPLY (SELECT SUM(CAST(Amount as Money)) TAXAmount from BalanceAmount BA1 Where BA1.Description=BA.Description and BA1.AccountStatus='DUTIES & TAXES') BA1 Where Status='Credit' and AccountStatus in ('" + strGroup + "') and Date>='" + sDate.ToString("MM/dd/yyyy") + "' and Date<'" + eDate.ToString("MM/dd/yyyy") + "' "+strSubQuery+" )Balance ";

                string strQuery = " Select SUM(ISNULL(Amt,0)) Amt From(Select -ISNULL((CAST(BA.Amount as Money)-ISNULL((SELECT SUM(CAST(BA1.Amount as Money))  from BalanceAmount BA1 Where BA1.Description=BA.Description and BA1.AccountStatus='DUTIES & TAXES'),0)),0) Amt from BalanceAmount BA  Where BA.Status='DEBIT' and BA.AccountStatus in ('" + strGroup + "') and BA.Date>='" + sDate.ToString("MM/dd/yyyy") + "' and BA.Date<'" + eDate.ToString("MM/dd/yyyy") + "' " + strSubQuery + " Union All "
                                + " Select ISNULL((CAST(BA.Amount as Money)-ISNULL((SELECT SUM(CAST(BA1.Amount as Money))  from BalanceAmount BA1 Where BA1.Description=BA.Description and BA1.AccountStatus='DUTIES & TAXES'),0)),0) Amt from BalanceAmount BA Where BA.Status='CREDIT' and BA.AccountStatus in ('" + strGroup + "') and BA.Date>='" + sDate.ToString("MM/dd/yyyy") + "' and BA.Date<'" + eDate.ToString("MM/dd/yyyy") + "' " + strSubQuery + ")Balance ";

                object objValue = DataBaseAccess.ExecuteMyScalar(strQuery);
                if (objValue != null && Convert.ToString(objValue) != "")
                {
                    dAmt = Convert.ToDouble(objValue);
                }
            }
            return dAmt;
        }

        public double GetGroupAmountFromQueryWithProfitAndLoss()
        {
            double dAmt = 0;
            string strQuery = " Select  SUM(Amt) Amt From( "
                                   + " Select ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Status='Debit' and   AccountID in (Select (ISNULL(AreaCode,'')+ISNULL(AccountNo,'')) from SupplierMaster Where GroupName in ('Creditor Expense','DIRECT EXPENSE A/C', 'DIRECT INCOME A/C', 'INDIRECT EXPENSE A/C', 'INDIRECT INCOME A/C','Opening Stock','Closing Stock','Stock In Trade','Profit & Loss A/c')) Union All "
                                           + " Select -ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Status='Credit' and AccountID in (Select (ISNULL(AreaCode,'')+ISNULL(AccountNo,'')) from SupplierMaster Where GroupName in ('Creditor Expense','DIRECT EXPENSE A/C', 'DIRECT INCOME A/C', 'INDIRECT EXPENSE A/C', 'INDIRECT INCOME A/C','Opening Stock','Closing Stock','Stock In Trade','Profit & Loss A/c')) Union All "
                                           + " Select -ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Status='Debit' and  AccountStatus in('SALES A/C','PURCHASE A/C') Union All "
                                   + " Select ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Status='Credit' and  AccountStatus in('SALES A/C','PURCHASE A/C'))Balance ";
            object objValue = DataBaseAccess.ExecuteMyScalar(strQuery);
            if (objValue != null)
            {
                dAmt = Convert.ToDouble(objValue);
            }
            return dAmt;
        }

        #region Download All Masters

        public int DownloadSubPartyMaster(string strDataBase)
        {
            int count = 0;
            try
            {
                string _str = "Select * from  SupplierMaster Where GroupName='SUB PARTY' and InsertStatus=1 ";
                DataTable table = NetDBAccess.GetDataTableRecord(_str);               

                string strQuery = "";
                int _rowCount = 0;
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " if not exists(Select * from SupplierMaster Where GroupName='SUB PARTY' and [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "' ) begin "
                                 + " Insert into SupplierMaster (Name,GroupName,Address,State,Transport,Station,BookingStation,MobileNo,AmountLimit,HasteSale,PvtMarka,Date,CreatedBy,UpdatedBy,InsertStatus,UpdateStatus,Postage,GroupII,[AreaCode],[AccountNo],[CardNumber],[CardStatus],[GSTNo],[Remark],[BlackList],[BlackListReason],[TransactionLock],[Other],[Other1]) values "
                                 + " ('" + row["Name"] + "','SUB PARTY','" + row["Address"] + "','" + row["State"] + "','" + row["Transport"] + "','" + row["Station"] + "','" + row["BookingStation"] + "','" + row["MobileNo"] + "',0,'" + row["HasteSale"] + "','" + row["PvtMarka"] + "','" + row["Date"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["Postage"] + "','" + row["GroupII"] + "','" + row["AreaCode"] + "','" + row["AccountNo"] + "','" + row["CardNumber"] + "','" + row["CardStatus"] + "','" + row["GSTNo"] + "','" + row["Remark"] + "','" + row["BlackList"] + "','" + row["BlackListReason"] + "','" + row["TransactionLock"] + "','" + row["Other"] + "','" + row["Other1"] + "') end ";

                    _rowCount++;
                    if ((_rowCount % 100) == 0)
                    {
                        if (strQuery != "")
                        {
                            count += ExecuteMyQuery(strQuery);
                            strQuery = "";
                            _rowCount = 0;
                        }
                    }
                }

                if (strQuery != "")
                {
                    count = ExecuteMyQuery(strQuery);
                }

               _str= "Select * from  SupplierMaster Where GroupName='SUB PARTY' and UpdateStatus=1 ";
                table = NetDBAccess.GetDataTableRecord(_str);

                strQuery = "";
                foreach (DataRow row in table.Rows)
                {
                    strQuery += " Update SupplierMaster Set [Name]='" + row["Name"] + "',[Category]='" + row["Category"] + "',[Address]='" + row["Address"] + "',[PermanentAddress]='" + row["PermanentAddress"] + "',[GroupName]='" + row["GroupName"] + "', [TransactionLock]='" + row["TransactionLock"] + "',[BlackList]='" + row["BlackList"] + "',[BlackListReason]='" + row["BlackListReason"] + "',[GroupII]='" + row["GroupII"] + "',[Other]='" + row["Other"] + "',[CardNumber]='" + row["CardNumber"] + "',[CardStatus]='" + row["CardStatus"] + "',[PhoneNo]='" + row["PhoneNo"] + "',[MobileNo]='" + row["MobileNo"] + "',[Other1]='" + row["Other1"] + "',"
                                + " [Reference]='" + row["Reference"] + "',[EmailID]='" + row["EmailID"] + "',[AmountLimit]='" + row["AmountLimit"] + "',[ExtendedAmt]='" + row["ExtendedAmt"] + "',[State]='" + row["State"] + "',[PINCode]='" + row["PINCode"] + "',[Station]='" + row["Station"] + "',[BookingStation]='" + row["BookingStation"] + "',[TINNumber]='" + row["TINNumber"] + "',[DueDays]='" + row["DueDays"] + "',[Remark]='" + row["Remark"] + "',[CDDays]='" + row["CDDays"] + "',[UpdatedBy]='" + row["UpdatedBy"] + "',[UpdateStatus]=0,[GSTNo]='" + row["GSTNo"] + "' Where [AreaCode]='" + row["AreaCode"] + "' and [AccountNo]='" + row["AccountNo"] + "'  and GroupName='SUB PARTY' ";

                    _rowCount++;
                    if ((_rowCount % 100) == 0)
                    {
                        if (strQuery != "")
                        {
                            count += ExecuteMyQuery(strQuery);
                            strQuery = "";
                            _rowCount = 0;
                        }
                    }

                }
                if (strQuery != "")
                {
                    count = ExecuteMyQuery(strQuery);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        #endregion
        public static bool SendEmail(string strReceiver, string strSubject, string strMsgBody, string strAttached, string strID, string strEmailType, bool _bErrorMessage)
        {
            bool _bStatus = false;

            if (MainPage.strSenderEmailID != "" && MainPage.strSenderPassword != "")
            {
                if (!strMsgBody.Contains("</div>"))
                {
                    strMsgBody = strMsgBody.Replace("\n", "<br />");
                    strMsgBody = GetDesignerEmailBody(strEmailType, strMsgBody);
                }

                int _value = 0;
                var task = SendMail.SendEmail(strReceiver, strSubject, strMsgBody, strAttached, strID, strEmailType, _bErrorMessage);
                _bStatus = task.Result;

                if (_bStatus)
                    _value = 1;
                SaveEmailDataInDatabase(strReceiver, strMsgBody, strSubject, strAttached, strID, strEmailType, _value);
                return _bStatus;
            }

            return _bStatus;
        }

        public static bool SendEmail_OLD(string strReceiver, string strSubject, string strMsgBody, string strAttached, string strID, string strEmailType, bool _bErrorMessage)
        {
            try
            {
                if (MainPage.strSenderEmailID != "" && MainPage.strSenderPassword != "")
                {
                    if (!strMsgBody.Contains("</div>"))
                    {
                        strMsgBody = strMsgBody.Replace("\n", "<br />");
                        strMsgBody = GetDesignerEmailBody(strEmailType, strMsgBody);
                    }
                    System.Net.Mail.MailMessage objMessage = new System.Net.Mail.MailMessage(MainPage.strSenderEmailID, strReceiver);
                    objMessage.Subject = strSubject;
                    objMessage.Body = strMsgBody;
                    if (strAttached != "")
                    {
                        string[] strFiles = strAttached.Split(',');
                        foreach (string strFileName in strFiles)
                        {
                            if (strFileName != "")
                            {
                                try
                                {
                                    System.Net.Mail.Attachment objAttached = new System.Net.Mail.Attachment(strFileName);
                                    objMessage.Attachments.Add(objAttached);
                                }
                                catch { }
                            }
                        }
                    }
                    objMessage.IsBodyHtml = true;
                    System.Net.NetworkCredential authentication = new System.Net.NetworkCredential(MainPage.strSenderEmailID, MainPage.strSenderPassword);
                    System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient("smtp.gmail.com", 587);
                    client.UseDefaultCredentials = false;
                    client.EnableSsl = true;
                    client.Credentials = authentication;
                    client.Send(objMessage);
                    SaveEmailDataInDatabase(strReceiver, strMsgBody, strSubject, strAttached, strID, strEmailType, 1);
                    return true;
                }
            }
            catch (Exception ex)
            {
                if (_bErrorMessage)
                    MessageBox.Show("Sending Failed : " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                SaveEmailDataInDatabase(strReceiver, strMsgBody, strSubject, strAttached, strID, strEmailType, 0);
            }
            return false;

        }

        public static bool SendEmail(System.Net.Mail.MailMessage objMessage)
        {
            bool chkStatus = false;
            objMessage.Body = GetDesignerEmailBody("", objMessage.Body);
            System.Net.NetworkCredential authentication = new System.Net.NetworkCredential(MainPage.strSenderEmailID, MainPage.strSenderPassword);
            System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient("smtp.gmail.com", 587);
            client.EnableSsl = true;
            client.UseDefaultCredentials = true;
            client.Credentials = authentication;
            client.Send(objMessage);
            return chkStatus;
        }

        private static void SaveEmailDataInDatabase(string strReceiver, string strMessageBody, string strSubject, string strAttach, string strID, string strEmailType, int status)
        {
            try
            {
                string strQuery = "";
                strMessageBody = strMessageBody.Replace("'", "|");
                strSubject = strSubject.Replace("'", "|");
                if (strID == "")
                {
                    strQuery = "INSERT INTO [dbo].[EmailDetails] ([Date],[EmailID],[Subject],[MessageBody],[FilePath],[Status],[EmailType],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) VALUES "
                                  + "(DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),'" + strReceiver + "','" + strSubject + "','" + strMessageBody + "','" + strAttach + "', " + status + ",'" + strEmailType + "','" + MainPage.strLoginName + "','',1,0) ";
                }
                else
                {
                    strQuery = "UPDATE [dbo].[EmailDetails] Set [Date]=DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),[Status]=" + status + ",[UpdatedBy]='" + MainPage.strLoginName + "',[UpdateStatus]=1 Where ID=" + strID;
                }
                ExecuteMyNonQuery(strQuery);
            }
            catch
            {
            }
        }

        public string SaveSupplierNameInOnline(string[] record, string strDataBase, ref string strAccountNo, string strOtherDetails)
        {
            string strResult = "";
            try
            {
                string strUserName = Convert.ToString(DBConnection.DBCon.LiveDBUserName);
                if (strUserName == "")
                    strUserName = strDataBase;
                SqlConnection netCon = new SqlConnection(@"Data Source=" + MainPage.strLiveDataBaseIP + ";Initial Catalog=" + strDataBase + "; User Id=" + strUserName + ";Password=" + MainPage.strLiveDBPassword + ";");
                if (netCon.State == ConnectionState.Closed)
                {
                    netCon.Open();
                }
                SqlTransaction transaction = netCon.BeginTransaction();

                try
                {

                    string strQuery = " if not exists (Select Name from SupplierMaster Where Name='" + record[0] + "' And AreaCode='" + record[37] + "') begin Declare @ID varchar(20) Select @ID=(ISNULL(MAX(CAST(AccountNo as int)),0)+1) from SupplierMaster if not exists (Select Name from SupplierMaster Where [AccountNo]=@ID) begin Insert into SupplierMaster ([Name],[Category],[GroupName],[OpeningBal],[Status],[Address],[State],[PINCode],[Transport],[Station],[BookingStation],[TINNumber],[NormalDhara],[SNDhara],[ContactPerson],[PhoneNo],[MobileNo],[PvtMarka],[Reference],[EmailID],[DueDays],[Date],[CFormApply],[AmountLimit],[ExtendedAmt],[HasteSale],[PermanentAddress],[SecondTransport],[ThirdTransport],[FourthTransport],[Remark],[CDDays],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[Postage],[TransactionLock],[BlackList],[BlackListReason],[GroupII],[AreaCode],[AccountNo],[CardNumber],[CardStatus],[Other],[SaleIncentive],[GSTNo],[PANNumber],[TaxType],[AccountantMobileNo],[MainPartyID],[CourierName],[DistrictName],[OrderAmtLimit],[Other1],[Other2],[Other3],[TransactionLockRemark],[OrangeListRemark],[OrangeListStatus]) Values "
                         + "('" + record[0] + "','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[6] + "','" + record[7] + "','" + record[8] + "','" + record[9] + "','" + record[10] + "','" + record[11] + "','" + record[12] + "','" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[18] + "','" + record[19] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "'," + record[24] + ",'" + record[31] + "',' ','" + record[25] + "','" + record[26] + "','" + record[27] + "','" + record[28] + "','" + record[29] + "','" + record[30] + "','" + MainPage.strLoginName + "','',1,0,'" + record[32] + "','" + record[33] + "','" + record[34] + "','" + record[35] + "','" + record[36] + "','" + record[37] + "',@ID,'" + record[39] + "',0,'" + record[40] + "','" + record[41] + "','" + record[42] + "','" + record[43] + "','" + record[44] + "','" + record[45] + "','" + record[46] + "','" + record[47] + "','" + record[48] + "','" + record[49] + "','" + record[50] + "','" + record[51] + "','" + record[52] + "','" + record[53] + "','" + record[54] + "','" + record[50] + "')  "
                         + " Insert into BalanceAmount([Date],[PartyName],[AccountID],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus]) values('" + record[22] + "' ,'" + record[0] + "','" + record[37] + "'+@ID ,'OPENING' ,'" + record[4] + "' ,'' ,'" + record[3] + "','" + record[5] + "','',0,'False','',0,'" + MainPage.strLoginName + "','',0,1,0) "
                         + strOtherDetails + " Select AccountNo from SupplierMaster Where Name='" + record[0] + "' And AreaCode='" + record[37] + "' end end ";

                    SqlCommand cmd = new SqlCommand(strQuery, netCon, transaction);
                    object objValue = cmd.ExecuteScalar();
                    strAccountNo = Convert.ToString(objValue);
                    if (strAccountNo != "")
                    {
                        record[38] = strAccountNo;

                        int count = SaveSupplierMaster(record, ref strAccountNo, strOtherDetails);
                        if (count > 0)
                        {
                            transaction.Commit();
                            strResult = "success";
                        }
                        else
                        {
                            transaction.Rollback();
                            strResult = "error";
                        }
                    }
                    else
                    {
                        transaction.Rollback();
                        strResult = "error";
                    }
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (strAccountNo != "")
                        DeletePartyRecord(record[37] + strAccountNo);
                    strResult = "error";

                    MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch (Exception ex)
            {
                strResult = "net";
                MessageBox.Show(ex.Message + "Please connect the Internet Connection after that you can create new account name ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return strResult;
        }


        public bool PrintWithDialog(CrystalDecisions.CrystalReports.Engine.ReportClass report, bool useLastSettings = false, int copyCount = 0)
        {
            try
            {
                PrintDialog printDlg = new PrintDialog();
                printDlg.AllowSelection = true;
                printDlg.AllowSomePages = true;
                printDlg.AllowCurrentPage = true;
                printDlg.ShowNetwork = true;
                PrinterSettings defPs = new PrinterSettings();
                printDlg.PrinterSettings = defPs;

                var MaxPages = 0;//
                try
                {
                    MaxPages = report.FormatEngine.GetLastPageNumber(new ReportPageRequestContext());
                }
                catch { MaxPages = 1; }
                printDlg.PrinterSettings.MaximumPage = MaxPages;
                if (copyCount < 1)
                    copyCount = 1;
                printDlg.PrinterSettings.Copies = (short)copyCount;

                // report.PrintOptions.CopyTo(printDlg.PrinterSettings, printDlg.PrinterSettings.DefaultPageSettings);

                if (!useLastSettings)
                {
                    if (printDlg.ShowDialog() == DialogResult.OK)
                    {
                        currentPS = printDlg.PrinterSettings;

                        if (currentPS.PrinterName == "")
                        {
                            MessageBox.Show("Sorry ! Somthing went wrong,.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            currentPS.PrinterName = "Microsoft Print to PDF";
                        }
                        else
                        {
                            currentPS.Copies = copyCount > 0 ? (short)copyCount : currentPS.Copies;
                            report.PrintToPrinter(currentPS, printDlg.PrinterSettings.DefaultPageSettings, false);
                            GC.Collect();
                            return true;
                        }
                    }
                }
                else
                {
                    if (currentPS.PrinterName == "")
                    {
                        MessageBox.Show("Sorry ! Somthing went wrong,.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        currentPS.PrinterName = "Microsoft Print to PDF";
                        return false;
                    }
                    else
                    {
                        currentPS.Copies = copyCount > 0 ? (short)copyCount : currentPS.Copies;
                        report.PrintToPrinter(currentPS, currentPS.DefaultPageSettings, false);
                        GC.Collect();
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! Error occured while printing, that is _ " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            report.Close();
            report.Dispose();
            return false;
        }

        public bool GetDateInExactFormat(object sender, bool blockBlank = true, bool blockFutureDate = false, bool checkFin = true, bool chkMultiFin = false)
        {
            try
            {
                MaskedTextBox txtBox = (MaskedTextBox)sender;
                string dateText = txtBox.Text.Replace("/", "").Trim();

                if (dateText == "" && blockBlank)
                {
                    MessageBox.Show("Sorry ! Date cannot be blank !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtBox.Focus();
                    return false;
                }
                else if (dateText != "")
                {
                    Regex rgx = new Regex(@"(\\|-|\.)");
                    string FormattedDate = rgx.Replace(txtBox.Text, @"/");

                    string[] dateComponents = FormattedDate.Split('/');
                    string day = "", month = "", year = "";

                    day = dateComponents[0].Trim();
                    month = dateComponents[1].Trim();
                    year = dateComponents[2].Trim();

                    var cDay = MainPage.currentDate.Day.ToString();
                    var cMonth = MainPage.currentDate.Month.ToString();

                    if (day.Length == 1)
                        day = "0" + day;
                    if (month.Length == 0)
                        month = cMonth;
                    if (month.Length == 1)
                        month = "0" + month;

                    var intMonth = Convert.ToInt32(month);
                    var cYear = (intMonth >= 4 && intMonth <= 12) ? MainPage.startFinDate.Year.ToString() : MainPage.endFinDate.Year.ToString();

                    if (year.Length == 0 || year.Length == 3)
                        year = cYear;
                    if (year.Length == 1)
                        year = "200" + year;
                    if (year.Length == 2)
                        year = "20" + year;

                    string strDate = day + "/" + month + "/" + year;

                    if (dateText == "0" || dateText == "00")
                    {
                        if (cDay.Length == 1)
                            cDay = "0" + cDay;
                        if (cMonth.Length == 1)
                            cMonth = "0" + cMonth;

                        strDate = cDay + "/" + cMonth + "/" + cYear;

                        txtBox.Text = strDate;
                        return true;
                    }
                    int intDay = Convert.ToInt32(day);
                    int intYear = Convert.ToInt32(year);

                    if (intDay > 31 || intDay < 1)
                    {
                        ShowMsg(sender, "Sorry ! Day is Wrong !", 0, 2);
                        return false;
                    }
                    if (intDay > 30 && (intMonth == 2 || intMonth == 4 || intMonth == 6 || intMonth == 9 || intMonth == 11))
                    {
                        ShowMsg(sender, "Sorry ! Day is Wrong for this Month !", 0, 2);
                        return false;
                    }
                    if ((intDay > 29 && intMonth == 2) || (intDay > 28 && intMonth == 2 && intYear % 4 > 0))
                    {
                        ShowMsg(sender, "Sorry ! Day is Wrong for February !", 0, 2);
                        return false;
                    }
                    if (intMonth > 12 || intMonth < 1)
                    {
                        ShowMsg(sender, "Sorry ! Month is Wrong !", 3, 2);
                        return false;
                    }

                    DateTime Date = DateTime.ParseExact(strDate, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);

                    if (blockFutureDate && (Date > MainPage.currentDate))
                    {
                        ShowMsg(sender, "Sorry ! Future date " + strDate + " is not Allowed !", 6, 4);
                        return false;
                    }
                    if (checkFin && (Date < MainPage.startFinDate || Date > MainPage.endFinDate))
                    {

                        if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                        {
                            ShowMsg(sender, "Sorry !  " + strDate + " date is out of Financial Year !", 6, 4);
                            return false;
                        }
                    }
                    else if (chkMultiFin && (Date < MainPage.multiQSDate || Date > MainPage.multiQEDate))
                    {
                        ShowMsg(sender, "Sorry ! " + strDate + " date is out of Financial Year !", 6, 4);
                        return false;
                    }
                    txtBox.Text = strDate;
                    return true;
                }
                return true;
            }
            catch (Exception ex)
            {
                ShowMsg(sender, "Sorry ! Date is invalid !", 0, 10);
                return false;
            }
        }
        private void ShowMsg(object sender, string msg, int selSatrt, int selLen)
        {
            MaskedTextBox txtBox = (MaskedTextBox)sender;
            MessageBox.Show(msg, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            txtBox.Focus();
            txtBox.SelectionStart = selSatrt;
            txtBox.SelectionLength = selLen;
        }

        public string SaveSubPartyNameInOnline(string[] record, string strDataBase)
        {
            string strResult = "";
            try
            {
                string strUserName = Convert.ToString(DBConnection.DBCon.LiveDBUserName);
                if (strUserName == "")
                    strUserName = strDataBase;
                SqlConnection netCon = new SqlConnection(@"Data Source=" + MainPage.strLiveDataBaseIP + ";Initial Catalog=" + strDataBase + "; User Id=" + strUserName + ";Password=" + MainPage.strLiveDBPassword + ";");
                if (netCon.State == ConnectionState.Closed)
                {
                    netCon.Open();
                }
                SqlTransaction transaction = netCon.BeginTransaction();

                try
                {
                    string strQuery = " if not exists (Select Name from SupplierMaster Where Name='" + record[0] + "' and AreaCode='" + record[11] + "' and GroupName='SUB PARTY' and HasteSale='" + record[7] + "') begin Declare @ID varchar(20) Select @ID=(MAX(ISNULL(CAST(AccountNo as int),0))+1) from SupplierMaster Insert into SupplierMaster (Name,GroupName,Address,State,Transport,Station,BookingStation,MobileNo,AmountLimit,HasteSale,PvtMarka,Date,CreatedBy,UpdatedBy,InsertStatus,UpdateStatus,Postage,GroupII,AreaCode,AccountNo,GSTNo,PANNumber,PinCode,PhoneNo,Remark,BlackList,BlackListReason,TransactionLock,Other,[Other1]) Values "
                                    + " ('" + record[0] + "','SUB PARTY','" + record[1] + "','" + record[2] + "','" + record[3] + "','" + record[4] + "','" + record[5] + "','" + record[6] + "','" + record[18] + "','" + record[7] + "','" + record[8] + "','" + record[19] + "','" + MainPage.strLoginName + "','',1,0,'" + record[9] + "','" + record[10] + "','" + record[11] + "',@ID,'" + record[13] + "','" + record[14] + "','" + record[15] + "','" + record[16] + "','" + record[17] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "','" + record[24] + "') "
                                    + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                                    + "('PARTYMASTER','" + record[11] + "',@ID,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),'" + record[18] + "','" + MainPage.strLoginName + "',0,0,'CREATION') Select AccountNo from SupplierMaster Where Name='" + record[0] + "' and AreaCode='" + record[11] + "' and GroupName='SUB PARTY' and HasteSale='" + record[7] + "' end";
                    SqlCommand cmd = new SqlCommand(strQuery, netCon, transaction);
                    object objValue = cmd.ExecuteScalar();
                    strResult = Convert.ToString(objValue);
                    if (strResult != "")
                    {
                        record[12] = strResult;
                        int count = SaveSubSalesParty(record);
                        if (count > 0)
                        {
                            transaction.Commit();
                            strResult = "success";
                        }
                        else
                        {
                            transaction.Rollback();
                            strResult = "error";
                        }
                    }
                    else
                    {
                        transaction.Rollback();
                        strResult = "error";
                    }
                }
                catch
                {
                    transaction.Rollback();
                    strResult = "error";
                }
            }
            catch
            {
                strResult = "net";
                MessageBox.Show("Please connect the Internet Connection after that you can create new account name ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return strResult;
        }

        public void GetStringFromDate(TextBox txtDate)
        {
            try
            {
                txtDate.Text = txtDate.Text.Replace("/", "");
                if (txtDate.Text.Length == 8)
                {
                    double dDate = Convert.ToDouble(txtDate.Text.Substring(0, 2)), dMonth = Convert.ToDouble(txtDate.Text.Substring(2, 2)), dYear = Convert.ToDouble(txtDate.Text.Substring(4, 4));
                    if (dDate < 1 || dDate > 31)
                    {
                        MessageBox.Show("Date is not valid : " + dDate, "Invalid Date ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 2;
                        return;
                    }
                    if (dMonth < 1 || dMonth > 12)
                    {
                        MessageBox.Show("Month is not valid : " + dMonth, "Invalid Month ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 4;
                        return;
                    }
                    if (dYear < 2000 || dYear > 2100)
                    {
                        MessageBox.Show("Year is not valid : " + dYear, "Invalid Year ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 8;
                        return;
                    }
                    txtDate.Text = dDate.ToString("00") + "/" + dMonth.ToString("00") + "/" + dYear.ToString("0000");
                    try
                    {
                        DateTime date = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                        if (date < MainPage.startFinDate || date > MainPage.endFinDate)
                        {
                            MessageBox.Show("Date must be between financial Date of Company !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtDate.Focus();
                            txtDate.Text = txtDate.Text.Replace("/", "");
                            txtDate.SelectionStart = 8;
                        }
                    }
                    catch
                    {
                        MessageBox.Show("Please enter a valid Date !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.Text = txtDate.Text.Replace("/", "");
                        txtDate.SelectionStart = 8;
                    }
                }
                else
                {
                    MessageBox.Show("Date format is not valid ! Please Specify in ddMMyyyy format ", "Invalid Date Format", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtDate.Focus();
                }
            }
            catch
            {
            }
        }

        public void GetStringFromDateForCompany(TextBox txtDate)
        {
            try
            {
                txtDate.Text = txtDate.Text.Replace("/", "");
                if (txtDate.Text.Length == 8)
                {
                    double dDate = Convert.ToDouble(txtDate.Text.Substring(0, 2)), dMonth = Convert.ToDouble(txtDate.Text.Substring(2, 2)), dYear = Convert.ToDouble(txtDate.Text.Substring(4, 4));
                    if (dDate < 1 || dDate > 31)
                    {
                        MessageBox.Show("Date is not valid : " + dDate, "Invalid Date ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 2;
                        return;
                    }
                    if (dMonth < 1 || dMonth > 12)
                    {
                        MessageBox.Show("Month is not valid : " + dMonth, "Invalid Month ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 4;
                        return;
                    }
                    if (dYear < 1900 || dYear > 2100)
                    {
                        MessageBox.Show("Year is not valid : " + dYear, "Invalid Year ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 8;
                        return;
                    }
                    txtDate.Text = dDate.ToString("00") + "/" + dMonth.ToString("00") + "/" + dYear.ToString("0000");
                    try
                    {
                        DateTime date = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                    }
                    catch
                    {
                        MessageBox.Show("Please enter a valid Date !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.Text = txtDate.Text.Replace("/", "");
                        txtDate.SelectionStart = 8;
                    }
                }
                else
                {
                    MessageBox.Show("Date format is not valid ! Please Specify in ddMMyyyy format ", "Invalid Date Format", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtDate.Focus();
                }
            }
            catch
            {
            }
        }

        public void GetStringFromDateForReporting(TextBox txtDate)
        {
            try
            {
                txtDate.Text = txtDate.Text.Replace("/", "");
                if (txtDate.Text.Length == 8)
                {
                    double dDate = Convert.ToDouble(txtDate.Text.Substring(0, 2)), dMonth = Convert.ToDouble(txtDate.Text.Substring(2, 2)), dYear = Convert.ToDouble(txtDate.Text.Substring(4, 4));
                    if (dDate < 1 || dDate > 31)
                    {
                        MessageBox.Show("Date is not valid : " + dDate, "Invalid Date ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 2;
                        return;
                    }
                    if (dMonth < 1 || dMonth > 12)
                    {
                        MessageBox.Show("Month is not valid : " + dMonth, "Invalid Month ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 4;
                        return;
                    }
                    if (dYear < 2000 || dYear > 2100)
                    {
                        MessageBox.Show("Year is not valid : " + dYear, "Invalid Year ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 8;
                        return;
                    }
                    txtDate.Text = dDate.ToString("00") + "/" + dMonth.ToString("00") + "/" + dYear.ToString("0000");
                    try
                    {
                        DateTime date = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                        if (date < MainPage.startFinDate || date > MainPage.endFinDate)
                        {
                            MessageBox.Show("Date must be between financial Date of Company !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtDate.Focus();
                            txtDate.Text = txtDate.Text.Replace("/", "");
                            txtDate.SelectionStart = 8;
                        }
                    }
                    catch
                    {
                        MessageBox.Show("Please enter a valid Date !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.Text = txtDate.Text.Replace("/", "");
                        txtDate.SelectionStart = 8;
                    }
                }
                else
                {
                    txtDate.Clear();
                }
            }
            catch
            {
            }
        }

        public void GetStringFromDateForReporting(TextBox txtDate, bool bRequired)
        {
            try
            {
                txtDate.Text = txtDate.Text.Replace("/", "");
                if (txtDate.Text.Length == 8)
                {
                    double dDate = Convert.ToDouble(txtDate.Text.Substring(0, 2)), dMonth = Convert.ToDouble(txtDate.Text.Substring(2, 2)), dYear = Convert.ToDouble(txtDate.Text.Substring(4, 4));
                    if (dDate < 1 || dDate > 31)
                    {
                        MessageBox.Show("Date is not valid : " + dDate, "Invalid Date ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 2;
                        return;
                    }
                    if (dMonth < 1 || dMonth > 12)
                    {
                        MessageBox.Show("Month is not valid : " + dMonth, "Invalid Month ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 4;
                        return;
                    }
                    if (dYear < 1950 || dYear > 2100)
                    {
                        MessageBox.Show("Year is not valid : " + dYear, "Invalid Year ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 8;
                        return;
                    }
                    txtDate.Text = dDate.ToString("00") + "/" + dMonth.ToString("00") + "/" + dYear.ToString("0000");
                    if (bRequired)
                    {
                        try
                        {
                            DateTime date = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                            if (date < MainPage.startFinDate || date > MainPage.endFinDate)
                            {
                                MessageBox.Show("Date must be between financial Date of Company !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtDate.Focus();
                                txtDate.Text = txtDate.Text.Replace("/", "");
                                txtDate.SelectionStart = 8;
                            }
                        }
                        catch
                        {
                            MessageBox.Show("Please enter a valid Date !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtDate.Focus();
                            txtDate.Text = txtDate.Text.Replace("/", "");
                            txtDate.SelectionStart = 8;
                        }
                    }
                }
                else
                {
                    txtDate.Clear();
                }
            }
            catch
            {
            }
        }

        public DateTime ConvertDateInExactFormat(string strDate)
        {
            if (strDate.Length == 10)
            {
                DateTime date = DateTime.ParseExact(strDate, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                return date;
            }
            else
                return MainPage.startFinDate;
        }

        public DateTime ConvertDateInExactFormat(string strDate, string strFormat)
        {
            DateTime date;
            if (strFormat != "")
                date = DateTime.ParseExact(strDate, strFormat, CultureInfo.CurrentCulture.DateTimeFormat);
            else
                date = Convert.ToDateTime(strDate);//, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
            return date;
        }

        public void GetStringFromDateForMultiQuarterReporting(TextBox txtDate)
        {
            try
            {
                txtDate.Text = txtDate.Text.Replace("/", "");
                if (txtDate.Text.Length == 8)
                {
                    double dDate = Convert.ToDouble(txtDate.Text.Substring(0, 2)), dMonth = Convert.ToDouble(txtDate.Text.Substring(2, 2)), dYear = Convert.ToDouble(txtDate.Text.Substring(4, 4));
                    if (dDate < 1 || dDate > 31)
                    {
                        MessageBox.Show("Date is not valid : " + dDate, "Invalid Date ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 2;
                        return;
                    }
                    if (dMonth < 1 || dMonth > 12)
                    {
                        MessageBox.Show("Month is not valid : " + dMonth, "Invalid Month ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 4;
                        return;
                    }
                    if (dYear < 2000 || dYear > 2100)
                    {
                        MessageBox.Show("Year is not valid : " + dYear, "Invalid Year ", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.SelectionStart = 8;
                        return;
                    }
                    txtDate.Text = dDate.ToString("00") + "/" + dMonth.ToString("00") + "/" + dYear.ToString("0000");
                    try
                    {
                        DateTime date = DateTime.ParseExact(txtDate.Text, "dd/MM/yyyy", CultureInfo.CurrentCulture.DateTimeFormat);
                        if (date < MainPage.multiQSDate || date > MainPage.multiQEDate)
                        {
                            MessageBox.Show("Date must be between financial Date of Company !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtDate.Focus();
                            txtDate.Text = txtDate.Text.Replace("/", "");
                            txtDate.SelectionStart = 8;
                        }
                    }
                    catch
                    {
                        MessageBox.Show("Please enter a valid Date !", "Date out of Range", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtDate.Focus();
                        txtDate.Text = txtDate.Text.Replace("/", "");
                        txtDate.SelectionStart = 8;
                    }
                }
                else
                {
                    txtDate.Clear();
                }
            }
            catch
            {
            }
        }

        public double GetAmountLimitValidationFromNet(string strPartyName, string strOrderCategory, ref string strTLockData)
        {
            string strTLockQuery = "";
            double dAmt = 0;
            try
            {
                strTLockData = "false";
                string[] strParty = strPartyName.Split(' ');
                if (strParty.Length > 0)
                {
                    string strQuery = "SET QUERY_GOVERNOR_COST_LIMIT 0; Select (AmtLimit-BalanceAmt) Amt,SSSName from (Select SSSName,MAX(AmtLimit) AmtLimit,SUM(BalanceAmt) BalanceAmt from (   Select SM.Other as SSSName,(AmountLimit+CAST(ExtendedAmt as Money)+ISNULL(OrderAmtLimit,0)) AmtLimit,( Select SUM(Amt) from (Select ISNULL(SUM(CAST(Amount as Money) * (CASE WHEN BA.Status='DEBIT' then 1 else -1 end)),0)Amt from BalanceAmount BA Where (CASE WHEN (BA.Description Not  Like('%CHQ%') AND BA.Description Not Like('%CHEQUE%')) then 1 else BA.ChequeStatus end) =1 and BA.AccountID in( Select AreaCode+AccountNo from SupplierMaster SM  Where SM.Other !='' and SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+CAST(SM1.AccountNo as varchar))='" + strParty[0] + "')) UNION ALL Select ISNULL(SUM(Amount),0) as Amt from AppOrderBooking AOB Where AOB.Status!='HOLD' and InsertStatus=1 and SalePartyID in (  Select AreaCode+AccountNo from SupplierMaster SM  Where SM.Other !='' and SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+CAST(SM1.AccountNo as varchar))='" + strParty[0] + "')) UNION ALL "
                                   + " Select ISNULL(SUM(((CAST(Quantity as Money) - (AdjustedQty + CancelQty)) * (Amount / CAST(Quantity as money)))),0) as Amt from OrderBooking OB Where Status='PENDING' and SalePartyID in (  Select AreaCode+AccountNo from SupplierMaster SM  Where SM.Other !='' and SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+CAST(SM1.AccountNo as varchar))='" + strParty[0] + "')) UNION ALL Select ISNULL(SUM(GR.NetAmount),0) as Amt from GoodsReceive GR Where SaleBill='PENDING' and SalePartyID in ( Select AreaCode+AccountNo from SupplierMaster SM  Where SM.Other !='' and SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+CAST(SM1.AccountNo as varchar))='" + strParty[0] + "')))Balance) BalanceAmt from SupplierMaster SM Where (SM.AreaCode+CAST(SM.AccountNo as varchar))='" + strParty[0] + "')Bal Group by SSSName)Bal ";
                    //string strQuery = "  SET QUERY_GOVERNOR_COST_LIMIT 0; Select (AmtLimit-BalanceAmt) Amt,SSSName from (Select SSSName,MAX(AmtLimit) AmtLimit,SUM(BalanceAmt) BalanceAmt from ( "
                    //                + " Select SM.Other as SSSName,(AmountLimit+CAST(ExtendedAmt as Money)+ISNULL(OrderAmtLimit,0)) AmtLimit, "
                    //                + " (Select SUM(Amt) from (Select ISNULL(SUM(CAST(Amount as Money) * (CASE WHEN BA.Status='DEBIT' then 1 else -1 end)),0)Amt from BalanceAmount BA Where BA.AccountID=(SM.AreaCode+SM.AccountNo)  and (CASE WHEN (BA.Description Not  Like('%CHQ%') AND BA.Description Not Like('%CHEQUE%')) then 1 else BA.ChequeStatus end) =1  "
                    //                + " UNION ALL Select ISNULL(SUM(Amount),0) as Amt from AppOrderBooking AOB Where AOB.Status!='HOLD' and InsertStatus=1 and SalePartyID=(AreaCode+AccountNo) UNION ALL Select ISNULL(SUM(((CAST(Quantity as Money) - (AdjustedQty + CancelQty)) * (Amount / CAST(Quantity as money)))),0) as Amt from OrderBooking OB Where Status='PENDING' and SalePartyID=(AreaCode+AccountNo) UNION ALL  Select ISNULL(SUM(GR.NetAmount),0) as Amt from GoodsReceive GR Where SaleBill='PENDING' and SalePartyID=(AreaCode+AccountNo)) Balance) BalanceAmt"
                    //                + " from SupplierMaster SM Where SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+CAST(SM1.AccountNo as varchar))='" + strParty[0] + "')) Bal  Group by SSSName) Bal ";

                    DataTable _dt = GetDataTable(strQuery);
                    if (_dt.Rows.Count > 0)
                    {
                        dAmt = ConvertObjectToDouble(_dt.Rows[0]["Amt"]);
                        string strOldPartyName = Convert.ToString(_dt.Rows[0]["SSSName"]);
                        if (strOldPartyName != "")
                        {
                            if (strOrderCategory != "*")
                                strTLockQuery = " (Select TransactionLock from SupplierMaster Where GroupName='SALES PARTY' and Name='" + strOldPartyName + "') ";
                            else
                                strTLockQuery = "0";
                            strQuery = "  SET QUERY_GOVERNOR_COST_LIMIT 0; IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID (N'[dbo].[BalanceAmount]') AND type in (N'U')) BEGIN "
                                     + " Select SUM(Amt) as _Amt," + strTLockQuery + " as TransactionLock  from (Select ISNULL(SUM(CAST(Amount as Money)* (CASE WHEN BA.Status='DEBIT' then 1 else -1 end)),0)Amt from BalanceAmount BA Where PartyName='" + strOldPartyName + "'  UNION All Select ISNULL(SUM(((CAST(Quantity as Money) - (AdjustedQty + CancelQty)) * (Amount / CAST(Quantity as money)))),0) as Amt from OrderBooking OB Where Status='PENDING' and S_Party='" + strOldPartyName + "' UNION ALL  Select ISNULL(SUM(CAST(PR.NetAmt as money)),0) as Amt from PurchaseRecord PR Where SaleStatus='PENDING' and SalesParty='" + strOldPartyName + "') Balance  end else begin "
                                     + " Select SUM(Amt) as _Amt," + strTLockQuery + " as TransactionLock from (Select ISNULL(SUM(CAST(Amount as Money)* (CASE WHEN BA.Status='DEBIT' then 1 else -1 end)),0)Amt from _BalanceAmount BA Where PartyName='" + strOldPartyName + "' Union All Select -ISNULL(SUM(CAST(Amount as Money)),0)Amt from _BalanceAmount BA Where BA.Status='CREDIT' and PartyName='" + strOldPartyName + "' ) Balance end ";

                            DataTable _dTM = SearchDataOnOld.GetDataTable_M(strQuery);
                            if (_dTM.Rows.Count > 0)
                            {
                                dAmt -= ConvertObjectToDouble(_dTM.Rows[0]["_Amt"]);
                                if (strOrderCategory != "*")
                                {
                                    if (Convert.ToString(_dTM.Rows[0]["TransactionLock"]) != "")
                                    {
                                        if (Convert.ToBoolean(_dTM.Rows[0]["TransactionLock"]))
                                            strTLockData = "true";
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch(Exception ex) {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                    throw ex;
            }

            return dAmt;
        }


        public int AdjustAllDataByLedger(string strQuery, string strMultiQuery, string strDataBase)
        {
            int count = 0;
            try
            {
                if (strDataBase != "" && strMultiQuery != "")
                {

                    string strCon = MainPage.con.ConnectionString;
                    strCon = strCon.Replace(MainPage.strDataBaseFile, strDataBase);
                    if (strCon.Contains("EXPRESS"))
                        strCon += "password=" + MainPage.strDBPwd + ";";
                    else
                        strCon += "password=" + MainPage.strLiveDBPassword + ";";

                    SqlConnection con = new SqlConnection(strCon);
                    con.Open();
                    SqlTransaction mTransaction = con.BeginTransaction();
                    try
                    {
                        SqlCommand cmd = new SqlCommand(strMultiQuery, con, mTransaction);
                        count = cmd.ExecuteNonQuery();
                        if (count > 0)
                        {
                            count = ExecuteMyQuery(strQuery);
                            if (count > 0)
                                mTransaction.Commit();
                        }
                    }
                    catch
                    {
                        mTransaction.Rollback();
                    }
                }
                else
                    count = ExecuteMyQuery(strQuery);
            }
            catch
            {
            }
            finally { MainPage.CloseConnection(); }
            return count;
        }

        public static bool CheckAmountAdjustmentByVCode(string strVCode)
        {
            bool partyStatus = true;
            try
            {
                if (MainPage.strOnlineDataBaseName != "" && MainPage.strLiveDataBaseIP != "")
                {
                    string strUserName = Convert.ToString(DBConnection.DBCon.LiveDBUserName);
                    if (strUserName == "")
                        strUserName = MainPage.strOnlineDataBaseName;
                    SqlConnection netCon = new SqlConnection(@"Data Source=" + MainPage.strLiveDataBaseIP + ";Initial Catalog=" + MainPage.strOnlineDataBaseName + "; User Id=" + strUserName + ";Password=" + MainPage.strLiveDBPassword + ";");
                    if (netCon.State == ConnectionState.Closed)
                    {
                        netCon.Open();
                    }
                    string strQuery = "Select BalanceID from BalanceAmount Where (VoucherCode+' '+CAST(VoucherNo as varchar))='" + strVCode + "' and (VoucherCode+' '+CAST(VoucherNo as varchar)) not in (Select (VoucherCode+' '+CAST(VoucherNo as varchar)) from BalanceAmount Where (VoucherCode+' '+CAST(VoucherNo as varchar))='" + strVCode + "' and Tick='True')";
                    SqlCommand cmd = new SqlCommand(strQuery, netCon);
                    object objBalanceID = cmd.ExecuteScalar();
                    if (Convert.ToString(objBalanceID) == "" || objBalanceID == null)
                    {
                        partyStatus = false;
                        MessageBox.Show("This amount is Adjusted in Party account ! Please unadjust this Account on Internet after that you can Change this Amount  ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            catch
            {
                MessageBox.Show("Please connect the Internet Connection after that you can change this Amount ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                partyStatus = false;
            }
            return partyStatus;
        }

        public static bool CheckAmountAdjustmentByJournalID(string strVCode)
        {
            bool partyStatus = true;
            try
            {
                if (MainPage.strOnlineDataBaseName != "" && MainPage.strLiveDataBaseIP != "")
                {                  
                    string strQuery = "Select BalanceID from BalanceAmount Where JournalID='" + strVCode + "' and JournalID not in (Select JournalID from BalanceAmount Where JournalID='" + strVCode + "' and Tick='True')";

                    object objBalanceID = NetDBAccess.ExecuteMyScalar(strQuery);

                    if (Convert.ToString(objBalanceID) == "" || objBalanceID == null)
                    {
                        partyStatus = false;
                        MessageBox.Show("This amount is Adjusted in Party account ! Please unadjust this Account on Internet after that you can Change this Amount  ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            catch
            {
                MessageBox.Show("Please connect the Internet Connection after that you can change this Amount ", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                partyStatus = false;
            }
            return partyStatus;
        }

        public void KeyHandlerPoint(object sender, KeyPressEventArgs e, int count)
        {
            try
            {
                TextBox txt = sender as TextBox;
                Char pressedKey = e.KeyChar;
                if (pressedKey != Convert.ToChar(8))
                {
                    if (txt.Text.Contains("."))
                    {
                        string[] strSplit = txt.Text.Split('.');
                        if (strSplit.Length > 1)
                        {
                            int index = txt.SelectionStart, pointIndex = txt.Text.IndexOf('.');

                            if (strSplit[1].Length == count && index > pointIndex)
                            {
                                e.Handled = true;
                                return;
                            }
                        }
                        if (Char.IsLetter(pressedKey) || Char.IsSeparator(pressedKey) || Char.IsPunctuation(pressedKey) || Char.IsSymbol(pressedKey))
                        {
                            e.Handled = true;
                        }
                        else
                        {
                            e.Handled = false;
                        }
                    }
                    else
                    {
                        if (pressedKey == Convert.ToChar(46) && count > 0)
                        {
                            e.Handled = false;
                        }
                        else
                        {
                            if (Char.IsLetter(pressedKey) || Char.IsSeparator(pressedKey) || Char.IsPunctuation(pressedKey) || Char.IsSymbol(pressedKey))
                            {
                                e.Handled = true;
                            }
                            else
                            {
                                e.Handled = false;
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public void KeyHandlerPoint_OnlySign(object sender, KeyPressEventArgs e)
        {
            try
            {                
                Char pressedKey = e.KeyChar;
                if (pressedKey == Convert.ToChar(8) || pressedKey == Convert.ToChar(43) || pressedKey == Convert.ToChar(45))
                    e.Handled = false;
                else
                    e.Handled = true;

            }
            catch
            {
            }
        }

        public void ValidateSpecialChar(object sender, KeyPressEventArgs e)
        {
            try
            {
                TextBox txt = sender as TextBox;
                if (txt != null)
                {
                    if (e.KeyChar == Convert.ToChar(39) || e.KeyChar == Convert.ToChar(91) || e.KeyChar == Convert.ToChar(93) || e.KeyChar == Convert.ToChar(123) || e.KeyChar == Convert.ToChar(125) || e.KeyChar == Convert.ToChar(126) || e.KeyChar == Convert.ToChar(96))
                        e.Handled = true;
                    else if (Char.IsWhiteSpace(e.KeyChar) && e.KeyChar != Convert.ToChar(13))
                    {
                        if (txt.Text.Length == 0 || txt.SelectionStart == 0)
                            e.Handled = true;
                    }
                    else if (!Char.IsLetter(e.KeyChar) && !Char.IsNumber(e.KeyChar) && e.KeyChar != Convert.ToChar(8))
                    {
                        e.Handled = true;
                    }
                }
            }
            catch
            {
            }
        }

        public void ValidateSpace(object sender, KeyPressEventArgs e)
        {
            try
            {
                TextBox txt = sender as TextBox;
                if (txt != null)
                {
                    if (e.KeyChar == Convert.ToChar(39) || e.KeyChar == Convert.ToChar(91) || e.KeyChar == Convert.ToChar(93) || e.KeyChar == Convert.ToChar(123) || e.KeyChar == Convert.ToChar(125) || e.KeyChar == Convert.ToChar(126) || e.KeyChar == Convert.ToChar(96))
                        e.Handled = true;
                    else if (Char.IsWhiteSpace(e.KeyChar) && e.KeyChar != Convert.ToChar(13))
                    {
                        if (txt.Text.Length == 0 || txt.SelectionStart == 0)
                            e.Handled = true;
                    }
                }
            }
            catch
            {
            }
        }

        public void ValidateAllSpace(object sender, KeyPressEventArgs e)
        {
            try
            {
                TextBox txt = sender as TextBox;
                if (txt != null)
                {
                    if (e.KeyChar == Convert.ToChar(39) || e.KeyChar == Convert.ToChar(91) || e.KeyChar == Convert.ToChar(93) || e.KeyChar == Convert.ToChar(123) || e.KeyChar == Convert.ToChar(125) || e.KeyChar == Convert.ToChar(126) || e.KeyChar == Convert.ToChar(96))
                        e.Handled = true;
                    else if (Char.IsWhiteSpace(e.KeyChar) && e.KeyChar != Convert.ToChar(13))
                    {
                        e.Handled = true;
                    }
                }
            }
            catch
            {
            }
        }

        public void ValidateRichTextBoxSpace(object sender, KeyPressEventArgs e)
        {
            try
            {
                RichTextBox txt = sender as RichTextBox;
                if (txt != null)
                {
                    if (e.KeyChar == Convert.ToChar(39) || e.KeyChar == Convert.ToChar(91) || e.KeyChar == Convert.ToChar(93) || e.KeyChar == Convert.ToChar(123) || e.KeyChar == Convert.ToChar(125) || e.KeyChar == Convert.ToChar(126) || e.KeyChar == Convert.ToChar(96))
                        e.Handled = true;
                    else if (Char.IsWhiteSpace(e.KeyChar))
                    {
                        int txtLength = txt.SelectionLength;
                        if (txtLength > 0 && txt.SelectionStart == 0)
                        {
                            e.Handled = true;
                            txt.Text = txt.Text.Remove(0, txtLength);
                        }
                        else if (txt.Text.Length == 0 || txt.SelectionStart == 0)
                            e.Handled = true;
                    }
                }
            }
            catch
            {
            }
        }

        public DataTable GetMultiCompanyNameAndFinDate(string strCode)
        {
            DataTable dt = new DataTable();
            try
            {
                if (strCode != "")
                {
                    strCode = "A" + strCode;
                    MainPage.ChangeDataBase(strCode);
                    if (MainPage.con.Database == strCode)
                    {
                        SqlDataAdapter adap = new SqlDataAdapter("Select ('A'+(CASE WHEN CompanyName Like('%STYLO%') then '0' else '' end)+CAST(CompanyID as varchar)) as CCode,CompanyName,Convert(varchar,Fin_Y_Starts,103) SDate,Convert(varchar,Fin_Y_Ends,103)EDate from Company", MainPage.con);
                        adap.Fill(dt);
                    }
                }
            }
            catch
            {
            }
            return dt;
        }

        public string GetGroupNameFromFullName(string strParty)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            SqlCommand cmd = new SqlCommand("Select UPPER(GroupName) from SupplierMaster where ((ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name)='" + strParty + "' OR Name='" + strParty + "') and GroupName!='Sub Party'", MainPage.con);
            object objValue = cmd.ExecuteScalar();
            return Convert.ToString(objValue);
        }

        public double ConvertObjectToDouble(object objValue)
        {
            double dValue = 0;
            try
            {
                if (Convert.ToString(objValue) != "")
                    dValue = Convert.ToDouble(objValue);

            }
            catch (Exception ex)
            {
            }
            return dValue;
        }

        public double ConvertObjectToDoubleWithSign(object objValue)
        {
            double dValue = 0;
            try
            {
                string strValue = Convert.ToString(objValue);
                string[] strDetails = strValue.Split('+');
                foreach (string str in strDetails)
                {
                    if (str != "")
                        dValue += Convert.ToDouble(str);
                }
            }
            catch (Exception ex)
            {
            }
            return dValue;
        }

        public static int ConvertObjectToIntStatic(object objValue)
        {
            int dValue = 0;
            try
            {
                if (Convert.ToString(objValue) != "")
                    dValue = Convert.ToInt32(objValue);
            }
            catch
            {
            }
            return dValue;
        }
        public int ConvertObjectToInt(object objValue)
        {
            int dValue = 0;
            try
            {
                if (Convert.ToString(objValue) != "")
                    dValue = Convert.ToInt32(objValue);
            }
            catch
            {
            }
            return dValue;
        }
        public static double ConvertObjectToDoubleStatic(object objValue)
        {
            double dValue = 0;
            try
            {
                if (Convert.ToString(objValue) != "")
                    dValue = Convert.ToDouble(objValue);
            }
            catch
            {
            }
            return dValue;
        }

        protected internal string GetPartyEmailID(string strFullName)
        {
            string strEmailID = "", strQuery = "";
            try
            {
                strQuery = "Select EmailID from SupplierMaster Where EmailID!='' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strFullName + "' ";
                object objValue = ExecuteMyScalar(strQuery);
                strEmailID = Convert.ToString(objValue);
            }
            catch
            {
            }
            return strEmailID;
        }


        //protected internal static string GetDesignerEmailBody(string strHeader, string strMsg)
        //{
        //    string strNewMsg = "<h1 style='text-align:center; color: #153643; font-family: Arial,sans-serif;font-size: 24px; '>" + strHeader + "</h1><br/>"
        //                                + "  <div style='float: left; width:95%; text-align:left; padding-left:10px'>  "
        //                                + " <p style='color: #153643;font-size: 16px; line-height: 20px; padding:11px;'>" + strMsg + " </p>"
        //                                + " <div style='width:98%; height:100%; margin-left:10px; margin-top:11px; '> "
        //                                + " <div style='float:left;  margin-top:10px; width:95%; padding-top:15px;  padding-bottom:15px; border-bottom:1px solid #e5e5e5; font-size: 15px;border-top:2px solid #ee4c50; border-bottom:2px solid #ee4c50;'>Regards<br/>"+MainPage.strCompanyName+" </div></div></div>";

        //    return strNewMsg;
        //}


        protected internal static string GetDesignerEmailBody(string strHeader, string strMsg)
        {
            string strNewMsg = "";
            if ((MainPage.strCompanyName.Contains("STYLO") || MainPage.strCompanyName.Contains("SARAOGI")) && MainPage.strSoftwareType == "AGENT")
            {
                DataTable dt = GetDataTableRecord("Select FullCompanyName,('<b>Adress :</b> '+Address +'<br /> '+ StateName+'-'+PinCode)  Address,'<b>GSTN No :</b> '+GSTNo as GSTNo,'<b>Email id :</b> '+EmailID as EmailID,'<b>Phone No. :</b> '+ (STDNo+'-'+PhoneNo) as PhoneNo from CompanyDetails");
                string strHeaderpath = "https://www.ssspltd.com/images/sss_header.jpg";
                if (MainPage.strCompanyName.Contains("STYLO"))
                    strHeaderpath = "http://sssdekho.com/images/SSSStyloHeader.jpg";

                strNewMsg = " <div style='width:75%; float:left; background-color:#501f0c; height:595px; padding:15px;'>"
                             + " <div style='width:auto; min-height:511px; height:auto; background-color:White;'>"
                             + " <div style='height:80px; background-color:#501f0c;  border-bottom:3px solid #ee4c50;'> "
                             + " <img src='" + strHeaderpath + "' style='height:auto; width:100%;'/></div>"
                             + " <h1 style='text-align:center; color: #153643; font-family: Arial,sans-serif;font-size: 24px; '>" + strHeader + "</h1>"
                             + " <p style='color: #153643; font-family: Arial,sans-serif; font-size: 16px; line-height: 20px;  padding:11px 51px 11px 51px;'>" + strMsg + "</p>"
                             + " <div style=' width:90%; height:100%; margin-left:51px; margin-top:11px;'>"
                             + " <div style='float:left;  margin-top:21px; width:90%; padding-top:21px; padding-bottom:21px; border-bottom:1px solid #e5e5e5;  font-family: Arial,sans-serif; font-size: 15px;border-top:2px solid #ee4c50; border-bottom:2px solid #ee4c50;'>"
                             + " This is a system generated mail. Please do not reply to this email ID."
                             //+ " For more information please visit our site "
                             //+ " <a href='https://www.ssspltd.com' target='_blank' style='margin-left:11px; background-color:#d43f3a; padding:5px; border-radius:5px; color:White; text-decoration:none;'>www.ssspltd.com</a>"
                             + " </div><div style='float:left; margin-left:1px; margin-bottom:51px; width:100%; height:100%; margin-top:51px; color:#7c7979;line-height: 15px'>";
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];
                    strNewMsg += " Warm & Regards <br />-----------------<br />" + row["FullCompanyName"] + " <br />"
                              + row["Address"] + " <br />" + row["GSTNo"] + " <br />" + row["EmailID"] + " <br />" + row["PhoneNo"] + " <br /> "
                              + " <b>Website URL : </b> <a href='https://ssspltd.com' target='_blank' style='text-decoration:none; color:#d43f3a;'>www.ssspltd.com</a></div></div></div>"
                              + " <div style='height:79px; background-color:#aeabab;  border-bottom:5px solid #ee4c50; text-align:center;'> "
                              + " <a href='https://ssspltd.com' target='_blank' style='color:white;  font-family:Lucida Calligraphy; font-size: 21px; text-decoration:none; margin-top:21PX; margin-left:11PX;'>www.ssspltd.com</a></div> </div>";
                }
                else
                {
                    strNewMsg += " Warm & Regards <br />-----------------<br />SSS Team<br />"
                          + " <b>Email Id : </b> saraogi285@gmail.com<br />"
                          + " <b>Website URL : </b> <a href='http://ssspltd.com' target='_blank' style='text-decoration:none; color:#d43f3a;'>www.ssspltd.com</a></div></div></div>"
                          + " <div style='height:79px; background-color:#aeabab;  border-bottom:5px solid #ee4c50; text-align:center;'> "
                          + " <a href='http://ssspltd.com' target='_blank' style='color:white;  font-family:Lucida Calligraphy; font-size: 21px; text-decoration:none; margin-top:21PX; margin-left:11PX;'>www.ssspltd.com</a></div> </div>";
                }

                strNewMsg = strNewMsg.Replace('|', '"');
            }
            else
                strNewMsg = strMsg;

            return strNewMsg;
        }

        protected internal static string GetDesignerEmailBody_TEST(string strHeader, string strMsg)
        {
            string strNewMsg = "";
            if (MainPage.strCompanyName.Contains("STYLO") || MainPage.strCompanyName.Contains("SARAOGI") || MainPage.strCompanyName.Contains("TEST 20-21"))
            {
                DataTable dt = GetDataTableRecord("Select FullCompanyName,('<b>Adress :</b> '+Address +'<br /> '+ StateName+'-'+PinCode)  Address,'<b>GSTN No :</b> '+GSTNo as GSTNo,'<b>Email id :</b> '+EmailID as EmailID,'<b>Phone No. :</b> '+ (STDNo+'-'+PhoneNo) as PhoneNo from CompanyDetails");
                string strHeaderpath = "https://www.ssspltd.com/images/sss_header.jpg";


                var HeaderImg = Convert.ToBase64String(MainPage._headerImage);
                var imgSrcHeader = String.Format("data:image/jpg;base64,{0}", HeaderImg);

                var Brandlogo = Convert.ToBase64String(MainPage._brandLogo);
                var imgSrcLogo = String.Format("data:image/jpg;base64,{0}", Brandlogo);

                if (MainPage.strCompanyName.Contains("STYLO"))
                    strHeaderpath = "http://sssdekho.com/images/SSSStyloHeader.jpg";

                strNewMsg = " <body> "
                             + "<table class='ze_tableView' style='font-size: 8pt;margin-left:auto;margin-right:auto; font-family: Arial, Arial, Helvetica, sans-serif; width: 100%; border-collapse: collapse; color: black; border: 0px solid #797474;' cellspacing='2' cellpadding='2' border='0'>"
                             + "<tbody>"
                             + "<tr>"
                             + " <td style = 'width:30%'><div><img src='" + imgSrcLogo + "' style='display: block;margin-left:auto;margin-right:20px;' class='responsive;' width='85' height='65' /></div></td>"
                             + "<td style = 'width: 40%;'><div><img src='" + strHeaderpath + "' style='display: block;margin-left:auto;margin-right:auto;' class='responsive;' width='500' height='75' /></div></td>"
                             + "<td style = 'width:30%'></td>  "
                             + "</tr>"
                             + "</tbody>"
                             + " </table>"


                             + "  <table class='ze_tableView' style='font-size: 8pt;margin-left:auto;margin-right:auto; font-family: Arial, Arial, Helvetica, sans-serif; width: 100%; border-collapse: collapse; color: purple;background-color:#bfbfbf; border: 0px solid #797474;' cellspacing='2' cellpadding='2' border='0'>"
                             + "  <tbody>"
                             + "  <tr>"
                             + "  <td style = 'width:40%'><div style='text-align: center;font-size:25px;font-weight:bold;'>" + strHeader + "</div></td>"
                             + " </tr>"
                             + " </tbody>"
                             + " </table>"


                             + " <table class='ze_tableView' style='font-size: 11pt;margin-left:20px;margin-right:20px; font-family: Arial, Arial, Helvetica, sans-serif; width: 100%; border-collapse: collapse; color: #666666; border: 0px solid #797474;' cellspacing='2' cellpadding='2' border='0'>"
                             + " <tbody>"
                             + " <tr>"
                             + " <td style = 'width:34%'>"
                             + " <br />"
                             + " <div>" + strMsg + "</div>"
                             + " </td>"
                             + " </tr>"
                             + " <tr>"
                             + " <td style = 'width:34%'>"
                             + "  <hr style='height:2px;border-width:0;color:gray;background-color:red'>"
                             + " <br />"
                             + "  <div>This is a system generated mail.Please do not reply to this email ID.</div>"
                             + " <br />"
                             + " <hr style = 'height:2px;border-width:0;color:gray;background-color:red'>"
                             + " <br />"
                             + "  <br />"
                             + " </td>"
                             + " </tr>";



                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];
                    strNewMsg += " <div class='align-right' style='text-align: right;'></div><br /><br />"
                              + "<tr>"
                              + " <td>"
                              + " <div> Warm & Regards </div>"
                              + " <div> -----------------</div>"
                              + " <div style = 'font -size:13pt'> " + row["FullCompanyName"] + " </div>"
                              + " <div style = 'margin -top:7px'>" + row["Address"] + " </div>"
                              + " <div style = 'margin -top:7px'>" + row["GSTNo"] + "</div>"
                              + " <div style = 'margin -top:7px'><strong> Email:</strong><a style = 'color:purple;' href = '" + row["EmailID"] + "' target = '_blank'> saraogi285@ssspltd.com </a></div>"
                              + " <div style = 'margin -top:7px'>" + row["PhoneNo"] + " </div>"
                              + " <div style = 'margin -top:7px'><strong> Website URL:</strong><a style = 'color:purple;' href = 'http://ssspltd.com' target = '_blank'> www.ssspltd.com </a></div>"
                              + " </td>"
                              + " </tr>"
                              + " </tbody>"
                              + " </table>"
                              + " <br />"
                              + " <br />"

                              + " <table class='ze_tableView' style='font-size: 11pt;margin-left:auto;margin-right:auto; font-family: Arial, Arial, Helvetica, sans-serif; width: 100%; border-collapse: collapse; color:purple; border: 0px solid #797474;' cellspacing='2' cellpadding='2' border='0'>"
                              + " <tbody>"
                              + " <tr>"
                              + " <td style = 'width:100%;height:30pt;text-align:center;background-color:#bfbfbf'>"
                              + " <div style='font -size:17pt;font-style:italic;'>www.ssspltd.com</div>"
                              + " </td>"
                              + " </tr>"
                              + " <tr style = 'height:10pt;background-color:firebrick;'>"
                              + " <td></td>"
                              + " </tr>"
                              + " </tbody>"
                              + " </table>"
                              + "</body>";




                    //                                                        " Warm & Regards <br />-----------------<br />" + row["FullCompanyName"] + " <br />"
                    //+ row["Address"] + " <br />" + row["GSTNo"] + " <br />" + row["EmailID"] + " <br />" + row["PhoneNo"] + " <br /> "
                    //+ " <b>Website URL : </b> <a href='http://ssspltd.com' target='_blank' style='text-decoration:none; color:#d43f3a;'>www.ssspltd.com</a></div></div></div>"
                    //+ " <div style='height:79px; background-color:#aeabab;  border-bottom:5px solid #ee4c50; text-align:center;'> "
                    //+ " <a href='http://ssspltd.com' target='_blank' style='color:white;  font-family:Lucida Calligraphy; font-size: 21px; text-decoration:none; margin-top:21PX; margin-left:11PX;'>www.ssspltd.com</a></div> </div>";
                }
                else
                {
                    strNewMsg += "<tr>"
                              + " <td>"
                              + " <div> Warm & Regards </div>"
                              + " <div> -----------------</div>"
                              + " <div style = 'font -size:13pt'> SARAOGI SUPER SALES PVT LTD </div>"
                              + " <div style = 'margin -top:7px'><strong> Adress :</strong> X - 49, Pratap Gali, Gandhi Nagar, DELHI - 110031 </div>"
                              + " <div style = 'margin -top:7px'><strong> GSTN No:</strong> 07AAYCS8982Q1ZQ </div>"
                              + " <div style = 'margin -top:7px'><strong> Email id:</strong><a style = 'color:purple;' href = 'mailto:saraogi285@ssspltd.com' target = '_blank'> saraogi285@ssspltd.com </a></div>"
                              + " <div style = 'margin -top:7px'><strong> Phone No. :</strong> 011 - 22071233 </div>"
                              + " <div style = 'margin -top:7px'><strong> Website URL:</strong><a style = 'color:purple;' href = 'http://ssspltd.com' target = '_blank'> www.ssspltd.com </a></div>"
                              + " </td>"
                              + " </tr>"
                              + " </tbody>"
                              + " </table>"
                              + " <br />"
                              + " <br />"

                              + " <table class='ze_tableView' style='font-size: 11pt;margin-left:auto;margin-right:auto; font-family: Arial, Arial, Helvetica, sans-serif; width: 100%; border-collapse: collapse; color:purple; border: 0px solid #797474;' cellspacing='2' cellpadding='2' border='0'>"
                              + " <tbody>"
                              + " <tr>"
                              + " <td style = 'width:100%;height:30pt;text-align:center;background-color:#bfbfbf'>"
                              + " <div style='font -size:17pt;font-style:italic;'>www.ssspltd.com</div>"
                              + " </td>"
                              + " </tr>"
                              + " <tr style = 'height:10pt;background-color:firebrick;'>"
                              + " <td></td>"
                              + " </tr>"
                              + " </tbody>"
                              + " </table>"
                              + "</body>";
                }

                strNewMsg = strNewMsg.Replace('|', '"');
            }
            else
                strNewMsg = strMsg;

            return strNewMsg;
        }


        public double CheckAmountLimitValidation(string strParty, string strSQuery)
        {
            double dAmt = 0;
            try
            {
                if (MainPage.mymainObject.bCreditLimitmanagement)
                {
                    if (MainPage.strOnlineDataBaseName != "" && MainPage.IsConnectedToInternet() && MainPage.mymainObject.bMultiBranch)
                        dAmt = NetDBAccess.CheckAmountLimitValidationFromNet(strParty, strSQuery);
                    else
                        dAmt = CheckAmountLimitValidationFromLocal(strParty, strSQuery);
                }
            }
            catch (Exception ex)
            {
                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                    throw ex;
            }
            return dAmt;
        }

        public double CheckAmountLimitValidationFromLocal(string strPartyName, string strSQuery)
        {
            double dAmt = 0;
            string[] strParty = strPartyName.Split(' ');
            if (strParty.Length > 1)
            {
                string strQuery = "Select (AmtLimit-BalanceAmt " + strSQuery + ") Amt from (Select MAX(AmtLimit) AmtLimit,SUM(BalanceAmt) BalanceAmt from ( "
                                   + " Select (CAST(AmountLimit as Money)+CAST(ExtendedAmt as Money)) AmtLimit, "
                                   + " (Select SUM(Amt) from (Select ISNULL(SUM(CAST(ISNULL(Amount,0) as Money)),0)Amt from BalanceAmount Where Status='DEBIT' and AccountID=(ISNULL(SM.AreaCode,'')+ISNULL(SM.AccountNo,'')) Union All Select -ISNULL(SUM(CAST(ISNULL(Amount,0) as Money)),0)Amt from BalanceAmount Where Status='CREDIT' and AccountID=(ISNULL(SM.AreaCode,'')+ISNULL(SM.AccountNo,''))) Balance) BalanceAmt "
                                   + " from SupplierMaster SM Where SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+CAST(SM1.AccountNo as varchar))='" + strParty[0] + "')) Bal) Bal ";


                object objValue = ExecuteMyScalar(strQuery);
                dAmt = ConvertObjectToDouble(objValue);
            }
            return dAmt;
        }

        public static string GetFullPartyName(string strShortCode, string strCode)
        {
            string strGroup = "", strName = "";
            try
            {
                if (strCode == "SALESPARTY")
                    strGroup = " and GroupName in ('SUNDRY DEBTORS') ";
                else if (strCode == "SUBPARTY")
                    strGroup = " and GroupName in ('SUB PARTY') ";
                else if (strCode == "PURCHASEPARTY")
                    strGroup = " and GroupName in ('SUNDRY CREDITOR') ";
                else if (strCode == "CASHPARTY")
                    strGroup = " and GroupName in ('CASH A/C') ";
                else if (strCode == "BANKPARTY")
                    strGroup = " and GroupName in ('BANK A/C') ";
                else if (strCode == "ALLPARTY")
                    strGroup = " and GroupName not in ('SUB PARTY') ";
                else if (strCode == "PACKERNAME")
                    strGroup = " and Category='PACKER'  ";
                else if (strCode == "OTHERPARTY")
                    strGroup = " and GroupName not in ('SUNDRY CREDITOR','SUNDRY DEBTORS','SUB PARTY') ";

                strShortCode = strShortCode.Replace("\0", "");
                string strQuery = "Select (AreaCode+CAST(AccountNo as varchar)+ ' '+Name) FullName from SupplierMaster Where (AreaCode+CAST(AccountNo as varchar))='" + strShortCode + "' " + strGroup;
                object objValue = ExecuteMyScalar(strQuery);

                strName = Convert.ToString(objValue);
            }
            catch
            {
            }
            return strName;
        }

        public string GetSafePartyName(string strFullName)
        {
            string strName = "";
            int index = strFullName.IndexOf(" ");
            strName = strFullName.Substring(index + 1);
            return strName.Replace("M/S", "").Trim();
        }


        public bool CheckTransactionLockWithBlackList(string strSalesParty, ref bool _bBlackListed)
        {
            string strQuery = " Select TransactionLock,BlackList from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strSalesParty + "' ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                _bBlackListed = Convert.ToBoolean(dt.Rows[0]["BlackList"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;
        }

        public bool CheckTransactionLockWithBlackList_OrangeList(string strSalesParty, ref bool _bBlackListed, ref bool _bOrangeList)
        {
            string strQuery = " Select TransactionLock,BlackList from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strSalesParty + "' ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                _bBlackListed = Convert.ToBoolean(dt.Rows[0]["BlackList"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;

        }
        public bool CheckTransactionLockWithBlackListGSTNo(string strSalesParty, ref bool _bBlackListed, ref string strGSTNo, ref string strStateName)
        {
            string strQuery = " Select TransactionLock,BlackList,GSTNo,State from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strSalesParty + "' ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                _bBlackListed = Convert.ToBoolean(dt.Rows[0]["BlackList"]);
                strGSTNo = Convert.ToString(dt.Rows[0]["GSTNo"]);
                strStateName = Convert.ToString(dt.Rows[0]["State"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;
        }


        public bool CheckTransactionLockWithBlackListFromGSTNo(string strGSTNo, ref bool _bBlackListed, ref string strPartyName)
        {
            if (strGSTNo.Length > 9)
            {
                string strQuery = " Select (AreaCode+AccountNo+' '+Name)PartyName, TransactionLock,BlackList from SupplierMaster Where GroupName ='SUNDRY CREDITOR' and GSTNo Like ('%" + strGSTNo + "%') Order by Transactionlock,BlackList";
                DataTable dt = GetDataTable(strQuery);
                if (dt != null && dt.Rows.Count > 0)
                {
                    _bBlackListed = Convert.ToBoolean(dt.Rows[0]["BlackList"]);
                    strPartyName = Convert.ToString(dt.Rows[0]["PartyName"]);
                    return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);

                }
            }
            return false;
        }

        public bool CheckTransactionLockWithBlackListStateNameFromGSTNo(string strGSTNo, ref bool _bBlackListed, ref string strPartyName, ref string strStateName)
        {
            if (strGSTNo.Length > 9)
            {
                string strQuery = " Select (AreaCode+AccountNo+' '+Name)PartyName, TransactionLock,BlackList,State from SupplierMaster Where GroupName ='SUNDRY CREDITOR' and GSTNo Like ('%" + strGSTNo + "%') ";
                DataTable dt = GetDataTable(strQuery);
                if (dt != null && dt.Rows.Count > 0)
                {
                    _bBlackListed = Convert.ToBoolean(dt.Rows[0]["BlackList"]);
                    strPartyName = Convert.ToString(dt.Rows[0]["PartyName"]);
                    strStateName = Convert.ToString(dt.Rows[0]["State"]);
                    return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);

                }
            }
            return false;
        }

        public bool CheckTransactionLock(string strSalesParty)
        {
            string strAccountID = "";
            string[] str = strSalesParty.Split(' ');
            if (str.Length > 0)
            {
                strAccountID = str[0];
                string strQuery = " Select TransactionLock from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar))='" + strAccountID + "' ";
                DataTable dt = GetDataTable(strQuery);
                if (dt != null && dt.Rows.Count > 0)
                    return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return true;
        }

        public bool CheckPartyExistence(string strSalesParty)
        {
            string strAccountID = "";
            string[] str = strSalesParty.Split(' ');
            if (str.Length > 0)
            {
                strAccountID = str[0];
                string strQuery = " Select TransactionLock from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar))='" + strAccountID + "' ";
                DataTable dt = GetDataTable(strQuery);
                if (dt != null && dt.Rows.Count > 0)
                    return true;
            }
            return false;
        }


        public bool CheckTransactionLockWithMobileNo(string strSalesParty, ref string strMobileNo, ref string strPartyType, ref string strCategory)
        {
            string strQuery = " Select TransactionLock,MobileNo,TINNumber as PartyType,Category from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strSalesParty + "' ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                strMobileNo = Convert.ToString(dt.Rows[0]["MobileNo"]);
                strPartyType = Convert.ToString(dt.Rows[0]["PartyType"]);
                strCategory = Convert.ToString(dt.Rows[0]["Category"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;
        }


        public bool CheckTransactionLockWithMobileNoStation(string strSalesParty, ref string strMobileNo, ref string strStation)
        {
            string strQuery = " Select TransactionLock,MobileNo,Station from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strSalesParty + "'  UNION ALL  Select 0 as TransactionLock,MobileNo,Station from SalesBook Where SalePartyID='" + strSalesParty + "' ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                strMobileNo = Convert.ToString(dt.Rows[0]["MobileNo"]);
                strStation = Convert.ToString(dt.Rows[0]["Station"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;
        }

        public bool CheckTransactionLockWithNameStationfromMobileNo(string strMobileNo, ref string strSalesParty, ref string strStation)
        {
            string strQuery = " Select * from (select (AreaCode+AccountNo+' '+Name)Name,Station,TransactionLock from SupplierMaster where MOBILENO='" + strMobileNo + "' and GroupName in ('SUNDRY DEBTORS','CASH A/C')  UNION ALL Select Distinct SalePartyID as Name,Station,0 TransactionLock from SalesBook Where ISNULL(MobileNo,'')='" + strMobileNo + "' and SalePartyID Not like ('%[^0-9]%' ) )Sales ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                strSalesParty = Convert.ToString(dt.Rows[0]["Name"]);
                strStation = Convert.ToString(dt.Rows[0]["Station"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;
        }

        public bool CheckTransactionLockWithPartyType(string strSalesParty, ref string strPartyType, ref string strGroupName)
        {
            string strQuery = " Select TransactionLock,TINNumber as PartyType,GroupName from SupplierMaster Where GroupName !='SUB PARTY' and (AreaCode+CAST(AccountNo as varchar)+' '+Name)='" + strSalesParty + "' ";
            DataTable dt = GetDataTable(strQuery);
            if (dt != null && dt.Rows.Count > 0)
            {
                strPartyType = Convert.ToString(dt.Rows[0]["PartyType"]);
                strGroupName = Convert.ToString(dt.Rows[0]["GroupName"]);
                return Convert.ToBoolean(dt.Rows[0]["TransactionLock"]);
            }
            return false;
        }


        #region GST Table



        public DataTable CreateOnlineSaleBookDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint, ref bool _bDiffState)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'' as PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SBillCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD "
                                        + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.Transport,SR.Station,SR.Marka,SR.Remark,SR.WayBillNo,SR.VehicleNo,SR.TimeOfSupply,SR.OtherField,(SM.Address + ', '+SM.Station+', '+SM.State+'-'+SM.PinCode)Address, SM.State,SM.GSTNo,SM.CardNumber AadharNo,SM.GroupII as DealerType,(SM.MobileNo+ ' '+SM.PhoneNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name,'') as SubPartyName,(SM1.Address + ', '+SM1.Station+' '+SM1.State+'-'+SM1.PinCode)SAddress, SM1.State SState,SM1.GSTNo SGSTNo,SM1.CardNumber SAadharNo,SM1.GroupII as SDealerType,(SM1.MobileNo+ ' '+ISNULL(SM1.PhoneNo,''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode+' '+CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar,SR.BillDate,103))Date,SR.LrNumber,(CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,_sm.StateCode as BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName=SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0),LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate+STM.SGSTTaxRate)TaxRate,STM.Region,SM.CourierName,SM.Category,(CASE WHEN AttachedBill!='' then BillCode+' '+AttachedBill else PackedBillNo end) as AttachedBill,NetAmt,'Place of Supply: '+(SM.State+'('+_SM.StateCode+')')PlaceOfSupply,SR.IRNNo,SR.ACKNo,SR.QRCode,SR.GoodsType from SalesRecord SR  inner join SupplierMaster SM On SR.SalePartyID=(SM.AreaCode+CAST(SM.AccountNo as nvarchar)) left  join SupplierMaster SM1 On SR.SubPartyID=(SM1.AreaCode+CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName='SUB PARTY' left join SaleTypeMaster STM on SR.SalesType=STM.TaxName and STM.SaleType='SALES' left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "  "
                                        //+ " Select @TaxRate=SR.TaxPer from SalesRecord  SR Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "  if(@TaxRate<1 OR @TaxRate is NULL) begin Set @TaxRate =18; end  "
                                        + " Select *,(CASE WHEN Mtr>0 and Fold!=0  then ROUND((Amount/((Mtr*Fold)/100)),2) WHEN Qty>0 then ROUND((Amount/Qty),2)  else 0 end) Rate,((CASE WHEN (Qty>0 OR MTR>0) then ROUND((Select TOP 1 (TaxAmt*TaxDhara/100.00) from CompanySetting  inner join SalesRecord SR on SR.BillCode=SBillCode and SR.BillNo=" + strSerialNo + " Where SBillCode='" + strSerialCode+"' and SR.ServiceAmount>0),4) else 0 end)) NetDisAmt from (  Select *,ROUND(((TotalAmt*TaxRate)/100.00),3) TaxAmt,ROUND(((Amount*TaxRate)/100.00),2) GTaxAmt from (  Select ID,SerialNo,InvoiceNo,ItemName,HSNCode,PurchaseParty,SSSName,TaxRate,Qty,TaxType,UnitName,DAmt,DisStatus,Amount,ROUND((Amount+DAmt),3) TotalAmt,Cut,MTR,Fold from (   Select ID,SerialNo,InvoiceNo,ItemName, HSNCode, PurchaseParty,SSSName, Amount,((Amount * DisStatus) / 100)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName,Cut,MTR,Fold from(  "
                                        + " Select ID,SerialNo,InvoiceNo,LTRIM(RTRIM(REPLACE (REPLACE (ItemName, HSNCode,''),':',''))) ItemName,SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty,SSSName, (Quantity)Quantity,UnitName,(ROUND((CASE WHEN TaxType = 1 then ((Amount * 100) / (100 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType,Cut,MTR,Fold from (Select GRD.ID,(GR.ReceiptCode + ' ' + CAST(GR.ReceiptNo as nvarchar)) SerialNo,GR.InvoiceNo,ISNULL(GRD.DesignName,GRD.ItemName) ItemName, GM.HSNCode, GR.PurchaseParty,SM.SSSName, GRD.Quantity, (Select TOP 1 UnitName from Items Where ItemName = GRD.ItemName) UnitName, GRD.Amount, (SE.DiscountStatus + SE.Discount) DisStatus, GM.TaxRate,SMN.TaxIncluded as TaxType,Cut,MTR,Fold from SalesRecord SR inner join  SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer APPLY (Select TOP 1 _IGM.Other,_IGM.HSNCode,(CASE WHEN _TC.ChangeTaxRate=1 then (CASE WHEN _TC.GreaterORSmaller='>' then (CASE WHEN ((((((CASE WHEN SMN.TaxIncluded=1 then ((GRD.Rate*100.00)/(100.00+TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))>_TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN ((((((CASE WHEN SMN.TaxIncluded=1 then ((GRD.Rate*100)/(100+TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))<_TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName=_IGM.GroupName and _IGM.ParentGroup='' left join TaxCategory _TC on _IGM.TaxCategoryName=_TC.CategoryName Where GRD.ItemName=_IM.ItemName ) as GM  OUTER APPLY (Select Top 1 Other as SSSName from SupplierMaster SM Where (AreaCode+AccountNo)=SE.PurchasePartyID)SM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.Amount> 0 )_Sales Union All  "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName, '' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND(((GRD.PackingAmt* (CASE WHen TaxIncluded = 1 then (100/(100 + SR.TaxPer)) else 1 end))+ ((GRD.PackingAmt) * CS.FreightDhara / 100)),2) Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo   Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.PackingAmt > 0  Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND(((GRD.FreightAmt* (CASE WHen TaxIncluded = 1 then (100/(100 + SR.TaxPer)) else 1 end))+ ((GRD.FreightAmt) * CS.FreightDhara / 100)),4) Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.FreightAmt > 0 Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'TAX FREE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,((GRD.TaxAmt*CS.TaxDhara)/100)Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.TaxAmt > 0 Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,(GRD.TaxAmt)Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and((GRD.TaxAmt) + ((GRD.TaxAmt) * CS.TaxDhara / 100)) > 0  Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND((CAST(OtherPacking as Money)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and ROUND((CAST(OtherPacking as Money)), 0)> 0  Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND((CAST(SR.Postage as Money)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and ROUND((CAST(SR.Postage as Money)), 0)> 0  Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName, GreenTaxAmt Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GreenTaxAmt> 0  Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'DISPATCHED CHARGES' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName, ROUND(CAST(Others as Money), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and CAST(Others as Money)!= 0  Union All "
                                        + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND(CAST(OtherPer as Money), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and CAST(OtherPer as Money)!= 0 )_Sales )Sales)_Sales)FinalSales Order by ID asc"
                                        + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount*TaxRate)/100.00),4) TaxAmt from ( Select HSNCode,(CASE WHEN Qty=0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType=1 and Qty>0 then ((Amount*100)/(100+TaxRate)) else Amount end),4) Amount  from (Select HSNCode, SUM(Amount) Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                                        + " Select (GM.Other + ' : ' + SUBSTRING(GM.HSNCode,0,7)) as HSNCode, GRD.Quantity, (GRD.Amount + ((GRD.Amount * (SE.DiscountStatus + SE.Discount)) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100.00) / (100.00 + TaxRate)) else GRD.Rate end)))*(CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100.00) / (100.00 + TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where GRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.Amount > 0   Union All "
                                        + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode, 0 as Quantity,ROUND(((((((Amount* (CASE WHen TaxType = 1 then(100.00/(100.00 + TaxRate)) else 1 end))*(100.00 + DisStatus) / 100.00) * TaxRate) / 100.00) * CS.TaxDhara) / 100.00),4)Amount,TaxPer TaxRate, TaxType from(Select ROUND(GRD.Amount, 2) Amount,GM.TaxRate, (SE.DiscountStatus + SE.Discount) DisStatus, SMN.TaxIncluded as TaxType, GRD.ItemName, GRD.Quantity as Qty,SR.TaxPer from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100) / (100 + TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100.00) / (100.00 + TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where GRD.ItemName = _IM.ItemName ) as GM Where SR.ServiceAmount!=0 and SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.Amount > 0 )_SAles OUTER APPLY(Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS  Union All "
                                        + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode,0 as Quantity,ROUND((((GRD.PackingAmt + GRD.FreightAmt)* (CASE WHen TaxIncluded = 1 then(100/(100 + SR.TaxPer)) else 1 end)) + ((GRD.PackingAmt + GRD.FreightAmt+GRD.TaxAmt) * CS.FreightDhara / 100)), 4) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and (GRD.PackingAmt + GRD.FreightAmt+GRD.TaxAmt) > 0  Union All "
                                        + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode,0 as Quantity,ROUND(GRD.TaxAmt,4) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.TaxAmt > 0  Union All "
                                        + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode,0 as Quantity,ROUND((CAST(SR.Postage as Money) + CAST(OtherPacking as Money) + CAST(OtherPer as Money) + CAST(Others as Money) + CAST(ISNULL(GreenTaxAmt, 0) as money)), 4) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesRecord SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales )_Sales Order by HSNCode asc,TaxRate desc  "//)FinalSales)_Sales";

                                        + " SELECT Distinct PP.AreaCode,PP.Name SFName,PP.Address SFAdd,(CASE WHEN ISNULL(PP.MobileNo,'')='' then PP.PhoneNo else PP.MobileNo end) SFPhone,PP.GSTNo SFGSTNo,PP.State SFState FROM SalesEntry SE LEFT JOIN SupplierMaster PP On SE.PurchasePartyID = PP.AreaCode + PP.AccountNo WHERE BillCode = '" + strSerialCode + "' AND BillNo = " + strSerialNo + " AND PP.Address is not null ";


                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    DataTable dtShipF = ds.Tables[4];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOFSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strIRNNo = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strInvoiceNo = "", strSalesPartyID = "", strSubPartyID = "", strCourierName = "", strAadharNo = "", strSAadharNo = "", strPartyCategory = "", strQRCode = "", strGoodsType = "";
                        double dTTaxAmt = 0, dBillNetAmt = 0;
                        strQRCode = Convert.ToString(_dRow["QRCode"]);
                        byte[] _bQRCode = null;
                        if (strQRCode != "")
                            _bQRCode = QRCodeGen.GetQRCode(strQRCode);

                        strBankName = Convert.ToString(dRow["BankName"]);
                        strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);

                        strGoodsType = Convert.ToString(_dRow["GoodsType"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);
                        strPartyCategory = Convert.ToString(_dRow["Category"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strCourierName = Convert.ToString(_dRow["CourierName"]);
                        dBillNetAmt = ConvertObjectToDouble(_dRow["NetAmt"]);
                        if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                        {
                            strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                            strPartyIFSCCode = "ICIC0000106";
                            strBranchName = "DELHI";
                        }

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }
                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        strPlaceOFSupply = Convert.ToString(_dRow["PlaceOfSupply"]);
                        strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        if (strIRNNo == "")
                            strIRNNo = "N/A";

                        strIRNNo = "IRN : " + strIRNNo;

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]).Trim().Replace(" ", ", ");
                        }

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            strAadharNo = Convert.ToString(_dRow["AadharNo"]);

                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                                strSAadharNo = strAadharNo;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                                strSAadharNo = Convert.ToString(_dRow["SAadharNo"]);
                            }
                        }

                        int rowIndex = 1;
                        double dQty = 0, dAmt = 0, dTMtr = 0, dMtr = 0, dFold = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;
                        // strTaxType = Convert.ToString(_dRow["TaxType"]);
                        if (Convert.ToBoolean(_dRow["TaxType"]))
                            strTaxType = "INCLUDED";
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
                        if (strCourierName != "")
                            strCourierName = ",  Through : " + strCourierName;

                        string strGRSerialNo = "", strOldGRSerialNo = "", strSSSName = "", strPurchaseParty = "";

                        string SFName = "", SFAdd = "", SFPhone = "", SFGSTNo = "", SFState = "";

                        if (dtShipF.Rows.Count > 0)
                        {
                            SFState = Convert.ToString(dtShipF.Rows[0]["SFState"]);
                            if (strStateName != SFState && strGoodsType == "DIRECT")//Convert.ToString(dtShipF.Rows[0]["AreaCode"]).Contains("TUP") && strSerialCode.Contains("DL"))
                            {
                                SFName = Convert.ToString(dtShipF.Rows[0]["SFName"]);
                                SFAdd = Convert.ToString(dtShipF.Rows[0]["SFAdd"]);
                                SFPhone = Convert.ToString(dtShipF.Rows[0]["SFPhone"]);
                                SFGSTNo = Convert.ToString(dtShipF.Rows[0]["SFGSTNo"]);
                               // SFState = Convert.ToString(dtShipF.Rows[0]["SFState"]);

                                _bDiffState = true;
                            }
                        }

                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOFSupply;

                                row["ShipFromName"] = SFName;
                                row["ShipFromAddress"] = SFAdd;
                                row["ShipFromPhone"] = SFPhone;
                                row["ShipFromGSTNo"] = SFGSTNo;
                                row["ShipFromState"] = SFState;

                                row["SubTitle"] = MainPage.strSubTitle;
                                row["SupplierRef"] = _dRow["Marka"];
                                row["VehicleNo"] = _dRow["AttachedBill"];
                                row["WayBillNo"] = _dRow["WayBillNo"];
                                row["Other"] = _dRow["OtherField"];
                                row["BuyerName"] = strSalesPartyID + " " + strBuyerName;
                                // row["CompanyTIN"] = _dRow["SalePartyID"];
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail + strCourierName;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;
                                row["BilledAadharNo"] = strAadharNo;

                                row["ShippedName"] = strSubPartyID + " " + strSubPartyName;
                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;
                                row["ShippedAadharNo"] = strSAadharNo;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;
                                //if (strSubPartyName == strBuyerName)
                                //    row["CompanyCST"] = _dRow["SalePartyID"];
                                //else
                                //    row["CompanyCST"] = _dRow["SubPartyID"];

                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["IRNNO"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["Transport"] = _dRow["Transport"];
                                row["Destination"] = _dRow["Station"];
                                row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"]; // MainPage.strTermsofDelivery;

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No: " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strPurchaseParty = Convert.ToString(rows["PurchaseParty"]);
                                strGRSerialNo = Convert.ToString(rows["SerialNo"]);
                                strPurchaseParty = strPurchaseParty.Replace("READYMADE", "R/M");

                                if (strGRSerialNo != strOldGRSerialNo)
                                {
                                    strInvoiceNo = Convert.ToString(rows["InvoiceNo"]);
                                    strSSSName = Convert.ToString(rows["SSSName"]);
                                    strSSSName = strSSSName.Replace("READYMADE", "R/M");

                                    if (strInvoiceNo != "")
                                        strInvoiceNo = " (P.No:" + strInvoiceNo + ")";

                                    strOldGRSerialNo = strGRSerialNo;
                                    if (strSerialCode.Contains("SRT"))
                                        row["OrderNo"] = strPurchaseParty + "\r" + rows["ItemName"] + strInvoiceNo;
                                    else { row["OrderNo"] = rows["ItemName"] + strInvoiceNo; }

                                    if (strSSSName == strPurchaseParty || strSSSName.Contains("CASH") || strSSSName == "")
                                        row["OtherRef"] = strPurchaseParty;
                                    else
                                        row["OtherRef"] = strPurchaseParty + " (" + strSSSName + ")";
                                }
                                else
                                {
                                    strInvoiceNo = "";
                                    row["ItemName"] = rows["ItemName"];
                                    row["PurchaseParty"] = strPurchaseParty;
                                }

                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["GeneratedBy"] = rowIndex + ".";
                                string strHSNCode = Convert.ToString(rows["HSNCode"]);
                                if (strHSNCode.Length > 6)
                                    strHSNCode = strHSNCode.Substring(0, 6);
                                row["HSNCode"] = strHSNCode;
                                row["Cut"] = rows["Cut"];
                                row["Fold"] = rows["Fold"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dMtr = ConvertObjectToDouble(rows["Mtr"]);
                                dFold = ConvertObjectToDouble(rows["Fold"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dTAmt += dSAmount;

                                if (dMtr > 0 && dFold > 0)
                                    dMtr = ((dMtr * dFold) / 100);
                                dTMtr += dMtr;

                                if (dMtr > 0)
                                    row["Mtr"] = dMtr.ToString("N2", MainPage.indianCurancy);
                                else
                                    row["Mtr"] = "0.00";

                                row["Fold"] = dFold.ToString("N2", MainPage.indianCurancy);

                                if (dDisPer > 0)
                                    row["DisPer"] = "+" + dDisPer.ToString("0.##") + "%";
                                else
                                    row["DisPer"] = "-" + Math.Abs(dDisPer).ToString("0.##") + "%";

                                dAmt = ConvertObjectToDouble(rows["Amount"]);

                                if (MainPage.pQty)
                                {
                                    if (dQty > 0)
                                        row["Qty"] = rows["Qty"] + " " + rows["UnitName"];
                                    else
                                        row["Qty"] = "----";
                                }

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    double _dRate = ConvertObjectToDouble(rows["Rate"]);
                                    if (dMtr != 0 && dFold != 0) // && dFold != 100
                                        row["UOM"] = (dSAmount / dMtr).ToString("N2", MainPage.indianCurancy);
                                    else if (dQty != 0)
                                        row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    else
                                        row["UOM"] = dSAmount.ToString("N2", MainPage.indianCurancy);

                                    if (_dRate != 0)
                                    {
                                        row["Rate"] = _dRate.ToString("N2", MainPage.indianCurancy);
                                    }
                                    else
                                        row["Rate"] = dSAmount.ToString("N2", MainPage.indianCurancy);

                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["Jursdiction"] = MainPage.strGeneratedBy;

                                //if (!_bPrint || !strSerialCode.Contains("DLS") || MainPage.strLoginName.Contains("BHARTI") || MainPage.strLoginName.Contains("NEHA"))
                                //{
                                row["HeaderImage"] = MainPage._headerImage;
                                row["BrandLogo"] = MainPage._brandLogo;
                                if (strQRCode != "")
                                    row["QRCode"] = _bQRCode;
                                //}

                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "                         PACKED BY : " + strPackerName; //CHECKED BY :
                                row["EOE"] = "continued..";

                                table.Rows.Add(row);
                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {                              
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);

                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            string strMtr = "", strNetQty = "";
                            if (dTQty > 0)
                                strNetQty = "NetQty : " + dTQty;
                            if (dTMtr > 0)
                                strMtr = "Mtr : " + dTMtr;

                            if (strNetQty != "" && strMtr != "")
                                strMtr = ", " + strMtr;

                            if (MainPage.pQty)
                                row["TotalQty"] = strNetQty + strMtr + ", Grand Total :";

                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            string strDeclaration = "";
                            if (MainPage.strDeclaration != "")
                            {
                                strDeclaration = MainPage.strDeclaration;
                                if (strBuyerName != strSubPartyName)
                                    strDeclaration = strDeclaration.Replace("30", "due").Replace("[days]", "due");
                                else if (ConvertDateInExactFormat(Convert.ToString(_dRow["Date"])) >= ConvertDateInExactFormat("01/01/2019"))
                                {
                                    if (strPartyCategory == "WHOLESALER")
                                        strDeclaration = strDeclaration.Replace("30", "60").Replace("[days]", "60");
                                    else
                                        strDeclaration = strDeclaration.Replace("30", "45").Replace("[days]", "45");
                                }
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = strDeclaration;
                            }

                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            // row["Jursdiction"] = MainPage.strGeneratedBy;
                            // row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));
                            row["SignatureImage"] = MainPage._signatureImage;

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            row["BankName"] = "Bank Name : " + strBankName;
                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;// strAccountNo;
                                                                                            // row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";
                                row["IFSCCode"] = "SCAN TO PAY";
                            }
                            else
                            {
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }

                            if (_dscVerified)
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                            {
                                row["SignatureHeader"] = row["SignatureText"] = "";
                            }

                            if (dBillNetAmt != dTAmt)
                            {
                                MessageBox.Show("Sorry ! Net amt in invoice and net amt in print is not match !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                                    table.Rows.Clear();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }


            if (table.Rows.Count > 0 && (_dtGST.Rows.Count == 0 || _dtSalesAmt.Rows.Count == 0))
                table.Rows.Clear();

            return table;
        }

        //public DataTable CreateOnlineSaleBookDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint)
        //{
        //    DataTable table = new DataTable();
        //    try
        //    {
        //        CreateDataTableColumn(ref table);
        //        _dtSalesAmt = new DataTable();
        //        _dtSalesAmt.Columns.Add("AccountName", typeof(String));
        //        _dtSalesAmt.Columns.Add("Amount", typeof(String));

        //        string strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'' as PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SBillCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD "
        //                                + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.Transport,SR.Station,SR.Marka,SR.Remark,SR.WayBillNo,SR.VehicleNo,SR.TimeOfSupply,SR.OtherField,(SM.Address + ', '+SM.Station+', '+SM.State+'-'+SM.PinCode)Address, SM.State,SM.GSTNo,SM.CardNumber AadharNo,SM.GroupII as DealerType,(SM.MobileNo+ ' '+SM.PhoneNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name,'') as SubPartyName,(SM1.Address + ', '+SM1.Station+' '+SM1.State+'-'+SM1.PinCode)SAddress, SM1.State SState,SM1.GSTNo SGSTNo,SM1.CardNumber SAadharNo,SM1.GroupII as SDealerType,(SM1.MobileNo+ ' '+ISNULL(SM1.PhoneNo,''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode+' '+CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar,SR.BillDate,103))Date,SR.LrNumber,(CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,_sm.StateCode as BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName=SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0),LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate+STM.SGSTTaxRate)TaxRate,STM.Region,SM.CourierName,SM.Category,(CASE WHEN AttachedBill!='' then BillCode+' '+AttachedBill else PackedBillNo end) as AttachedBill,NetAmt,'Place of Supply: '+(SM.State+'('+_SM.StateCode+')')PlaceOfSupply,SR.IRNNo,SR.ACKNo,SR.QRCode,SR.GoodsType from SalesRecord SR  inner join SupplierMaster SM On SR.SalePartyID=(SM.AreaCode+CAST(SM.AccountNo as nvarchar)) left  join SupplierMaster SM1 On SR.SubPartyID=(SM1.AreaCode+CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName='SUB PARTY' left join SaleTypeMaster STM on SR.SalesType=STM.TaxName and STM.SaleType='SALES' left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "  "
        //                                //+ " Select @TaxRate=SR.TaxPer from SalesRecord  SR Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "  if(@TaxRate<1 OR @TaxRate is NULL) begin Set @TaxRate =18; end  "
        //                                + " Select *,(CASE WHEN Mtr>0 and Fold!=0  then ROUND((Amount/((Mtr*Fold)/100)),2) WHEN Qty>0 then ROUND((Amount/Qty),2)  else 0 end) Rate,((CASE WHEN (Qty>0 OR MTR>0) then ROUND((Select TOP 1 (TaxAmt*TaxDhara/100.00) from CompanySetting Where SBillCode='" + strSerialCode + "'),4) else 0 end)) NetDisAmt from (  Select *,ROUND(((TotalAmt*TaxRate)/100.00),2) TaxAmt,ROUND(((Amount*TaxRate)/100.00),2) GTaxAmt from (  Select ID,SerialNo,InvoiceNo,ItemName,HSNCode,PurchaseParty,SSSName,TaxRate,Qty,TaxType,UnitName,DAmt,DisStatus,Amount,(Amount+DAmt) TotalAmt,Cut,MTR,Fold from (   Select ID,SerialNo,InvoiceNo,ItemName, HSNCode, PurchaseParty,SSSName, Amount,((Amount * DisStatus) / 100)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName,Cut,MTR,Fold from(  "
        //                                + " Select ID,SerialNo,InvoiceNo,LTRIM(RTRIM(REPLACE (REPLACE (ItemName, HSNCode,''),':',''))) ItemName, HSNCode, PurchaseParty,SSSName, (Quantity)Quantity,UnitName,(ROUND((CASE WHEN TaxType = 1 then ((Amount * 100) / (100 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType,Cut,MTR,Fold from (Select GRD.ID,(GR.ReceiptCode + ' ' + CAST(GR.ReceiptNo as nvarchar)) SerialNo,GR.InvoiceNo,ISNULL(GRD.DesignName,GRD.ItemName) ItemName, GM.HSNCode, GR.PurchaseParty,SM.SSSName, GRD.Quantity, (Select TOP 1 UnitName from Items Where ItemName = GRD.ItemName) UnitName, GRD.Amount, (SE.DiscountStatus + SE.Discount) DisStatus, GM.TaxRate,SMN.TaxIncluded as TaxType,Cut,MTR,Fold from SalesRecord SR inner join  SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer APPLY (Select TOP 1 _IGM.Other,_IGM.HSNCode,(CASE WHEN _TC.ChangeTaxRate=1 then (CASE WHEN _TC.GreaterORSmaller='>' then (CASE WHEN ((((((CASE WHEN SMN.TaxIncluded=1 then ((GRD.Rate*100.00)/(100.00+TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))>_TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN ((((((CASE WHEN SMN.TaxIncluded=1 then ((GRD.Rate*100)/(100+TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))<_TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName=_IGM.GroupName and _IGM.ParentGroup='' left join TaxCategory _TC on _IGM.TaxCategoryName=_TC.CategoryName Where GRD.ItemName=_IM.ItemName ) as GM  OUTER APPLY (Select Top 1 Other as SSSName from SupplierMaster SM Where (AreaCode+AccountNo)=SE.PurchasePartyID)SM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.Amount> 0 )_Sales Union All  "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName, '' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND(((GRD.PackingAmt* (CASE WHen TaxIncluded = 1 then (100/(100 + SR.TaxPer)) else 1 end))+ ((GRD.PackingAmt) * CS.FreightDhara / 100)),4) Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo   Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.PackingAmt > 0  Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND(((GRD.FreightAmt* (CASE WHen TaxIncluded = 1 then (100/(100 + SR.TaxPer)) else 1 end))+ ((GRD.FreightAmt) * CS.FreightDhara / 100)),4) Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.FreightAmt > 0 Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'TAX FREE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,((GRD.TaxAmt*CS.TaxDhara)/100)Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.TaxAmt > 0 Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,(GRD.TaxAmt)Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  inner join GoodsReceive GR on GRD.ReceiptCode = GR.ReceiptCode and GRD.ReceiptNo = GR.ReceiptNo  Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and((GRD.TaxAmt) + ((GRD.TaxAmt) * CS.TaxDhara / 100)) > 0  Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND((CAST(OtherPacking as Money)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and ROUND((CAST(OtherPacking as Money)), 0)> 0  Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND((CAST(SR.Postage as Money)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and ROUND((CAST(SR.Postage as Money)), 0)> 0  Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName, GreenTaxAmt Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GreenTaxAmt> 0  Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'DISPATCHED CHARGES' as ItemName,'' HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName, ROUND(CAST(Others as Money), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and CAST(Others as Money)!= 0  Union All "
        //                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,'' as SSSName,0 as Quantity,'' as UnitName,ROUND(CAST(OtherPer as Money), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType,0.00 as Cut,0.00 as MTR,0.00 as Fold from SalesRecord SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and CAST(OtherPer as Money)!= 0 )_Sales )Sales)_Sales)FinalSales Order by ID asc"
        //                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount*TaxRate)/100.00),4) TaxAmt from ( Select HSNCode,(CASE WHEN Qty=0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType=1 and Qty>0 then ((Amount*100)/(100+TaxRate)) else Amount end),4) Amount  from (Select HSNCode, SUM(Amount) Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
        //                                + " Select (GM.Other + ' : ' + GM.HSNCode) as HSNCode, GRD.Quantity, (GRD.Amount + ((GRD.Amount * (SE.DiscountStatus + SE.Discount)) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100.00) / (100.00 + TaxRate)) else GRD.Rate end)))*(CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100.00) / (100.00 + TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where GRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.Amount > 0   Union All "
        //                                + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode, 0 as Quantity,ROUND(((((((Amount* (CASE WHen TaxType = 1 then(100.00/(100.00 + TaxRate)) else 1 end))*(100.00 + DisStatus) / 100.00) * TaxRate) / 100.00) * CS.TaxDhara) / 100.00),4)Amount,TaxPer TaxRate, TaxType from(Select ROUND(GRD.Amount, 2) Amount,GM.TaxRate, (SE.DiscountStatus + SE.Discount) DisStatus, SMN.TaxIncluded as TaxType, GRD.ItemName, GRD.Quantity as Qty,SR.TaxPer from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100) / (100 + TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100.00) / (100.00 + TaxRate)) else GRD.Rate end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where GRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.Amount > 0 )_SAles OUTER APPLY(Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS  Union All "// Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN _SAles.TaxType = 1 then((_SAles.Amount * 100) / (100 + TaxRate)) else _SAles.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(_SAles.DisStatus)) / 100.00) else 1.00 end)) / _SAles.Qty)> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN _SAles.TaxType = 1 then((_SAles.Amount * 100) / (100 + TaxRate)) else _SAles.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(_SAles.DisStatus)) / 100.00) else 1.00 end))/ _SAles.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where _SAles.ItemName = _IM.ItemName ) as GM  Union All "
        //                                + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode,0 as Quantity,ROUND((((GRD.PackingAmt + GRD.FreightAmt)* (CASE WHen TaxIncluded = 1 then(100/(100 + SR.TaxPer)) else 1 end)) + ((GRD.PackingAmt + GRD.FreightAmt+GRD.TaxAmt) * CS.FreightDhara / 100)), 4) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar))  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and (GRD.PackingAmt + GRD.FreightAmt+GRD.TaxAmt) > 0  Union All "
        //                                + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode,0 as Quantity,ROUND(GRD.TaxAmt,4) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from SalesRecord SR inner join SalesEntry SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' inner join GoodsReceiveDetails GRD on SE.GRSNo = (GRD.ReceiptCode + ' ' + CAST(GRD.ReceiptNo as varchar)) Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where SBillCode='" + strSerialCode + "') CS  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and GRD.TaxAmt > 0  Union All "
        //                                + " Select ISNULL((Select Top 1 'SAC : '+SACCode from CompanyDetails Where SACCode!=''),'') as HSNCode,0 as Quantity,ROUND((CAST(SR.Postage as Money) + CAST(OtherPacking as Money) + CAST(OtherPer as Money) + CAST(Others as Money) + CAST(ISNULL(GreenTaxAmt, 0) as money)), 4) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesRecord SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType='SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales )_Sales Order by HSNCode asc,TaxRate desc  "//)FinalSales)_Sales";
        //                                + "  Select Top 1 _SM.State from SalesEntry SE inner join SupplierMaster _SM on SE.PurchasePartyID=_SM.AreaCode+_SM.AccountNo Where SE.BillCode='"+strSerialCode+ "' and SE.BillNo="+strSerialNo+" ";

        //        DataSet ds = GetDataSetRecord(strQuery);

        //        if (ds.Tables.Count > 1)
        //        {
        //            DataTable dt = ds.Tables[0];
        //            DataTable _dtSupplier = ds.Tables[1];
        //            DataTable dtItemDetail = ds.Tables[2];
        //            DataTable dtGST = ds.Tables[3];
        //            if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
        //            {
        //                DataRow dRow = dt.Rows[0];
        //                DataRow _dRow = _dtSupplier.Rows[0];

        //                string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOFSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
        //                string strSubPartyName = "",strIRNNo="", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strInvoiceNo = "", strSalesPartyID = "", strSubPartyID = "", strCourierName = "", strAadharNo = "", strSAadharNo = "", strPartyCategory = "",strQRCode="";                       
        //                double dTTaxAmt = 0,dBillNetAmt=0;
        //                strQRCode = Convert.ToString(_dRow["QRCode"]);
        //                byte[] _bQRCode = null;
        //                if(strQRCode!="")
        //                    _bQRCode = QRCodeGen.GetQRCode(strQRCode);

        //                strBankName = Convert.ToString(dRow["BankName"]);
        //                strBranchName = Convert.ToString(dRow["BranchName"]);
        //                strAccountNo = Convert.ToString(dRow["AccountName"]);
        //                strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

        //                strStateName = Convert.ToString(dRow["StateName"]);
        //                strBuyerSP = Convert.ToString(_dRow["State"]);
        //                strPackerName = Convert.ToString(_dRow["PackerName"]);
        //                strPartyCategory = Convert.ToString(_dRow["Category"]);

        //                strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
        //                strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
        //                strCourierName = Convert.ToString(_dRow["CourierName"]);
        //                dBillNetAmt = ConvertObjectToDouble(_dRow["NetAmt"]);
        //                if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
        //                {
        //                    strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
        //                    strPartyIFSCCode = "ICIC0000106";
        //                    strBranchName = "DELHI";
        //                }

        //                if (strPackerName == "")
        //                    strPackerName = "DIRECT";

        //                string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
        //                if (Convert.ToString(_dRow["Region"]) == "LOCAL")
        //                    _bIGST = false;
        //                else
        //                    _bIGST = true;

        //                if (strTaxationType == "ITEMWISE")
        //                    CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

        //                if (MainPage.pCompanyName)
        //                    strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
        //                if (MainPage.pCompanyAddress)
        //                {
        //                    strComapnyAddress = Convert.ToString(dRow["Address"]);
        //                    strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
        //                    strHOAddress = Convert.ToString(dRow["HOAddress"]);
        //                }
        //                if (strComapnyAddress.Length > 90)
        //                    strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
        //                if (strComapnyAddress.Contains("CHANDNI CHOWK"))
        //                    strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

        //                strPlaceOFSupply = Convert.ToString(_dRow["PlaceOfSupply"]);                        
        //                strIRNNo = Convert.ToString(_dRow["IRNNo"]);
        //                if (strIRNNo == "")
        //                    strIRNNo = "N/A";

        //                strIRNNo = "IRN : " + strIRNNo;

        //                if (MainPage.pBuyerAddress)
        //                {
        //                    strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
        //                    strBuyerEmail = Convert.ToString(_dRow["MobileNo"]).Trim().Replace(" ", ", ");
        //                }

        //                if (MainPage.pBuyerName)
        //                {
        //                    strBuyerName = Convert.ToString(_dRow["SalesParty"]);
        //                    strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
        //                    strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
        //                    strBStateCode = Convert.ToString(_dRow["BStateCode"]);
        //                    strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
        //                    strDealerType = Convert.ToString(_dRow["DealerType"]);
        //                    strAadharNo = Convert.ToString(_dRow["AadharNo"]);

        //                    if (strSubPartyName == "")
        //                    {
        //                        strSubPartyName = strBuyerName;
        //                        strSAddress = strBuyerAddress;
        //                        strSMobileNo = strBuyerEmail;
        //                        strSGST = strBuyerGSTNo;
        //                        strSState = strBuyerSP;
        //                        strSStateCode = strBStateCode;
        //                        strShippedPANNo = strBuyerPANNo;
        //                        strSDealerType = strDealerType;
        //                        strSubPartyID = strSalesPartyID;
        //                        strSAadharNo = strAadharNo;
        //                    }
        //                    else
        //                    {
        //                        strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
        //                        strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
        //                        strSGST = Convert.ToString(_dRow["SGSTNo"]);
        //                        strSState = Convert.ToString(_dRow["SState"]);
        //                        strSStateCode = Convert.ToString(_dRow["SStateCode"]);
        //                        strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
        //                        strSDealerType = Convert.ToString(_dRow["DealerType"]);
        //                        strSAadharNo = Convert.ToString(_dRow["SAadharNo"]);
        //                    }
        //                }

        //                int rowIndex = 1;
        //                double dQty = 0, dAmt = 0, dTMtr = 0, dMtr = 0, dFold = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0,  dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;
        //                // strTaxType = Convert.ToString(_dRow["TaxType"]);
        //                if (Convert.ToBoolean(_dRow["TaxType"]))
        //                    strTaxType = "INCLUDED";
        //                if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
        //                    dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
        //                if (strCourierName != "")
        //                    strCourierName = ",  Through : " + strCourierName;

        //                string strGRSerialNo = "", strOldGRSerialNo = "", strSSSName = "", strPurchaseParty = "";
        //                foreach (DataRow rows in dtItemDetail.Rows)
        //                {
        //                    if (Convert.ToString(rows["UnitName"]) != "")
        //                    {
        //                        DataRow row = table.NewRow();
        //                        row["CompanyName"] = strCompanyName;
        //                        row["CompanyAddress"] = strComapnyAddress;
        //                        row["CompanyEMail"] = strCompanyEmail;
        //                        row["CompanyTIN"] = strHOAddress;
        //                        row["CompanyCST"] = strPlaceOFSupply;

        //                        row["SubTitle"] = MainPage.strSubTitle;
        //                        row["SupplierRef"] = _dRow["Marka"];
        //                        row["VehicleNo"] = _dRow["AttachedBill"];
        //                        row["WayBillNo"] = _dRow["WayBillNo"];
        //                        row["Other"] = _dRow["OtherField"];
        //                        row["BuyerName"] = strSalesPartyID + " " + strBuyerName;
        //                        // row["CompanyTIN"] = _dRow["SalePartyID"];
        //                        row["BuyerAddress"] = strBuyerAddress;
        //                        row["BuyerStatePin"] = strBuyerSP;
        //                        row["BilledStateCode"] = strBStateCode;
        //                        row["BuyerEmail"] = strBuyerEmail + strCourierName;
        //                        row["BilledPANNo"] = strBuyerPANNo;
        //                        row["BuyerDealerType"] = strDealerType;
        //                        row["BilledAadharNo"] = strAadharNo;

        //                        row["ShippedName"] = strSubPartyID + " " + strSubPartyName;
        //                        row["ShippedAddress"] = strSAddress;
        //                        row["ShippedState"] = strSState;
        //                        row["ShippedStateCode"] = strSStateCode;
        //                        row["ShippedEmail"] = strSMobileNo;
        //                        row["ShippedPANNo"] = strShippedPANNo;
        //                        row["ShippedDealerType"] = strSDealerType;
        //                        row["ShippedAadharNo"] = strSAadharNo;

        //                        if (strBuyerGSTNo != "")
        //                            row["BilledGSTNo"] = strBuyerGSTNo;
        //                        if (strSGST != "")
        //                            row["ShippedGSTNo"] = strSGST;
        //                        //if (strSubPartyName == strBuyerName)
        //                        //    row["CompanyCST"] = _dRow["SalePartyID"];
        //                        //else
        //                        //    row["CompanyCST"] = _dRow["SubPartyID"];

        //                        row["GeneratedBy"] = MainPage.strGeneratedBy;
        //                        row["Jursdiction"] = MainPage.strJurisdiction;
        //                        row["IRNNO"] = strIRNNo;
        //                        row["InvoiceNo"] = _dRow["BillNo"];
        //                        row["InvoiceDate"] = _dRow["Date"];
        //                        row["Transport"] = _dRow["Transport"];
        //                        row["Destination"] = _dRow["Station"];
        //                        row["TimeofSupply"] = _dRow["TimeOfSupply"];
        //                        row["TermsOfDelivery"] = _dRow["Remark"]; // MainPage.strTermsofDelivery;

        //                        if (Convert.ToString(dRow["GSTNo"]) != "")
        //                            row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
        //                        if (Convert.ToString(dRow["CINNumber"]) != "")
        //                            row["CompanyStatePin"] = "CIN No: " + dRow["CINNumber"];

        //                        if (Convert.ToString(_dRow["LrNumber"]) != "")
        //                        {
        //                            row["LRNo"] = _dRow["LrNumber"];
        //                            row["LRDate"] = _dRow["LRDate"];
        //                        }

        //                        strPurchaseParty = Convert.ToString(rows["PurchaseParty"]);
        //                        strGRSerialNo = Convert.ToString(rows["SerialNo"]);
        //                        strPurchaseParty = strPurchaseParty.Replace("READYMADE", "R/M");

        //                        if (strGRSerialNo != strOldGRSerialNo)
        //                        {
        //                            strInvoiceNo = Convert.ToString(rows["InvoiceNo"]);
        //                            strSSSName = Convert.ToString(rows["SSSName"]);
        //                            strSSSName = strSSSName.Replace("READYMADE", "R/M");

        //                            if (strInvoiceNo != "")
        //                                strInvoiceNo = " (P.No:" + strInvoiceNo + ")";

        //                            strOldGRSerialNo = strGRSerialNo;
        //                            if (strSerialCode.Contains("SRT"))
        //                                row["OrderNo"] = strPurchaseParty + "\r" + rows["ItemName"] + strInvoiceNo;
        //                            else { row["OrderNo"] = rows["ItemName"] + strInvoiceNo; }

        //                            if (strSSSName == strPurchaseParty || strSSSName.Contains("CASH") || strSSSName == "")
        //                                row["OtherRef"] = strPurchaseParty;
        //                            else
        //                                row["OtherRef"] = strPurchaseParty + " (" + strSSSName + ")";
        //                        }
        //                        else
        //                        {
        //                            strInvoiceNo = "";
        //                            row["ItemName"] = rows["ItemName"];
        //                            row["PurchaseParty"] = strPurchaseParty;
        //                        }

        //                        row["HeaderName"] = MainPage.strTitleofDocument;
        //                        row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
        //                        row["GeneratedBy"] = rowIndex + ".";
        //                        row["HSNCode"] = rows["HSNCode"];
        //                        row["Cut"] = rows["Cut"];
        //                        row["Fold"] = rows["Fold"];

        //                        dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

        //                        dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
        //                        dMtr = ConvertObjectToDouble(rows["Mtr"]);
        //                        dFold = ConvertObjectToDouble(rows["Fold"]);
        //                        dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
        //                        dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
        //                        dTAmt += dSAmount;

        //                        if (dMtr > 0 && dFold > 0)
        //                            dMtr = ((dMtr * dFold) / 100);
        //                        dTMtr += dMtr;

        //                        if (dMtr > 0)
        //                            row["Mtr"] = dMtr.ToString("N2", MainPage.indianCurancy);
        //                        else
        //                            row["Mtr"] = "0.00";

        //                        row["Fold"] = dFold.ToString("N2", MainPage.indianCurancy);

        //                        if (dDisPer > 0)
        //                            row["DisPer"] = "+" + dDisPer.ToString("0.##") + "%";
        //                        else
        //                            row["DisPer"] = "-" + Math.Abs(dDisPer).ToString("0.##") + "%";

        //                        dAmt = ConvertObjectToDouble(rows["Amount"]);

        //                        if (MainPage.pQty)
        //                        {
        //                            if (dQty > 0)
        //                                row["Qty"] = rows["Qty"] + " " + rows["UnitName"];
        //                            else
        //                                row["Qty"] = "----";
        //                        }

        //                        if (strTaxationType == "ITEMWISE")
        //                        {
        //                            if (_bIGST)
        //                                row["IGSTPer"] = dTaxPer + "%";
        //                            else
        //                            {
        //                                row["CGSTPer"] = dTaxPer / 2 + "%";
        //                                row["SGSTPer"] = dTaxPer / 2 + "%";
        //                            }

        //                        }
        //                        else
        //                            row["IGSTPer"] = "----";

        //                        if (MainPage.pAmount)
        //                        {
        //                            double _dRate = ConvertObjectToDouble(rows["Rate"]);
        //                            if (dMtr != 0 && dFold != 0) // && dFold != 100
        //                                row["UOM"] = (dSAmount / dMtr).ToString("N2", MainPage.indianCurancy);
        //                            else if (dQty != 0)
        //                                row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
        //                            else
        //                                row["UOM"] = dSAmount.ToString("N2", MainPage.indianCurancy);

        //                            if (_dRate != 0)
        //                            {
        //                                row["Rate"] = _dRate.ToString("N2", MainPage.indianCurancy);
        //                            }
        //                            else
        //                                row["Rate"] = dSAmount.ToString("N2", MainPage.indianCurancy);

        //                            row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
        //                        }
        //                        row["Jursdiction"] = MainPage.strGeneratedBy;

        //                        //if (!_bPrint || !strSerialCode.Contains("DLS") || MainPage.strLoginName.Contains("BHARTI") || MainPage.strLoginName.Contains("NEHA"))
        //                        //{
        //                        row["HeaderImage"] = MainPage._headerImage;
        //                        row["BrandLogo"] = MainPage._brandLogo;
        //                        if (strQRCode != "")
        //                            row["QRCode"] = _bQRCode;
        //                       //}

        //                       row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
        //                        row["FormReceive"] = "                         PACKED BY : " + strPackerName; //CHECKED BY :
        //                        row["EOE"] = "continued..";

        //                        table.Rows.Add(row);
        //                        rowIndex++;
        //                    }
        //                }

        //                if (table.Rows.Count > 0)
        //                {
        //                    if (MainPage.pAmount)
        //                    {
        //                        dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
        //                    }

        //                    int count = _dtSalesAmt.Rows.Count;
        //                    if (_dtGST != null)
        //                    {
        //                        if (count < _dtGST.Rows.Count)
        //                            count = _dtGST.Rows.Count;
        //                    }

        //                    DataRow row = table.Rows[table.Rows.Count - 1];

        //                    dTAmt = Math.Round(dTAmt, 0);

        //                    row["EOE"] = "E. & O.E.";
        //                    row["OrderDate"] = "Authorised Signatory";
        //                    row["Continue"] = "`";
        //                    string strMtr = "", strNetQty = "";
        //                    if (dTQty > 0)
        //                        strNetQty = "NetQty : " + dTQty;
        //                    if (dTMtr > 0)
        //                        strMtr = "Mtr : " + dTMtr;

        //                    if (strNetQty != "" && strMtr != "")
        //                        strMtr = ", " + strMtr;

        //                    if (MainPage.pQty)
        //                        row["TotalQty"] = strNetQty + strMtr + ", Grand Total :";

        //                    if (MainPage.pAmount)
        //                        row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

        //                    string strDeclaration = "";
        //                    if (MainPage.strDeclaration != "")
        //                    {
        //                        strDeclaration = MainPage.strDeclaration;
        //                        if (strBuyerName != strSubPartyName)
        //                            strDeclaration = strDeclaration.Replace("30", "due").Replace("[days]", "due");
        //                        else if (ConvertDateInExactFormat(Convert.ToString(_dRow["Date"])) >= ConvertDateInExactFormat("01/01/2019"))
        //                        {
        //                            if (strPartyCategory == "WHOLESALER")
        //                                strDeclaration = strDeclaration.Replace("30", "60").Replace("[days]", "60");
        //                            else
        //                                strDeclaration = strDeclaration.Replace("30", "45").Replace("[days]", "45");
        //                        }
        //                        row["DeclarationHeader"] = "Term & Conditions :- ";
        //                        row["Declaration"] = strDeclaration;
        //                    }

        //                    if (MainPage.pCompanyName)
        //                        row["ForCompany"] = "FOR " + strCompanyName;
        //                    row["AmountInWordHeading"] = "Amt (in words) :";
        //                    // row["Jursdiction"] = MainPage.strGeneratedBy;
        //                    // row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));
        //                    row["SignatureImage"] = MainPage._signatureImage;

        //                    if (MainPage.pAmount)
        //                    {
        //                        ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
        //                        row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
        //                    }

        //                    row["BankName"] = "Bank Name : " + strBankName;
        //                    if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
        //                    {
        //                        row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
        //                        row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;// strAccountNo;
        //                                                                                    // row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";
        //                        row["IFSCCode"] = "SCAN TO PAY";
        //                    }
        //                    else
        //                    {
        //                        row["BranchName"] = "Branch Name : " + strBranchName;
        //                        row["AccountNo"] = "Account No. : " + strAccountNo;
        //                        row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
        //                    }

        //                    if (_dscVerified)
        //                    {
        //                        row["SignatureHeader"] = "Signature valid";
        //                        row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
        //                                             + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
        //                                             + "\nLocation: IN";
        //                    }
        //                    else
        //                    {
        //                        row["SignatureHeader"] = row["SignatureText"] = "";
        //                    }

        //                    if (dBillNetAmt != dTAmt)
        //                    {
        //                        MessageBox.Show("Sorry ! Net amt in invoice and net amt in print is not match !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //                        if (!MainPage.strUserRole.Contains("SUPERADMIN"))
        //                            table.Rows.Clear();
        //                    }
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
        //        CreateErrorReports(strReport);
        //    }


        //    if (table.Rows.Count > 0 && (_dtGST.Rows.Count == 0 || _dtSalesAmt.Rows.Count == 0))
        //        table.Rows.Clear();

        //    return table;
        //}

        private double GetSACAmount(DataTable _dt, string strName)
        {
            double dAmt = 0;
            if (strName == "OTHERCHARGES")
            {
                string strMtrQuery = "";
                if (_dt.Columns.Contains("Mtr"))
                    strMtrQuery = " OR Mtr>0 ";

                DataRow[] rows = _dt.Select("Qty>0 " + strMtrQuery);
                foreach (DataRow row in rows)
                {
                    dAmt += ConvertObjectToDouble(row["NetDisAmt"]);
                }

                rows = _dt.Select("ItemName Like('SERVICE CHARGE%') OR ItemName Like('TAX FREE CHARGE')  OR ItemName Like('OTHERCHARGES') ");
                foreach (DataRow row in rows)
                {
                    dAmt += ConvertObjectToDouble(row["TotalAmt"]);
                }
            }
            else
            {

                DataRow[] rows = _dt.Select("ItemName Like('" + strName + "') ");
                foreach (DataRow row in rows)
                {
                    dAmt += ConvertObjectToDouble(row["TotalAmt"]);
                }
            }
            dAmt = Convert.ToDouble(dAmt.ToString("0.00"));
            return dAmt;
        }


        private double AddGSTNetAmount(double dGrossAmt, DataTable _dt, double dTaxAmount, bool _bIGST, string strTaxType, ref DataTable _dtSalesAmt, DataTable dtItemDetail, string strTaxationType, double dSaleTypeTaxPer)
        {
            dGrossAmt = Math.Round(dGrossAmt, 2);
            DataRow row = _dtSalesAmt.NewRow();
            row["AccountName"] = "Gross Amount";
            row["Amount"] = dGrossAmt.ToString("N2", MainPage.indianCurancy);
            _dtSalesAmt.Rows.Add(row);
            double dNetAmt = 0;

            double dAmt = GetSACAmount(dtItemDetail, "PACKING");
            if (dAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Packing Amount";
                row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "FREIGHT");
            if (dAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Freight Amount";
                row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "TAX FREE");
            if (dAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Packing Amt";
                row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }

            dAmt = GetSACAmount(dtItemDetail, "POSTAGE");
            if (dAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Postage Amt";
                row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "OTHERCHARGE");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Other Amt";
                if (dAmt > 0)
                    row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                else
                    row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }

            dAmt = GetSACAmount(dtItemDetail, "GREENTAX");
            if (dAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Transport Charge";
                row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "DISPATCHED CHARGES");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                if (dAmt > 0)
                {
                    row["AccountName"] = "Dispatched Charge";
                    row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                }
                else
                {
                    row["AccountName"] = "Other Less Amt";
                    row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                }
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }


            dAmt = GetSACAmount(dtItemDetail, "INSURANCECHARGES");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                if (dAmt > 0)
                {
                    row["AccountName"] = "Insurance Charge";
                    row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                }
                else
                {
                    row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                    row["AccountName"] = "Extra Discount";
                }
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }

            if (strTaxationType == "ITEMWISE" || strTaxationType == "")
            {
                dAmt = GetSACAmount(dtItemDetail, "OTHERCHARGES");
                if (dAmt != 0)
                {
                    row = _dtSalesAmt.NewRow();
                    if (dAmt > 0)
                    {
                        row["AccountName"] = "Other Charges";
                        row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                    }
                    else
                    {
                        if (strTaxationType == "" && !MainPage._bTaxStatus)
                            row["AccountName"] = "Adjusted Amt";
                        else
                            row["AccountName"] = "Discount";
                        row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                    }
                    _dtSalesAmt.Rows.Add(row);
                    dNetAmt += dAmt;
                }
            }
            else
            {
                dAmt = GetSACAmount(dtItemDetail, "SERVICE CHARGE");
                if (dAmt != 0)
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "Other Charges";
                    if (dAmt > 0)
                        row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                    else
                        row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                    dNetAmt += dAmt;
                }
            }

            if (MainPage._bTaxStatus && dTaxAmount > 0 && (strTaxType == "EXCLUDED" || strTaxType == "INCLUDED"))
            {
                if (MainPage.strPrintLayout != "T1"  && MainPage.strPrintLayout != "T3" && MainPage.strPrintLayout != "T4" && MainPage.strPrintLayout != "T5")
                {
                    if (_bIGST)
                    {
                        row = _dtSalesAmt.NewRow();
                        row["AccountName"] = "IGST";
                        row["Amount"] = "(+)" + dTaxAmount.ToString("N2", MainPage.indianCurancy);
                        _dtSalesAmt.Rows.Add(row);
                    }
                    else
                    {
                        row = _dtSalesAmt.NewRow();
                        row["AccountName"] = "CGST";
                        row["Amount"] = "(+)" + (dTaxAmount / 2).ToString("N2", MainPage.indianCurancy);
                        _dtSalesAmt.Rows.Add(row);
                        row = _dtSalesAmt.NewRow();
                        row["AccountName"] = "SGST";
                        row["Amount"] = "(+)" + (dTaxAmount / 2).ToString("N2", MainPage.indianCurancy);
                        _dtSalesAmt.Rows.Add(row);
                    }
                }
            }
            else
                dTaxAmount = 0;

            if ((strTaxType != "EXCLUDED" && strTaxType != "INCLUDED"))
                dTaxAmount = 0;

            dNetAmt += dGrossAmt;

            dAmt = GetSACAmount(dtItemDetail, "TCS AMT");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "TCS Amt";
                row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);

                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }

            if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
            {
                dTaxAmount = (dNetAmt * dSaleTypeTaxPer) / 100;
                if (dTaxAmount > 0)
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "TAX Amount";
                    row["Amount"] = "(+)" + dTaxAmount.ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                }
            }
            if (strTaxType != "INCLUDED" || MainPage.strSoftwareType!="RETAIL")
                dNetAmt += dTaxAmount;
            dNetAmt = Convert.ToDouble(dNetAmt.ToString("0.00"));
            double dAbsAmt = Convert.ToDouble(dNetAmt.ToString("0")), dDiff = dAbsAmt - dNetAmt;
            if (dDiff != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Round Off";
                if (dDiff >= 0)
                {
                    row["Amount"] = "(+) " + dDiff.ToString("0.00");
                }
                else
                {
                    row["Amount"] = "(-) " + Math.Abs(dDiff).ToString("0.00");
                }
                _dtSalesAmt.Rows.Add(row);
            }
            dNetAmt += dDiff;
           
            dAmt = GetSACAmount(dtItemDetail, "CASHRECEIVED");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Net Amount";
                row["Amount"] = dNetAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);

                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Cash Received";
                row["Amount"] = "(-) " + dAmt.ToString("N2", MainPage.indianCurancy);

                _dtSalesAmt.Rows.Add(row);
                dNetAmt -= dAmt;
            }
            else
            {
                dAmt = GetSACAmount(dtItemDetail, "CASH REFUND");
                if (dAmt != 0)
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "Cash Refund";
                    row["Amount"] = "(-) " + dAmt.ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                  //  dNetAmt -= dAmt;

                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "Net Amount";
                    row["Amount"] = (dNetAmt-dAmt).ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                }
                else if (MainPage.strPrintLayout == "T1" || MainPage.strPrintLayout == "T2" || MainPage.strPrintLayout == "T3" || MainPage.strPrintLayout == "T4" || MainPage.strPrintLayout == "T5")
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "Net Amount";
                    row["Amount"] = dNetAmt.ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                }
            }

            return dNetAmt;
        }

        private double AddGSTNetAmount_Retail(double dGrossAmt, DataTable _dt, double dTaxAmount, bool _bIGST, string strTaxType, ref DataTable _dtSalesAmt, DataTable dtItemDetail, string strTaxationType, double dSaleTypeTaxPer, DataTable dtCardDetails, string strStateCode = "")
        {
            double _dFinalAmt = 0;
            dGrossAmt = Math.Round(dGrossAmt, 2);
            DataRow row = _dtSalesAmt.NewRow();
            row["AccountName"] = "Gross Amount ₹";
            row["Amount"] = dGrossAmt.ToString("N2", MainPage.indianCurancy);
            _dtSalesAmt.Rows.Add(row);
            double dPayableAmt = 0, dPaidAmt = 0, dNetAmt = 0, dAmt;

            dAmt = GetSACAmount(dtItemDetail, "OtherAmt");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Other Amt ₹";
                if (dAmt > 0)
                    row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                else
                    row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dNetAmt += dAmt;
            }

            if (strTaxationType == "ITEMWISE" || strTaxationType == "")
            {
                dAmt = GetSACAmount(dtItemDetail, "OTHERCHARGES");
                if (dAmt != 0)
                {
                    row = _dtSalesAmt.NewRow();
                    if (dAmt > 0)
                    {
                        row["AccountName"] = "Other Charges ₹";
                        row["Amount"] = "(+) " + dAmt.ToString("N2", MainPage.indianCurancy);
                    }
                    else
                    {
                        if (strTaxationType == "" && !MainPage._bTaxStatus)
                            row["AccountName"] = "Adjusted Amt ₹";
                        else
                            row["AccountName"] = "Discount ₹";
                        row["Amount"] = "(-) " + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                    }
                    _dtSalesAmt.Rows.Add(row);
                    dNetAmt += dAmt;
                }
            }


            if (strTaxType != "EXCLUDED" && strTaxType != "INCLUDED")
                dTaxAmount = 0;
            if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
            {
                dTaxAmount = (dNetAmt * dSaleTypeTaxPer) / 100;
                if (dTaxAmount > 0)
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "TAX Amount ₹";
                    row["Amount"] = "(+)" + dTaxAmount.ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                }
            }

            dAmt = GetSACAmount(dtItemDetail, "Discount");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Discount Amount ₹";
                row["Amount"] = "(-) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
            }
            dAmt = GetSACAmount(dtItemDetail, "Taxable");
            if (dAmt != 0)
            {
                if (MainPage.strPrintLayout != "T3" && MainPage.strPrintLayout != "T4" && MainPage.strPrintLayout != "T5")
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "Taxable Amount ₹";
                    row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                }
            }

            if (dTaxAmount > 0)
            {
                if (MainPage.strPrintLayout != "T3" && MainPage.strPrintLayout != "T4" && MainPage.strPrintLayout != "T5")
                {
                    if (_bIGST)
                    {
                        row = _dtSalesAmt.NewRow();
                        row["AccountName"] = "IGST Amount ₹";
                        row["Amount"] = "(+)" + dTaxAmount.ToString("N2", MainPage.indianCurancy);
                        _dtSalesAmt.Rows.Add(row);
                    }
                    else
                    {
                        row = _dtSalesAmt.NewRow();
                        row["AccountName"] = "CGST Amount ₹";
                        row["Amount"] = "(+)" + (dTaxAmount / 2).ToString("N2", MainPage.indianCurancy);
                        _dtSalesAmt.Rows.Add(row);
                        row = _dtSalesAmt.NewRow();
                        if (strStateCode == "35" || strStateCode == "31" || strStateCode == "25" || strStateCode == "26" || strStateCode == "04")
                            row["AccountName"] = "UTGST ₹";
                        else
                            row["AccountName"] = "SGST Amount ₹";
                        row["Amount"] = "(+)" + (dTaxAmount / 2).ToString("N2", MainPage.indianCurancy);
                        _dtSalesAmt.Rows.Add(row);
                    }
                }

                if (strTaxType != "EXCLUDED")
                    dTaxAmount = 0;
            }
            else
                dTaxAmount = 0;

            dAmt = GetSACAmount(dtItemDetail, "RoundOff");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Round Off ₹";
                row["Amount"] = (dAmt > 0 ? "(+) " : "(-) ") + Math.Abs(dAmt).ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
            }

            _dFinalAmt = dAmt = GetSACAmount(dtItemDetail, "Final");
            if (dAmt != 0)
            {
                if (dGrossAmt != _dFinalAmt)
                {
                    row = _dtSalesAmt.NewRow();
                    row["AccountName"] = "Final Amount ₹";
                    row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                    _dtSalesAmt.Rows.Add(row);
                }
                dPayableAmt = dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "Advance");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Advance Amount ₹";
                row["Amount"] = "(-) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dPayableAmt -= dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "Return");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Return Amount ₹";
                row["Amount"] = "(-) " + dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dPayableAmt -= dAmt;
            }
            if (_dFinalAmt == dPayableAmt)
            {
                if (dGrossAmt != _dFinalAmt)
                    _dtSalesAmt.Rows[_dtSalesAmt.Rows.Count - 1]["AccountName"] = "Payable Amount ₹";
            }
            else if (dPayableAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Payable Amount ₹";
                row["Amount"] = dPayableAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
            }
            string cardType = "Card";
            if (dtCardDetails.Rows.Count > 0)
                cardType = Convert.ToString(dtCardDetails.Rows[0]["CardType"]);
            if (cardType.Contains("UPI"))
                cardType = "UPI";
            else if (cardType.Contains("WALLET"))
                cardType = "Wallet";
            else
                cardType = "Card";

            dAmt = GetSACAmount(dtItemDetail, "Card");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Paid by " + cardType + " ₹";
                row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dPayableAmt -= dAmt;
                dPaidAmt += dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "Cheque");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Paid by Cheque ₹";
                row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
                dPayableAmt -= dAmt;
                dPaidAmt += dAmt;
            }
            dAmt = GetSACAmount(dtItemDetail, "Tender");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Tender Amount ₹";
                row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
            }

            dAmt = GetSACAmount(dtItemDetail, "CashAmt");
            if (dAmt != 0)
            {

                //row = _dtSalesAmt.NewRow();
                //row["AccountName"] = "Paid by Cash ₹";
                //row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                //_dtSalesAmt.Rows.Add(row);
                dPayableAmt -= dAmt;
                dPaidAmt += dAmt;
            }

            if (dPayableAmt > 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Credit Amount ₹";
                row["Amount"] = dPayableAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
            }
            dAmt = GetSACAmount(dtItemDetail, "Refund");
            if (dAmt != 0)
            {
                row = _dtSalesAmt.NewRow();
                row["AccountName"] = "Refund Amount ₹";
                row["Amount"] = dAmt.ToString("N2", MainPage.indianCurancy);
                _dtSalesAmt.Rows.Add(row);
            }

            if (MainPage.strPrintLayout == "H")
                return dPaidAmt;
            else
                return _dFinalAmt;
            //return _dFinalAmt;
        }



        public static double ConvertObjectToDouble(object objValue, int _dec)
        {
            double dValue = 0;
            try
            {
                if (Convert.ToString(objValue) != "")
                    dValue = Convert.ToDouble(objValue);

                if (_dec == 2)
                    dValue = Convert.ToDouble(dValue.ToString("0.00"));
                else if (_dec == 3)
                    dValue = Convert.ToDouble(dValue.ToString("0.000"));

            }
            catch
            {
            }
            return dValue;
        }

        private void CreateGSTDataTable(ref DataTable _dt, DataTable dt, bool _bIGST, string strState, string strBuyerState, ref double dTTaxAmt, string strStateCode="")
        {
            _dt = new DataTable();
            _dt.Columns.Add("HSNCode", typeof(String));
            _dt.Columns.Add("TaxableValue", typeof(String));
            _dt.Columns.Add("CGSTRate", typeof(String));
            _dt.Columns.Add("CGSTAmt", typeof(String));
            _dt.Columns.Add("SGSTRate", typeof(String));
            _dt.Columns.Add("SGSTAmt", typeof(String));
            _dt.Columns.Add("TotalTaxValue", typeof(String));
            _dt.Columns.Add("TotalCGSTAmt", typeof(String));
            _dt.Columns.Add("TotalSGSTAmt", typeof(String));
            _dt.Columns.Add("NetTaxInWord", typeof(String));
            _dt.Columns.Add("Quantity", typeof(String));
            _dt.Columns.Add("SGSTHeader", typeof(String));
            double dTaxRate = 0, dTAmt = 0;
            dTTaxAmt = 0;
            if (dt.Rows.Count > 0)
            {
                //if (strState != strBuyerState)
                //    _bIGST = true;

                foreach (DataRow row in dt.Rows)
                {
                    DataRow _row = _dt.NewRow();
                    _row["HSNCode"] = row["HSNCode"];
                    _row["Quantity"] = row["Qty"];
                    if (strStateCode == "35" || strStateCode == "31" || strStateCode == "25" || strStateCode == "26" || strStateCode == "04")
                        _row["SGSTHeader"] ="UTGST AMT";
                    else
                        _row["SGSTHeader"] = "SGST AMT";

                    _row["TaxableValue"] = ConvertObjectToDouble(row["Amount"]).ToString("N2", MainPage.indianCurancy);
                    dTAmt = ConvertObjectToDouble(row["TaxAmt"]);
                   // dTAmt = Math.Round(dTAmt, 2);
                        dTAmt = Convert.ToDouble(dTAmt.ToString("N2"));
                    dTTaxAmt += dTAmt;

                    if (_bIGST)
                    {
                       
                       _row["CGSTRate"] = row["TaxRate"] + " %";
                        _row["CGSTAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);
                    }
                    else
                    {
                        dTaxRate = ConvertObjectToDouble(row["TaxRate"]);                    
                        _row["CGSTRate"] = (dTaxRate / 2) + " %";
                        _row["CGSTAmt"] = (dTAmt / 2).ToString("N2", MainPage.indianCurancy);

                        _row["SGSTRate"] = (dTaxRate / 2) + " %";
                        _row["SGSTAmt"] = (dTAmt / 2).ToString("N2", MainPage.indianCurancy);
                    }
                    _dt.Rows.Add(_row);
                }
            }

            if (_dt.Rows.Count > 0)
            {
                double dAmt = ConvertObjectToDouble(dt.Compute("Sum(Amount)", ""));
                int _index = _dt.Rows.Count - 1;
                _dt.Rows[_index]["TotalTaxValue"] = dAmt.ToString("N2", MainPage.indianCurancy);
                if (_bIGST)
                    _dt.Rows[_index]["TotalCGSTAmt"] = dTTaxAmt.ToString("N2", MainPage.indianCurancy);
                else
                {
                    _dt.Rows[_index]["TotalCGSTAmt"] = (dTTaxAmt / 2).ToString("N2", MainPage.indianCurancy);
                    _dt.Rows[_index]["TotalSGSTAmt"] = (dTTaxAmt / 2).ToString("N2", MainPage.indianCurancy);
                }
                dTTaxAmt = Math.Round(dTTaxAmt, 2);
                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                //dTTaxAmt = Convert.ToDouble(dTTaxAmt.ToString("0.00"));
                _dt.Rows[_index]["NetTaxInWord"] = objCurrency.changeNumericToWords(dTTaxAmt);
            }
        }

        private void CreateDataTableColumn(ref DataTable dt)
        {
            dt.Columns.Add("CompanyName", typeof(String));
            dt.Columns.Add("CompanyAddress", typeof(String));
            dt.Columns.Add("CompanyStatePin", typeof(String));
            dt.Columns.Add("CompanyEMail", typeof(String));
            dt.Columns.Add("BuyerName", typeof(String));
            dt.Columns.Add("BuyerAddress", typeof(String));
            dt.Columns.Add("BuyerStatePin", typeof(String));
            dt.Columns.Add("BuyerEmail", typeof(String));
            dt.Columns.Add("InvoiceNo", typeof(String));
            dt.Columns.Add("InvoiceDate", typeof(String));
            dt.Columns.Add("SupplierRef", typeof(String));
            dt.Columns.Add("OtherRef", typeof(String));
            dt.Columns.Add("OrderNo", typeof(String));
            dt.Columns.Add("OrderDate", typeof(String));
            dt.Columns.Add("LRNo", typeof(String));
            dt.Columns.Add("LRDate", typeof(String));
            dt.Columns.Add("Transport", typeof(String));
            dt.Columns.Add("Destination", typeof(String));
            dt.Columns.Add("TermsOfDelivery", typeof(String));
            dt.Columns.Add("SNo", typeof(String));
            dt.Columns.Add("ItemName", typeof(String));
            dt.Columns.Add("Qty", typeof(String));
            dt.Columns.Add("Rate", typeof(String));
            dt.Columns.Add("UOM", typeof(String));
            dt.Columns.Add("Amount", typeof(String));
            dt.Columns.Add("OtherAmount", typeof(String));
            dt.Columns.Add("Continue", typeof(String));
            dt.Columns.Add("EOE", typeof(String));
            dt.Columns.Add("TotalQty", typeof(String));
            dt.Columns.Add("TotalAmt", typeof(String));
            dt.Columns.Add("AmountInWordHeading", typeof(String));
            dt.Columns.Add("AmountInWord", typeof(String));
            dt.Columns.Add("FormReceive", typeof(String));
            dt.Columns.Add("CompanyTIN", typeof(String));
            dt.Columns.Add("CompanyCST", typeof(String));
            dt.Columns.Add("BuyerTIN", typeof(String));
            dt.Columns.Add("BuyerCST", typeof(String));
            dt.Columns.Add("DeclarationHeader", typeof(String));
            dt.Columns.Add("Declaration", typeof(String));
            dt.Columns.Add("ForCompany", typeof(String));
            dt.Columns.Add("AuthSignatory", typeof(String));
            dt.Columns.Add("HeaderName", typeof(String));
            dt.Columns.Add("SubTitle", typeof(String));
            dt.Columns.Add("GeneratedBy", typeof(String));
            dt.Columns.Add("Jursdiction", typeof(String));
            dt.Columns.Add("SignaturePath", typeof(Byte[]));
            dt.Columns.Add("CompanyGSTNo", typeof(String));
            dt.Columns.Add("ShippedName", typeof(String));
            dt.Columns.Add("ShippedAddress", typeof(String));
            dt.Columns.Add("ShippedEmail", typeof(String));
            dt.Columns.Add("ShippedState", typeof(String));
            dt.Columns.Add("ShippedStateCode", typeof(String));
            dt.Columns.Add("ShippedGSTNo", typeof(String));
            dt.Columns.Add("ShippedAadharNo", typeof(String));
            dt.Columns.Add("BilledGSTNo", typeof(String));
            dt.Columns.Add("BilledAadharNo", typeof(String));
            dt.Columns.Add("BilledStateCode", typeof(String));
            dt.Columns.Add("TimeofSupply", typeof(String));
            dt.Columns.Add("HSNCode", typeof(String));
            dt.Columns.Add("BankName", typeof(String));
            dt.Columns.Add("BranchName", typeof(String));
            dt.Columns.Add("AccountNo", typeof(String));
            dt.Columns.Add("IFSCCode", typeof(String));
            dt.Columns.Add("Other", typeof(String));

            dt.Columns.Add("DisPer", typeof(String));
            dt.Columns.Add("CGSTPer", typeof(String));
            dt.Columns.Add("SGSTPer", typeof(String));
            dt.Columns.Add("IGSTPer", typeof(String));
            dt.Columns.Add("GrossAmt", typeof(String));
            dt.Columns.Add("TotalDiscount", typeof(String));
            dt.Columns.Add("TotalCGST", typeof(String));
            dt.Columns.Add("TotalSGST", typeof(String));
            dt.Columns.Add("TotalIGST", typeof(String));
            dt.Columns.Add("BilledPANNo", typeof(String));
            dt.Columns.Add("ShippedPANNo", typeof(String));
            dt.Columns.Add("WayBillNo", typeof(String));
            dt.Columns.Add("VehicleNo", typeof(String));
            dt.Columns.Add("BuyerDealerType", typeof(String));
            dt.Columns.Add("ShippedDealerType", typeof(String));
            dt.Columns.Add("PurchaseParty", typeof(String));
            dt.Columns.Add("Cut", typeof(String));
            dt.Columns.Add("Mtr", typeof(String));
            dt.Columns.Add("Fold", typeof(String));
            dt.Columns.Add("SignatureHeader", typeof(String));
            dt.Columns.Add("SignatureText", typeof(String));

            dt.Columns.Add("HeaderImage", typeof(byte[]));
            dt.Columns.Add("BrandLogo", typeof(byte[]));
            dt.Columns.Add("SignatureImage", typeof(byte[]));
            dt.Columns.Add("ROAmt", typeof(String));
            dt.Columns.Add("TaxPer", typeof(String));
            dt.Columns.Add("User", typeof(String));
            dt.Columns.Add("IRNNo", typeof(String));
            dt.Columns.Add("ACKNo", typeof(String));
            dt.Columns.Add("QRCode", typeof(byte[]));
            dt.Columns.Add("MRP", typeof(String));
            dt.Columns.Add("TenderAmt", typeof(String));
            dt.Columns.Add("RefundAmt", typeof(String));
            dt.Columns.Add("afterLessAmt", typeof(String));
            dt.Columns.Add("ReturnAmt", typeof(String));
            dt.Columns.Add("AdvanceAmt", typeof(String));

            dt.Columns.Add("ShipFromName", typeof(String));
            dt.Columns.Add("ShipFromAddress", typeof(String));
            dt.Columns.Add("ShipFromPhone", typeof(String));
            dt.Columns.Add("ShipFromGSTNo", typeof(String));
            dt.Columns.Add("ShipFromState", typeof(String));

            dt.Columns.Add("SalesMans", typeof(String));
            dt.Columns.Add("FooterMsg", typeof(String));
            dt.Columns.Add("TotalGST", typeof(String));
            dt.Columns.Add("TotalTaxable", typeof(String));
            dt.Columns.Add("TotalMRP", typeof(String));
            dt.Columns.Add("GSTInOneLine", typeof(String));
            
        }


        public DataTable CreateDebitNoteDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, string strHeaderName, string strEntryType)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = "";
                strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where GReturnCode='" + strSerialCode + "' OR PurchaseReturnCode='" + strSerialCode + "' OR DebitNoteCode='" + strSerialCode + "' OR CreditNoteCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'' as PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD ";
                if (strEntryType == "CREDIT NOTE")
                {

                    strQuery += " Select SM.AccountNo, (SM.AreaCode+SM.AccountNo+' '+SM.Name) as Name,Replace(ISNULL(dbo.GetFullName(SR.SubPartyID),'SELF'),SR.SubPartyID+' ','') SubParty,SR.Remark,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,_SM.StateCode as BStateCode,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,(CASE WHEN SaleBillNo!=0 then (SR.SaleBillCode + ' ' + CAST(SR.SaleBillNo as varchar)) else '' end) SaleBillNo,(Convert(nvarchar, SR.SaleBillDate, 103)) SaleDate,SR.NetAmt,[IRNNO],[QRCode],'Place of Supply : '+(SM.State+' ('+_SM.StateCode+')')PlaceOfSupply from SaleReturn SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar)) left join SaleTypeMaster STM on SR.SaleType = STM.TaxName and STM.SaleType = 'SALES' left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " "

                                + " Select *,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate,((CASE WHEN Qty> 0 and (Select TOP 1 ServiceAmt from SaleReturn Where BillCode='" + strSerialCode + "' and BillNo=" + strSerialNo + ")>0 then ROUND((Select TOP 1(TaxAmt * TaxDhara / 100.00) from CompanySetting),4) else 0 end)) NetDisAmt from ( "
                                + " Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from( "
                                + " Select SerialNo, InvoiceNo, ItemName, DesignName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, (Amount + DAmt) TotalAmt from( "
                                + " Select SerialNo, InvoiceNo, ItemName, DesignName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, Amount, ((Amount * DisStatus) / 100)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from( "
                                + " Select SerialNo, InvoiceNo, ItemName, DesignName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, (ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType from( "
                                + " Select SRD.PurchaseBillNo as SerialNo, '' as InvoiceNo, SRD.ItemName, SRD.DesignName, SUBSTRING(HSNCode,0,7)HSNCode, SM.Name as PurchaseParty, SRD.Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SRD.ItemName) UnitName, SRD.Amount, (SRD.DisStatus + CAST(SRD.Discount as varchar)) DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SupplierMaster SM on(SM.AreaCode + CAST(SM.AccountNo as varchar)) = SRD.PurchasePartyID  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0)_Sales Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName, '' as DesignName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,((SRD.Packing* (CASE WHen TaxIncluded = 1 then(100.00/(100.00 + TaxPer)) else 1 end))) Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where (GReturnCode=SR.BillCode OR DebitNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Packing > 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName, '' as DesignName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,((SRD.Freight* (CASE WHen TaxIncluded = 1 then(100.00/(100.00 + TaxPer)) else 1 end)))Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where (GReturnCode=SR.BillCode OR DebitNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Freight > 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName, '' as DesignName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SE.TaxFree)Amount,0 as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SE.TaxFree> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName, '' as DesignName,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((SR.PackingAmt * (CASE WHen TaxIncluded = 1 then((100 - SR.TaxPer) / 100) else 1 end)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and PackingAmt> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName, '' as DesignName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 - SR.TaxPer) / 100) else 1 end) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and OtherAmt!= 0 )_Sales )Sales)_Sales)FinalSales "

                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                                + " Select (GM.Other + ' : ' + SUBSTRING(GM.HSNCode,0,7)) as HSNCode, SRD.Qty as Quantity, (SRD.Amount + ((SRD.Amount * (SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0   Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode, 0 as Quantity,ROUND((((((Amount + (Amount * DisStatus) / 100) * GM.TaxRate) / 100) * CS.TaxDhara) / 100) * (CASE WHen TaxType = 1 then((100 + TaxPer) / 100) else 1 end),2)Amount, TaxPer as TaxRate, TaxType from (Select ROUND((CASE WHEN SMN.TaxIncluded = 1  then((SRD.Amount * 100) / (100 + GM.TaxRate)) else SRD.Amount end), 2) Amount, (SRD.DisStatus + CAST(SRD.Discount as varchar)) DisStatus, SMN.TaxIncluded as TaxType, SRD.ItemName, SRD.DesignName, SRD.Qty as Qty,SR.TaxPer from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end))/ SRD.Qty)> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0 and SR.ServiceAmt!=0 )_SAles OUTER APPLY(Select TOP 1 TaxDhara from CompanySetting) CS Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN _SAles.TaxType = 1 then((_SAles.Amount * 100) / (100 + TaxRate)) else _SAles.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(_SAles.DisStatus)) / 100.00) else 1.00 end))/_SAles.Qty)> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN _SAles.TaxType = 1 then((_SAles.Amount * 100) / (100 + TaxRate)) else _SAles.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(_SAles.DisStatus)) / 100.00) else 1.00 end))/ _SAles.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where _SAles.ItemName = _IM.ItemName ) as GM  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((((SRD.Packing + SRD.Freight)) + ((SRD.Packing + SRD.Freight + SRD.TaxFree) * CS.FreightDhara / 100)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where (GReturnCode=SR.BillCode OR DebitNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and(SRD.Packing + SRD.Freight) > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(SRD.TaxFree, 2) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer Apply (Select TOP 1 TaxDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.TaxFree > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)+PackingAmt* (CASE WHen SMN.TaxIncluded = 1 then((100 - SR.TaxPer) / 100) else 1 end)), 2) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount!=0 )_Sales Order by HSNCode asc,TaxRate desc ";
                }
                else
                {
                    strQuery += " Select SM.AccountNo, (SM.AreaCode+SM.AccountNo+' '+SM.Name) as Name,'' SubParty,SR.Remark as Remark,(SM.Address + ', '+SM.Station+', '+SM.State+'-'+SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo+ ', '+SM.PhoneNo)MobileNo,SM.PANNumber,(SR.BillCode+' '+CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar,SR.Date,103))Date,_SM.StateCode as BStateCode,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate+STM.SGSTTaxRate)TaxRate,STM.Region,(CASE WHEN SR.ReverseCharge!='' then SR.ReverseCharge else (SR.PurchaseBillCode+' '+ CAST(SR.PurchaseBillNo as varchar)) end) SaleBillNo,CONVERT(VARCHAR,SR.PurchaseBillDate,103) SaleDate,SR.NetAmt,'' as [IRNNO],'' as [QRCode],'Place of Supply : '+(SM.State+' ('+_SM.StateCode+')')PlaceOfSupply from PurchaseReturn SR  inner join SupplierMaster SM On SR.PurchasePartyID=(SM.AreaCode+CAST(SM.AccountNo as nvarchar)) left join SaleTypeMaster STM on SR.PurchaseType=STM.TaxName and STM.SaleType='PURCHASE' left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " "
                             + " Select *,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate,0 NetDisAmt from ( "
                             + " Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from( "
                             + " Select SerialNo, InvoiceNo, ItemName, DesignName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, (Amount + DAmt) TotalAmt from( "
                             + " Select SerialNo, InvoiceNo, ItemName, DesignName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, Amount, ((Amount * DisStatus) / 100)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from( "
                             + " Select SerialNo, InvoiceNo, ItemName, DesignName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, (ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType from( "
                             + " Select '' as SerialNo, '' as InvoiceNo, SRD.ItemName, SRD.DesignName, SUBSTRING(HSNCode,0,7)HSNCode, SM.Name as PurchaseParty, SRD.Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SRD.ItemName) UnitName, SRD.Amount, (SRD.DisStatus + CAST(SRD.Discount as varchar)) DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SupplierMaster SM on(SM.AreaCode + CAST(SM.AccountNo as varchar)) = SRD.SalePartyID  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName and SMN.SaleType = 'PURCHASE' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0)_Sales Union All "
                             + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName, '' as DesignName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Packing* (CASE WHen SMN.TaxIncluded = 1 then(100/(100 + SR.TaxPer)) else 1 end))Amount,'0' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where (PurchaseReturnCode=SR.BillCode OR CreditNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Packing > 0  Union All "
                             + " Select '' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName, '' as DesignName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Freight*(CASE WHen SMN.TaxIncluded = 1 then(100/(100 + SR.TaxPer)) else 1 end))Amount,'0' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where (PurchaseReturnCode=SR.BillCode OR CreditNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Freight > 0  Union All "
                             + " Select '' as SerialNo,'' as InvoiceNo,'TCS AMT' as ItemName,'' as DesignName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SR.TaxFree)Amount,0 as DisStatus,0 as TaxRate,1 as TaxType from PurchaseReturn SR Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SR.TaxFree > 0 Union All "
                             + " Select '' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName, '' as DesignName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SE.TaxFree)Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SE.TaxFree > 0  Union All "
                             + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName, '' as DesignName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money) * (CASE WHen SMN.TaxIncluded = 1 then(100/(100 + SR.TaxPer)) else 1 end)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and OtherAmt!= 0 )_Sales )Sales)_Sales)FinalSales "

                             + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                             + " Select(GM.Other + ' : ' + SUBSTRING(GM.HSNCode,0,7)) as HSNCode, SRD.Qty as Quantity, (SRD.Amount + ((SRD.Amount * (SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(SRD.DisStatus + CAST(SRD.Discount as varchar))) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0   Union All "
                             + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Packing + SRD.Freight)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting Where (PurchaseReturnCode=SR.BillCode OR CreditNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and(SRD.Packing + SRD.Freight) > 0  Union All "
                             + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(SRD.TaxFree, 2) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Outer Apply (Select TOP 1 TaxDhara from CompanySetting Where (PurchaseReturnCode=SR.BillCode OR CreditNoteCode=SR.BillCode)) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.TaxFree > 0  Union All "
                             + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,(ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) ) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales )_Sales Order by HSNCode asc,TaxRate desc ";
                }

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOFSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "";
                        string strIRNNo="",strQRCode="", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strDealerType = "", strPackerName = "", strInvoiceNo = "";

                        double dTTaxAmt = 0,dBillNetAmt=0;

                        if (strEntryType == "CREDIT NOTE" && MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                        {
                            strBankName = Convert.ToString(dRow["BankName"]);
                            strAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                            strIFSCCode = "ICIC0000106";
                            strBranchName = "DELHI";
                        }
                        else
                        {
                            strBankName = Convert.ToString(dRow["BankName"]);
                            strBranchName = Convert.ToString(dRow["BranchName"]);
                            strAccountNo = Convert.ToString(dRow["AccountName"]);
                            strIFSCCode = Convert.ToString(dRow["IFSCCode"]);
                        }


                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        dBillNetAmt = ConvertObjectToDoubleStatic(_dRow["NetAmt"]);

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }

                        strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        if (strIRNNo == "")
                            strIRNNo = "N/A";
                        strIRNNo = "IRN : " + strIRNNo;
                        strQRCode = Convert.ToString(_dRow["QRCode"]);
                        byte[] _bQRCode = null;
                        if (strQRCode != "")
                            _bQRCode = QRCodeGen.GetQRCode(strQRCode);

                        strPlaceOFSupply = Convert.ToString(_dRow["PlaceOfSupply"]);

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["Name"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);

                        }
                        int rowIndex = 1;
                        double dQty = 0, dAmt = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;

                        if (Convert.ToBoolean(_dRow["TaxType"]))
                            strTaxType = "INCLUDED";
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);

                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOFSupply;

                                if (Convert.ToString(_dRow["SaleBillNo"]) != "")
                                {
                                    row["SupplierRef"] = _dRow["SaleBillNo"];
                                    row["BuyerTIN"] = _dRow["SaleDate"];
                                }
                                row["OtherRef"] = _dRow["SubParty"];
                                row["BuyerName"] = strBuyerName;
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;

                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["IRNNo"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                row["HeaderName"] = strHeaderName;
                                if (Convert.ToString(rows["SerialNo"]) != "")
                                    row["SNo"] = rows["SerialNo"];
                                else
                                    row["SNo"] = rowIndex + ".";

                                string DesignName = rows["DesignName"].ToString();
                                if (DesignName == "")
                                    row["ItemName"] = rows["ItemName"];
                                else
                                    row["ItemName"] = rows["DesignName"];

                                row["HSNCode"] = rows["HSNCode"];
                                if (Convert.ToString(rows["PurchaseParty"]) != "")
                                    row["PurchaseParty"] = rows["PurchaseParty"];
                                else
                                    row["PurchaseParty"] = "------------";


                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dTAmt += dSAmount;

                                if (dDisPer != 0)
                                    row["DisPer"] = rows["DisStatus"] + "%";
                                else
                                    row["DisPer"] = "---";

                                dAmt = ConvertObjectToDouble(rows["Amount"]);
                                row["OrderNo"] = strInvoiceNo + "P.Amt:" + dAmt.ToString("N0", MainPage.indianCurancy);


                                if (MainPage.pQty)
                                {
                                    if (dQty > 0)
                                        row["Qty"] = rows["Qty"] + " " + rows["UnitName"];
                                    else
                                        row["Qty"] = "---";
                                }

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    if (dQty != 0)
                                        row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    else
                                        row["UOM"] = "---";
                                    double _dRate = ConvertObjectToDouble(rows["Rate"]);
                                    if (_dRate > 0)
                                        row["Rate"] = ConvertObjectToDouble(rows["Rate"]).ToString("N2", MainPage.indianCurancy);
                                    else
                                        row["Rate"] = "---";
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + " ,  Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                         PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";

                                row["HeaderImage"] = MainPage._headerImage;
                                row["BrandLogo"] = MainPage._brandLogo;

                                if (strQRCode != "")
                                    row["QRCode"] = _bQRCode;

                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            DataRow row = table.Rows[table.Rows.Count - 1];
                            dTAmt = Math.Round(dTAmt, 0);

                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";

                            if (MainPage.pQty)
                                row["TotalQty"] = "Total Qty : " + dTQty + "              Grand Total :";
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            if (strEntryType == "CREDIT NOTE" && MainPage.strSaleRtnDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strSaleRtnDeclaration;
                            }
                            else if (MainPage.strPurchaseRtnDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strPurchaseRtnDeclaration;
                            }
                            else if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amount (in words)";
                            //    row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }


                            if (strEntryType == "CREDIT NOTE" && MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "IFSC Code : " + strIFSCCode;
                                row["AccountNo"] = "Account No. : " + strAccountNo + "        Branch Name : " + strBranchName;
                                row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";// IFSC Code : " + strPartyIFSCCode;// strIFSCCode;
                            }
                            else
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                                row["SignatureImage"] = MainPage._signatureImage;


                            if (dBillNetAmt != dTAmt)
                            {
                                MessageBox.Show("Sorry ! Net amt in invoice and net amt in print is not match !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                                    table.Rows.Clear();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }

        public DataTable CreateDebitNoteRetailDataTable_Other(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, string strHeaderName)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from ( Select 0 as ID, CD.FullCompanyName, TINNo as HOAddress,'Place of Supply : ' + (CD.StateName + ' (' + SM.StateCode + ')')PlaceOfSupply,(Address + ''+CD.StateName+' - '+CAST(CD.PinCode as varchar))Address, (CD.STDNo+' - '+CD.PhoneNo)  PhoneNo, EmailID,Website,'' as CompanyTIN ,CD.StateName,SM.StateCode,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD LEFT JOIN StateMaster SM On SM.StateName = CD.StateName Where Other in (Select CompanyName from CompanySetting Where SBillCode = '" + strSerialCode + "') Union ALL Select 1 as ID, CD.FullCompanyName,CD.TINNo as HOAddress,'Place of Supply : ' + (CD.StateName + ' (' + SM.StateCode + ')')PlaceOfSupply, (Address + ''+CD.StateName+' - '+CAST(CD.PinCode as varchar))Address, (CD.STDNo+' - '+CD.PhoneNo)  PhoneNo, EmailID,Website,'' as CompanyTIN,CD.StateName,SM.StateCode,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD LEFT JOIN StateMaster SM On SM.StateName = CD.StateName)_CD ";
                if (strHeaderName == "CREDIT NOTE")
                {
                    strQuery += " Select SM.AccountNo, (SM.AreaCode+SM.AccountNo+' '+SM.Name) as Name,Replace(ISNULL(dbo.GetFullName(SR.SubPartyID),'SELF'),SR.SubPartyID+' ','') SubParty,SR.Remark,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,_SM.StateCode as BStateCode,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,(CASE WHEN SaleBillNo!=0 then (SR.SaleBillCode + ' ' + CAST(SR.SaleBillNo as varchar)) else '' end) SaleBillNo,(Convert(nvarchar, SR.SaleBillDate, 103)) SaleDate,SR.IRNNo,SR.QRCode,'Place of Supply : '+(SM.State+' ('+_SM.StateCode+')')PlaceOfSupply from SaleReturn SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar)) left join SaleTypeMaster STM on SR.SaleType = STM.TaxName and STM.SaleType = 'SALES'  left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " "
                                ///,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate
                                + " Select *,((CASE WHEN Qty> 0 and (Select TOP 1 ServiceAmt from SaleReturn Where BillCode='" + strSerialCode + "' and BillNo=" + strSerialNo + ")>0 then ROUND((Select TOP 1(TaxAmt * TaxDhara / 100.00) from CompanySetting),4) else 0 end)) NetDisAmt from ( "
                                + " Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from( "
                                + " Select SerialNo, InvoiceNo, ItemName,Variant1,Variant2, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, Rate, MRP, (Amount + DAmt) TotalAmt, SalesMans from( "
                                + " Select SerialNo, InvoiceNo, ItemName,Variant1,Variant2, HSNCode, PurchaseParty, Amount, ((Amount * DisStatus) / 100.00)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, SalesMans, UnitName, MRP, Rate from( "
                                ///(ROUND((CASE WHEN TaxType = 1 then((Amount * 100.00) / (100.00 + TaxRate)) else (Amount)end), 4))
                                + " Select SerialNo, InvoiceNo, ItemName,Variant1,Variant2, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, MRP, Rate,Amount, DisStatus, TaxRate, TaxType, SalesMans from( "
                                + " Select SRD.PurchaseBillNo as SerialNo, '' as InvoiceNo, SRD.ItemName as ItemName, SRD.Variant1, SRD.Variant2, GM.HSNCode, SM.Name as PurchaseParty, SRD.Qty as Quantity, UnitName,SRD.MRP,SRD.Rate, (SRD.Rate*SRD.Qty)Amount,(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else CAST(CAST(SRD.SDisPer as numeric(18,0)) as varchar) end) DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType,(select distinct STUFF((SELECT distinct ', ' + ISNULL(SR1.SalesMan,'DIRECT') from SaleReturnDetails SR1 where SRD.BillCode = SR1.BillCode AND SRD.BillNo = SR1.BillNo FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') ,1,2,'')) SalesMans from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SupplierMaster SM on(SM.AreaCode + CAST(SM.AccountNo as varchar)) = SRD.PurchasePartyID  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0)_Sales Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' Variant1,'' Variant2, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,(SRD.Packing)Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Packing > 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName,'' Variant1,'' Variant2, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,(SRD.Freight)Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Freight > 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName,'' Variant1,'' Variant2,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,(SE.TaxFree)Amount,0 as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SaleReturn SR inner join SaleReturnDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SE.TaxFree> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'CASH REFUND' as ItemName,'' Variant1,'' Variant2,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,(CashAmt)Amount,0 as DisStatus,0 as TaxRate,0 as TaxType,'' SalesMans from SaleReturn SR Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and CashAmt>0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' Variant1,'' Variant2,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,ROUND((SR.PackingAmt), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and PackingAmt> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' Variant1,'' Variant2,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,ROUND((SR.NetDiscount), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and NetDiscount> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' Variant1,'' Variant2,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,0 Rate,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2)  Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType,'' SalesMans from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and OtherAmt!= 0 )_Sales )Sales)_Sales)FinalSales "

                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                                + " Select (GM.Other + ' : ' + GM.HSNCode) as HSNCode, SRD.Qty as Quantity, (SRD.Amount + ((SRD.Amount * (CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0   Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Packing + SRD.Freight) + ((SRD.Packing + SRD.Freight + SRD.TaxFree) * CS.FreightDhara / 100)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and(SRD.Packing + SRD.Freight) > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(SRD.TaxFree, 2) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer Apply (Select TOP 1 TaxDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.TaxFree > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)+PackingAmt+NetDiscount), 2)  Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount!=0 )_Sales Order by HSNCode asc,TaxRate desc ";
                }
                //else
                //{
                //    strQuery += " Select SM.AccountNo, (SM.AreaCode+SM.AccountNo+' '+SM.Name) as Name,'' SubParty,SR.Remark,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,_SM.StateCode as BStateCode,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,(CASE WHEN PurchaseBillNo!=0 then (SR.PurchaseBillCode + ' ' + CAST(SR.PurchaseBillNo as varchar)) else '' end) SaleBillNo,(Convert(nvarchar, SR.PurchaseBillDate, 103)) SaleDate,ReverseCharge  as InvoiceNo,SR.Remark,'' as IRNNo,'' as QRCode,'Place of Supply : '+(SM.State+' ('+_SM.StateCode+')')PlaceOfSupply from PurchaseReturn SR  inner join SupplierMaster SM On SR.PurchasePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar)) left join SaleTypeMaster STM on SR.PurchaseType = STM.TaxName and STM.SaleType = 'PURCHASE'  left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " "

                //            + " Select *,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate,0 NetDisAmt from ( "
                //            + " Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from( "
                //            + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, (Amount + DAmt) TotalAmt from( "
                //            + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, Amount,  ROUND(((Amount * DisStatus) / 100.00),0)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from( "
                //            + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, (ROUND((CASE WHEN TaxType = 1 then((Amount * 100.00) / (100.00 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType from("
                //            + " Select '' as SerialNo, ''  as InvoiceNo, (SRD.ItemName + ' ' + SRD.Variant1 + ' ' + SRD.Variant2) as ItemName, GM.HSNCode, '' as PurchaseParty, SRD.Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SRD.ItemName) UnitName, (SRD.MRP * SRD.Qty)Amount, (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else '-' + CAST((CAST(SRD.SDisPer as numeric(18, 2))) as varchar) end) DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName and SMN.SaleType = 'PURCHASE' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Amount > 0)_Sales Union All " //left join SupplierMaster SM on(SM.AreaCode + CAST(SM.AccountNo as varchar)) = SR.PurchasePartyID 
                //            + " Select '' as SerialNo,'' as InvoiceNo,'OTHERAMT' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Packing-SRD.Disc)Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Packing > 0 OR SRD.Disc>0  Union All "
                //            + " Select '' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Freight)Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Freight > 0  Union All "
                //            // + " Select '' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SE.TaxFree)Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SE.TaxFree > 0  Union All "
                //            + " Select '' as SerialNo,'' as InvoiceNo,'OTHERCHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(ISNULL(SE.TaxFree,0)+ISNULL(SR.TaxFree,0))Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR OUTER APPLY(Select SUM(ISNULL(SE.TaxFree,0)) as TaxFree from PurchaseReturnDetails SE Where SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo)SE left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and (ISNULL(SE.TaxFree,0)+ISNULL(SR.TaxFree,0))>0  Union All "
                //            + " Select '' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((SR.NetDiscount * (CASE WHen TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end)), 2)*(CASE WHen CAST(OtherValue as Money)<0 then -1 else 1 end) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and NetDiscount> 0  Union All "
                //            + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and OtherAmt!= 0 )_Sales )Sales)_Sales)FinalSales  "

                //            + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                //            + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, SRD.Qty as Quantity, (SRD.Amount + ((SRD.Amount * (CASE WHEN ISNULL(Dhara,'')!= '' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else ISNULL(OtherValue,0) end)) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else ISNULL(OtherValue,0) end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else ISNULL(OtherValue,0) end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Amount > 0   Union All "
                //            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Packing + SRD.Disc)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and(SRD.Packing + SRD.Disc) != 0  Union All "
                //            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Freight) + (( SRD.Freight + SRD.TaxFree) * CS.FreightDhara / 100)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and (SRD.Freight) > 0  Union All "
                //            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(SRD.TaxFree, 2) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Outer Apply (Select TOP 1 TaxDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.TaxFree > 0  Union All "
                //            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc ";

                //}

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strStateCode = "", strPlaceOFSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "";
                        string strIRNNo, strQRCode, strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strDealerType = "", strPackerName = "", strInvoiceNo = "";

                        double dTTaxAmt = 0, dTotalMRP = 0;

                        if (strHeaderName == "CREDIT NOTE" && MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                        {
                            strBankName = Convert.ToString(dRow["BankName"]);
                            strAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                            strIFSCCode = "ICIC0000106";
                            strBranchName = "DELHI";
                        }
                        else
                        {
                            strBankName = Convert.ToString(dRow["BankName"]);
                            strBranchName = Convert.ToString(dRow["BranchName"]);
                            strAccountNo = Convert.ToString(dRow["AccountName"]);
                            strIFSCCode = Convert.ToString(dRow["IFSCCode"]);
                        }


                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);

                        //strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        //if (strIRNNo == "")
                        //    strIRNNo = "N/A";

                        //strIRNNo = "IRN : " + strIRNNo;
                        //strQRCode = Convert.ToString(_dRow["QRCode"]);
                        //byte[] _bQRCode = null;
                        //if (strQRCode != "")
                        //    _bQRCode = QRCodeGen.GetQRCode(strQRCode);


                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }
                        strPlaceOFSupply = Convert.ToString(_dRow["PlaceOfSupply"]);
                        strStateCode = Convert.ToString(dRow["StateCode"]);
                        //if (strComapnyAddress.Length > 90)
                        //    strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        //if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                        //    strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["Name"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);

                        }
                        int rowIndex = 1;
                        double dQty = 0, dAmt = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);

                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOFSupply;

                                if (Convert.ToString(_dRow["SaleBillNo"]) != "")
                                {
                                    row["SupplierRef"] = _dRow["SaleBillNo"];
                                    row["BuyerTIN"] = _dRow["SaleDate"];
                                }

                                row["BuyerName"] = strBuyerName;
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;

                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                // row["IRNNO"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];


                                row["HeaderName"] = strHeaderName;
                                //if (ConvertObjectToDouble(rows["SerialNo"]) > 0)
                                //    row["SNo"] = rows["SerialNo"];
                                //else
                                string ItemName = "", Variant1 = "", Variant2 = "";

                                ItemName = Convert.ToString(rows["ItemName"]);
                                Variant1 = Convert.ToString(rows["Variant1"]);
                                Variant2 = Convert.ToString(rows["Variant2"]);

                                row["SNo"] = rowIndex + ".";
                                if (!MainPage._bTaxStatus)
                                {
                                    row["ItemName"] = ItemName;
                                    row["PurchaseParty"] = Variant1;
                                }
                                else
                                {
                                    row["ItemName"] = ItemName + " " + Variant1 + " " + Variant2;
                                    row["PurchaseParty"] = rows["PurchaseParty"];
                                }
                                row["HSNCode"] = rows["HSNCode"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["Amount"]); //ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dTAmt += dSAmount;

                                if (Convert.ToString(rows["DisStatus"]) != "0")
                                    row["DisPer"] = rows["DisStatus"] + "%";
                                dAmt = ConvertObjectToDouble(rows["Amount"]);
                                // row["OrderNo"] = strInvoiceNo + "P.Amt:" + dAmt.ToString("N0", MainPage.indianCurancy);
                                row["OrderNo"] = "State Code : " + strStateCode;

                                if (MainPage.pQty)
                                    row["Qty"] = rows["Qty"];// + " " + rows["UnitName"];
                                double dMRP = ConvertObjectToDouble(rows["MRP"]);
                                if (MainPage.strPrintLayout == "T5")
                                    row["MRP"] = dMRP.ToString("N2", MainPage.indianCurancy);
                                else
                                    row["MRP"] = dMRP.ToString("N0", MainPage.indianCurancy);

                                dTotalMRP = dMRP * dQty;

                                if (MainPage.strPrintLayout == "T5")
                                    row["TotalIGST"] = dTTaxAmt;

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (Convert.ToString(rows["SerialNo"]) == "0")
                                    row["SalesMans"] = rows["SalesMans"];

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    if (MainPage.strPrintLayout == "T5")
                                        row["Rate"] = ConvertObjectToDouble(rows["Rate"]).ToString("N0", MainPage.indianCurancy);
                                    else
                                        row["Rate"] = ConvertObjectToDouble(rows["Rate"]).ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + " ,  Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                         PACKED BY : " + strPackerName;
                                row["HeaderImage"] = MainPage._headerImage;
                                row["BrandLogo"] = MainPage._brandLogo;
                                //if (strQRCode != "")
                                //    row["QRCode"] = _bQRCode;
                                row["EOE"] = "continued..";
                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            DataRow row = table.Rows[table.Rows.Count - 1];
                            row["TotalTaxable"] = dTAmt.ToString("N2", MainPage.indianCurancy);
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            dTAmt = Math.Round(dTAmt, 0);

                            row["EOE"] = "E. & O.E.";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = dTQty;
                            if (MainPage.pAmount)
                            {
                                if (MainPage.strPrintLayout == "T1")
                                    row["TotalAmt"] = row["TotalTaxable"];
                                else
                                    row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);
                                row["TotalMRP"] = (dTotalMRP).ToString("N2", MainPage.indianCurancy);

                                row["TotalGST"] = (dTTaxAmt).ToString("N2", MainPage.indianCurancy);
                                row["TotalTaxable"] = (dTAmt - dTTaxAmt).ToString("N2", MainPage.indianCurancy);
                                if (_bIGST)
                                    row["GSTInOneLine"] = "*GST(IGST: " + dTTaxAmt + " ) : ₹ ";
                                else
                                    row["GSTInOneLine"] = "*GST(CGST: " + dTTaxAmt / 2 + ", SGST: " + dTTaxAmt / 2 + " ) : ₹ ";
                            }

                            if (strHeaderName == "CREDIT NOTE" && MainPage.strSaleRtnDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strSaleRtnDeclaration;
                            }
                            else if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amount (in words)";

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (strHeaderName == "CREDIT NOTE" && MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "IFSC Code : " + strIFSCCode + "                 Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";// IFSC Code : " + strPartyIFSCCode;// strIFSCCode;
                            }
                            else
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                                row["SignatureImage"] = MainPage._signatureImage;


                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }

        public DataTable CreateDebitNoteRetailDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, string strHeaderName)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'' as PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where GReturnCode='" + strSerialCode + "' OR PurchaseReturnCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD ";

                if (strHeaderName == "CREDIT NOTE")
                {

                    strQuery += " Select SM.AccountNo, (SM.AreaCode+SM.AccountNo+' '+SM.Name) as Name,Replace(ISNULL(dbo.GetFullName(SR.SubPartyID),'SELF'),SR.SubPartyID+' ','') SubParty,SR.Remark,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,_SM.StateCode as BStateCode,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,(CASE WHEN SaleBillNo!=0 then (SR.SaleBillCode + ' ' + CAST(SR.SaleBillNo as varchar)) else '' end) SaleBillNo,(Convert(nvarchar, SR.SaleBillDate, 103)) SaleDate,SR.IRNNo,SR.QRCode,'Place of Supply : '+(SM.State+' ('+_SM.StateCode+')')PlaceOfSupply from SaleReturn SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar)) left join SaleTypeMaster STM on SR.SaleType = STM.TaxName and STM.SaleType = 'SALES'  left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " "

                                + " Select *,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate,((CASE WHEN Qty> 0 and (Select TOP 1 ServiceAmt from SaleReturn Where BillCode='" + strSerialCode + "' and BillNo=" + strSerialNo + ")>0 then ROUND((Select TOP 1(TaxAmt * TaxDhara / 100.00) from CompanySetting),4) else 0 end)) NetDisAmt from ( "
                                + " Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from( "
                                + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, (Amount + DAmt) TotalAmt from( "
                                + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, Amount, ((Amount * DisStatus) / 100.00)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from( "
                                + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, (ROUND((CASE WHEN TaxType = 1 then((Amount * 100.00) / (100.00 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType from( "
                                + " Select SRD.PurchaseBillNo as SerialNo, '' as InvoiceNo, (SRD.ItemName+' '+SRD.Variant1+' '+SRD.Variant2) as ItemName, GM.HSNCode, SM.Name as PurchaseParty, SRD.Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SRD.ItemName) UnitName, (SRD.MRP*SRD.Qty)Amount,(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else CAST(CAST(SRD.SDisPer as numeric(18,0)) as varchar) end) DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SupplierMaster SM on(SM.AreaCode + CAST(SM.AccountNo as varchar)) = SRD.PurchasePartyID  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0)_Sales Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Packing)Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Packing > 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Freight)Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Freight > 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SE.TaxFree)Amount,0 as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SE.TaxFree> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((SR.PackingAmt * (CASE WHen TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and PackingAmt> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'INSURANCECHARGES' as ItemName,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((SR.NetDiscount * (CASE WHen TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end)), 2) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and NetDiscount> 0  Union All "
                                + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and OtherAmt!= 0 )_Sales )Sales)_Sales)FinalSales "

                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                                + " Select (GM.Other + ' : ' + GM.HSNCode) as HSNCode, SRD.Qty as Quantity, (SRD.Amount + ((SRD.Amount * (CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))* (CASE WHEN _TC.AmountType='NET PRICE' then ((100.00+(CASE WHEN ISNULL(Dhara,'')!='' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.Amount > 0   Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Packing + SRD.Freight) + ((SRD.Packing + SRD.Freight + SRD.TaxFree) * CS.FreightDhara / 100)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and(SRD.Packing + SRD.Freight) > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(SRD.TaxFree, 2) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR inner join SaleReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer Apply (Select TOP 1 TaxDhara from CompanySetting) CS Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " and SRD.TaxFree > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)+PackingAmt+NetDiscount), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SaleReturn SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount!=0 )_Sales Order by HSNCode asc,TaxRate desc ";
                }
                else
                {
                    strQuery += " Select SM.AccountNo, (SM.AreaCode+SM.AccountNo+' '+SM.Name) as Name,'' SubParty,SR.Remark,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,_SM.StateCode as BStateCode,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,(CASE WHEN PurchaseBillNo!=0 then (SR.PurchaseBillCode + ' ' + CAST(SR.PurchaseBillNo as varchar)) else '' end) SaleBillNo,(Convert(nvarchar, SR.PurchaseBillDate, 103)) SaleDate,ReverseCharge  as InvoiceNo,SR.Remark,'' as IRNNo,'' as QRCode,'Place of Supply : '+(SM.State+' ('+_SM.StateCode+')')PlaceOfSupply from PurchaseReturn SR  inner join SupplierMaster SM On SR.PurchasePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar)) left join SaleTypeMaster STM on SR.PurchaseType = STM.TaxName and STM.SaleType = 'PURCHASE'  left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode='" + strSerialCode + "' and SR.BillNo=" + strSerialNo + " "

                            + " Select *,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate,0 NetDisAmt from ( "
                            + " Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from( "
                            + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, (Amount + DAmt) TotalAmt from( "
                            + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, Amount,  ROUND(((Amount * DisStatus) / 100.00),0)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from( "
                            + " Select SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, (ROUND((CASE WHEN TaxType = 1 then((Amount * 100.00) / (100.00 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType from("
                            + " Select '' as SerialNo, ''  as InvoiceNo, (SRD.ItemName + ' ' + SRD.Variant1 + ' ' + SRD.Variant2) as ItemName, GM.HSNCode, '' as PurchaseParty, SRD.Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SRD.ItemName) UnitName, (SRD.MRP * SRD.Qty)Amount, (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else '-' + CAST((CAST(SRD.SDisPer as numeric(18, 2))) as varchar) end) DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName and SMN.SaleType = 'PURCHASE' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else 0 end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Amount > 0)_Sales Union All " //left join SupplierMaster SM on(SM.AreaCode + CAST(SM.AccountNo as varchar)) = SR.PurchasePartyID 
                            + " Select '' as SerialNo,'' as InvoiceNo,'OTHERAMT' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Packing-SRD.Disc)Amount,'' as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Packing > 0 OR SRD.Disc>0  Union All "
                            + " Select '' as SerialNo,'' as InvoiceNo,'FREIGHT' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SRD.Freight)Amount,CS.FreightDhara as DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Freight > 0  Union All "
                            // + " Select '' as SerialNo,'' as InvoiceNo,'TAX FREE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(SE.TaxFree)Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SE.TaxFree > 0  Union All "
                            + " Select '' as SerialNo,'' as InvoiceNo,'OTHERCHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,(ISNULL(SE.TaxFree,0)+ISNULL(SR.TaxFree,0))Amount,'' as DisStatus,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR OUTER APPLY(Select SUM(ISNULL(SE.TaxFree,0)) as TaxFree from PurchaseReturnDetails SE Where SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo)SE left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and (ISNULL(SE.TaxFree,0)+ISNULL(SR.TaxFree,0))>0  Union All "
                            + " Select '' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((SR.NetDiscount * (CASE WHen TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end)), 2)*(CASE WHen CAST(OtherValue as Money)<0 then -1 else 1 end) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and NetDiscount> 0  Union All "
                            + " Select '' as SerialNo,'' as InvoiceNo,'SERVICE CHARGE' as ItemName,'' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end) Amount,'' DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and OtherAmt!= 0 )_Sales )Sales)_Sales)FinalSales  "

                            + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                            + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, SRD.Qty as Quantity, (SRD.Amount + ((SRD.Amount * (CASE WHEN ISNULL(Dhara,'')!= '' then (SRD.DisStatus + CAST(SRD.Discount as varchar)) else ISNULL(OtherValue,0) end)) / 100))Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else ISNULL(OtherValue,0) end)) / 100.00) else 1.00 end)) / SRD.Qty) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SRD.Amount * 100) / (100 + TaxRate)) else SRD.Amount end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (CASE WHEN ISNULL(Dhara, '') != '' then(SRD.DisStatus + CAST(SRD.Discount as varchar)) else ISNULL(OtherValue,0) end)) / 100.00) else 1.00 end))/ SRD.Qty)< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.Amount > 0   Union All "
                            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Packing + SRD.Disc)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and(SRD.Packing + SRD.Disc) != 0  Union All "
                            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(((SRD.Freight) + (( SRD.Freight + SRD.TaxFree) * CS.FreightDhara / 100)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE'  Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and (SRD.Freight) > 0  Union All "
                            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(SRD.TaxFree, 2) Amount,0 as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR inner join PurchaseReturnDetails SRD  on SR.BillCode = SRD.BillCode and SR.BillNo = SRD.BillNo left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Outer Apply (Select TOP 1 TaxDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + " and SRD.TaxFree > 0  Union All "
                            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((CAST((OtherSign + CAST(OtherAmt as varchar)) as money)), 2) * (CASE WHen SMN.TaxIncluded = 1 then((100 + SR.TaxPer) / 100) else 1 end) Amount,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from PurchaseReturn SR  left join SaleTypeMaster SMN On SR.PurchaseType = SMN.TaxName  and SMN.SaleType = 'PURCHASE' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + "   )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc ";

                }

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOFSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "";
                        string strIRNNo, strQRCode, strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strDealerType = "", strPackerName = "", strInvoiceNo = "";

                        double dTTaxAmt = 0;

                        if (strHeaderName == "CREDIT NOTE" && MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                        {
                            strBankName = Convert.ToString(dRow["BankName"]);
                            strAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                            strIFSCCode = "ICIC0000106";
                            strBranchName = "DELHI";
                        }
                        else
                        {
                            strBankName = Convert.ToString(dRow["BankName"]);
                            strBranchName = Convert.ToString(dRow["BranchName"]);
                            strAccountNo = Convert.ToString(dRow["AccountName"]);
                            strIFSCCode = Convert.ToString(dRow["IFSCCode"]);
                        }


                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);

                        strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        if (strIRNNo == "")
                            strIRNNo = "N/A";

                        strIRNNo = "IRN : " + strIRNNo;
                        strQRCode = Convert.ToString(_dRow["QRCode"]);
                        byte[] _bQRCode = null;
                        if (strQRCode != "")
                            _bQRCode = QRCodeGen.GetQRCode(strQRCode);


                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }
                        strPlaceOFSupply = Convert.ToString(_dRow["PlaceOfSupply"]);

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["Name"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);

                        }
                        int rowIndex = 1;
                        double dQty = 0, dAmt = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);

                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOFSupply;

                                if (Convert.ToString(_dRow["SaleBillNo"]) != "")
                                {
                                    row["SupplierRef"] = _dRow["SaleBillNo"];
                                    row["BuyerTIN"] = _dRow["SaleDate"];
                                }

                                row["BuyerName"] = strBuyerName;
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;

                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["IRNNO"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];


                                row["HeaderName"] = strHeaderName;
                                if (Convert.ToString(rows["SerialNo"]) != "")
                                    row["SNo"] = rows["SerialNo"];
                                else
                                    row["SNo"] = rowIndex + ".";
                                row["ItemName"] = rows["ItemName"];
                                row["HSNCode"] = rows["HSNCode"];
                                row["PurchaseParty"] = rows["PurchaseParty"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dTAmt += dSAmount;

                                row["DisPer"] = rows["DisStatus"] + "%";
                                dAmt = ConvertObjectToDouble(rows["Amount"]);
                                row["OrderNo"] = strInvoiceNo + "P.Amt:" + dAmt.ToString("N0", MainPage.indianCurancy);


                                if (MainPage.pQty)
                                    row["Qty"] = rows["Qty"] + " " + rows["UnitName"];

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = ConvertObjectToDouble(rows["Rate"]).ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + " ,  Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                         PACKED BY : " + strPackerName;
                                row["HeaderImage"] = MainPage._headerImage;
                                row["BrandLogo"] = MainPage._brandLogo;
                                if (strQRCode != "")
                                    row["QRCode"] = _bQRCode;
                                row["EOE"] = "continued..";
                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            DataRow row = table.Rows[table.Rows.Count - 1];
                            dTAmt = Math.Round(dTAmt, 0);

                            row["EOE"] = "E. & O.E.";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = "Total Qty : " + dTQty + "              Grand Total :";
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strSaleRtnDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strSaleRtnDeclaration;
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amount (in words)";
                            //row["SignaturePath"] = ""; 

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }


                            if (strHeaderName == "CREDIT NOTE" && MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "IFSC Code : " + strIFSCCode + "                 Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";// IFSC Code : " + strPartyIFSCCode;// strIFSCCode;
                            }
                            else
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                                row["SignatureImage"] = MainPage._signatureImage;


                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Return", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }



        #endregion

        #region Sale Service Table


        public DataTable CreateOnlineSaleServiceBookDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = "  Declare @TaxRate float; Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email : '+CD.EmailId) PhoneNo,CD.TinNo as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SaleServiceCode='" + strSerialCode + "') Union ALL Select 1 as ID, CD.FullCompanyName,(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email : '+CD.EmailId) PhoneNo,CD.TinNo as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD  "
                                + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.StationName,'' as Marka,SR.Remark,'' as WayBillNo,'' as VehicleNo,'' as TimeOfSupply,'' as OtherField,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,'' as LrNumber,'' LRDate,(Select TOP 1 StateCode from StateMaster WHere StateName = SM.State) BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,'' PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.NetAmt,[IRNNO],[QRCode] from SaleServiceBook SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SaleType = STM.TaxName and STM.SaleType = 'SALES'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "
                                + " Select @TaxRate = SR.TaxPer from SaleServiceBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + "   if (@TaxRate < 1 OR @TaxRate is NULL) begin Set @TaxRate = 18; end "
                                + " Select *,(CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) Rate,0 NetDisAmt from (Select *, ROUND(((TotalAmt * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt from(Select ID, SerialNo, InvoiceNo, ItemName, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, DAmt, DisStatus, Amount, (Amount + DAmt) TotalAmt from(Select ID, SerialNo, InvoiceNo, ItemName, SUBSTRING(HSNCode,0,7)HSNCode, PurchaseParty, Amount, ((Amount * DisStatus) / 100)DAmt, DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from( "
                                + " Select ID, SerialNo, InvoiceNo, LTRIM(RTRIM(REPLACE(REPLACE(ItemName, HSNCode, ''), ':', ''))) ItemName, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, (ROUND((CASE WHEN TaxType = 1 then((Amount * 100.00) / (100.00 + TaxRate)) else (Amount)end), 4))Amount, DisStatus, TaxRate, TaxType from(Select SE.ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, SE.SAC as InvoiceNo, SE.ItemName, GM.HSNCode, '' PurchaseParty, 1 as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SE.ItemName) UnitName, SE.Amount, 0 DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleServiceBook SR inner join SaleServiceDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Amount * 100) / (100 + TaxRate)) else SE.Amount end))))) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Amount * 100) / (100 + TaxRate)) else SE.Amount end)))))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + "  and SE.Amount > 0 )_Sales Union All "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGE' as ItemName, '' as HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,ROUND(((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money) * (CASE WHen TaxIncluded = 1 then(100 / (100 + @TaxRate)) else 1 end))),2) Amount,0 as DisStatus,@TaxRate as TaxRate,SMN.TaxIncluded as TaxType from SaleServiceBook SR inner join SaleServiceDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer Apply (Select TOP 1 FreightDhara from CompanySetting) CS Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + "  and SR.OtherAmt > 0 "
                                + " )_Sales )Sales)_Sales)FinalSales Order by ID asc "
                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 and Qty > 0 then((Amount * 100.00) / (100.00 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from( "
                                + " Select(GM.Other + ' : ' + SUBSTRING(GM.HSNCode,0,7)) as HSNCode, 1 as Quantity, SE.Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SaleServiceBook SR inner join SaleServiceDetails SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Amount * 100) / (100 + TaxRate)) else SE.Amount end))))) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Amount * 100) / (100 + TaxRate)) else SE.Amount end))) ))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo = " + strSerialNo + "  and SE.Amount > 0   Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)), 2) Amount,@TaxRate as TaxRate,SMN.TaxIncluded as TaxType from SaleServiceBook SR  left join SaleTypeMaster SMN On SR.SaleType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "
                                + " )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount!=0 )_Sales Order by HSNCode asc,TaxRate desc  ";

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strQRCode, strIRNNo,strCompanyName = "", strComapnyAddress = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strInvoiceNo = "", strSalesPartyID = "", strSubPartyID = "";

                        double dTTaxAmt = 0,dBillNetAmt=0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        dBillNetAmt = ConvertObjectToDoubleStatic(_dRow["NetAmt"]);
                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        strQRCode = Convert.ToString(_dRow["QRCode"]);
                        byte[] _bQRCode = null;
                        if (strQRCode != "")
                            _bQRCode = QRCodeGen.GetQRCode(strQRCode);

                        strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        if (strIRNNo == "")
                            strIRNNo = "N/A";

                        strIRNNo = "IRN : " + strIRNNo;


                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                        }


                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }

                        }
                        int rowIndex = 1;
                        double dQty = 0, dAmt = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0,  dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;
                        if (Convert.ToBoolean(_dRow["TaxType"]))
                            strTaxType = "INCLUDED";
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);

                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = _dRow["SalePartyID"];
                                row["BuyerName"] = strSalesPartyID + " " + strBuyerName;
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;

                                row["ShippedName"] = strSubPartyID + " " + strSubPartyName;
                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;
                                if (strSubPartyName == strBuyerName)
                                    row["CompanyCST"] = _dRow["SalePartyID"];
                                else
                                    row["CompanyCST"] = _dRow["SubPartyID"];
                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["IRNNO"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                //row["Transport"] = _dRow["Transport"];
                                //row["Destination"] = _dRow["Station"];
                                //  row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"]; // MainPage.strTermsofDelivery;

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strInvoiceNo = Convert.ToString(rows["InvoiceNo"]);
                                strItemName = Convert.ToString(rows["ItemName"]);
                                if (strInvoiceNo != "")
                                {
                                    strItemName += "\n                    " + strInvoiceNo;
                                }

                                row["ItemName"] = strItemName;

                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];
                                row["PurchaseParty"] = rows["PurchaseParty"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dTAmt += dSAmount;

                                if (Convert.ToDouble(rows["DisStatus"]) > 0)
                                    row["DisPer"] = "+" + rows["DisStatus"] + "%";
                                else
                                    row["DisPer"] = rows["DisStatus"] + "%";
                                dAmt = ConvertObjectToDouble(rows["Amount"]);

                                if (MainPage.pQty)
                                    row["Qty"] = rows["Qty"] + " " + rows["UnitName"];

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = ConvertObjectToDouble(rows["Rate"]).ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                if (strQRCode != "")
                                    row["QRCode"] = _bQRCode;

                                row["HeaderImage"] = dRow["HeaderImage"];
                                row["BrandLogo"] = dRow["BrandLogo"];
                                row["SignatureImage"] = dRow["SignatureImage"];

                                row["Jursdiction"] = MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";
                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            DataRow row = table.Rows[table.Rows.Count - 1];
                            dTAmt = Math.Round(dTAmt, 0);

                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = "Grand Total :";
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);


                            if (MainPage.strSaleServDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strSaleServDeclaration;
                            }
                            else if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;
                            }

                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";


                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                if (strPartyBankAccountNo != "")
                                {
                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                    row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;
                                    row["IFSCCode"] = "SCAN TO PAY";
                                }
                            }
                            else if (strAccountNo != "" && strBankName != "")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }

                            if (dBillNetAmt != dTAmt)
                            {
                                MessageBox.Show("Sorry ! Net amt in invoice and net amt in print is not match !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                                    table.Rows.Clear();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }
        ///  DBA





        public DataTable SalesBookRetailDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, ref DataTable _dtRtnDetails, bool _dscVerified, bool _bPrint)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = "  Select TOP 1 * from ( Select 0 as ID, CD.FullCompanyName, TINNo as HOAddress,'Place of Supply : ' + (CD.StateName + ' (' + SM.StateCode + ')')PlaceOfSupply,(Address + ''+CD.StateName+' - '+CAST(CD.PinCode as varchar))Address, (CD.STDNo+' - '+CD.PhoneNo)  PhoneNo, EmailID,Website,'' as CompanyTIN ,CD.StateName,SM.StateCode,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD LEFT JOIN StateMaster SM On SM.StateName = CD.StateName Where Other in (Select CompanyName from CompanySetting Where SBillCode = '" + strSerialCode + "') Union ALL Select 1 as ID, CD.FullCompanyName,CD.TINNo as HOAddress,'Place of Supply : ' + (CD.StateName + ' (' + SM.StateCode + ')')PlaceOfSupply, (Address + ''+CD.StateName+' - '+CAST(CD.PinCode as varchar))Address, (CD.STDNo+' - '+CD.PhoneNo)  PhoneNo, EmailID,Website,'' as CompanyTIN,CD.StateName,SM.StateCode,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD LEFT JOIN StateMaster SM On SM.StateName = CD.StateName)_CD "
                                    + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.Station,SR.PvtMarka as Marka,SR.Remark,WaybillNo,'' as VehicleNo,LRTime as TimeOfSupply,NoOfCase as OtherField,ISNULL((SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode),SR.Station) Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,ISNULL((SM.MobileNo + ' ' + SM.PhoneNo),SR.MobileNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,LRNumber, (CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,(Select TOP 1 StateCode from StateMaster WHere StateName = SM.State) BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0)+1,LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.Description_3,CardAmt,CashAmt,SR.TenderAmt TenderAmt,SR.RefundAmt RefundAmt,SR.ReturnAmt ReturnAmt,SR.AdvanceAmt from SalesBook SR  left join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SalesType = STM.TaxName and STM.SaleType = 'SALES'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "

                                    + " Select *,CAST((CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) as Numeric(18,2)) Rate,0 NetDisAmt,0 as Cut,0 as MTR,0 as Fold from ( Select *, ROUND((((TotalAmt) * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt  from( Select ID, SerialNo, InvoiceNo, ItemName, BarCode,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, SalesMans, UnitName, MRP, Amount, DisStatus,DAmt,(ROUND((CASE WHEN TaxType = 1 then((DAmt * 100) / (100 + TaxRate)) else (DAmt)end), 2)) TotalAmt from( Select ID, SerialNo, InvoiceNo, ItemName, BarCode,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, Amount,ROUND((Amount *(100+ DisStatus)/100),2)DAmt,CAST(DisStatus as numeric(10,0)) DisStatus, Quantity as Qty, TaxRate, TaxType, SalesMans, UnitName, MRP from(  Select ID, SerialNo, InvoiceNo, LTRIM(RTRIM(REPLACE(REPLACE(ItemName, HSNCode, ''), ':', ''))) ItemName,BarCode,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, MRP, Amount, DisStatus, TaxRate, TaxType, SalesMans from( "
                                    + " Select SE.SID as ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, '' as InvoiceNo, (CASE WHEN RTRIM((SE.BrandName+' '+ SE.DesignName))=' ' THEN SE.ItemName ELSE RTRIM((SE.BrandName+' '+ SE.DesignName)) End)ItemName, (CASE WHEN ISNULL(BarCode_S,'') = '' then BarCode else BarCode_S end)BarCode,SE.Variant1,SE.Variant2,SE.Variant3,SE.Variant4,SE.Variant5, GM.HSNCode, '' PurchaseParty, Qty as Quantity, SE.UnitName, SE.Qty,(MRP*(100-SR.SpecialDscPer)/100.00)MRP,((((MRP*(100-SR.SpecialDscPer)/100.00)*(100+(SE.SDisPer-ISNULL(SE.OfferDisPer,0)))/100.00))*SE.Qty)Amount, (ISNULL(SE.SDisPer,0)+ISNULL(SE.OfferDisPer,0)) as DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType ,(select distinct STUFF((SELECT distinct ', ' + ISNULL(sb1.SalesMan,'DIRECT') from SalesBookSecondary sb1 where SE.BillCode = sb1.BillCode AND SE.BillNo = sb1.BillNo FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') ,1,2,'')) SalesMans from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0 )_Sales UNION ALL "
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,(SR.PackingAmt*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PackingAmt > 0 UNION ALL "
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,(SR.PostageAmt*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PostageAmt > 0 UNION ALL "
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,(SR.GreenTax*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.GreenTax > 0 UNION ALL "
                                    // + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'INSURANCECHARGES' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, (CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.DisAmt !=0 UNION ALL "
                                    //   + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, (CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OtherAmt != 0 UNION ALL "

                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GROSS' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.GrossAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.GrossAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OfferDiscount' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.OfferDisAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OfferDisAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Discount' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.DisAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.DisAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OtherAmt' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, CAST(SR.OtherSign + CAST(SR.OtherAmt as varchar)as Money) Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OtherAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Taxable' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.TaxableAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.TaxableAmt != 0 UNION ALL"
                                    //  + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GST' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.TaxAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.TaxAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Final' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.FinalAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.FinalAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'RoundOff' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, (SR.RoundOffAmt*(CASE WHEN RoundOffSign = '-' then -1 else 1 end)) Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.RoundOffAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Advance' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.AdvanceAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.AdvanceAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Return' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.ReturnAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.ReturnAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Card' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.CardAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.CardAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Cheque' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.ChequeAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.ChequeAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'CashAmt' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.CashAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.CashAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Tender' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.TenderAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.TenderAmt != 0 UNION ALL"
                                    + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Net' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.NetAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.NetAmt != 0 UNION ALL"
                                    + "  Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Refund' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.RefundAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.RefundAmt != 0 "
                                    + ")_Sales )Sales)_Sales)FinalSales Order by ID asc "

                                    + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from(  "
                                    + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, Qty as Quantity, ROUND((((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty) * (100.00 + SDisPer) / 100.00), 2) Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0  Union All "
                                    + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((PackingAmt + GreenTax+PostageAmt + ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)))), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and (PackingAmt + GreenTax+PostageAmt +SR.OtherAmt+SR.DisAmt) != 0 )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc "
                                    + " SELECT * FROM CardDetails where BillCode = '" + strSerialCode + "' AND BillNo = " + strSerialNo;
                if (MainPage.strPrintLayout == "T5")
                    strQuery += " SELECT (SELECT SUM((Case WHEN UnitName = 'MTR' then 1 else srd1.Qty end)) FROM SaleReturnDetails srd1 WHERE srd1.BillCode = SRD.BillCode AND SRD1.BillNo = SRD.BillNo) TotalQty ,(SELECT SUM(Amount) FROM SaleReturnDetails srd1 WHERE srd1.BillCode = SRD.BillCode AND SRD1.BillNo = SRD.BillNo) TotalAmount,SRD.* FROM SalesBook SB JOIN SaleReturnDetails SRD ON SB.ReturnSlipNo = SRD.BillCode + ' ' + Cast(SRD.BillNo as Varchar(20)) LEFT JOIN SaleReturn SR ON SRD.BillCode = SR.BillCode AND SRD.BillNo = SR.BillNo WHERE SB.BillCode = '" + strSerialCode + "' AND SB.BillNo = " + strSerialNo;

                DataSet ds = GetDataSetRecord(strQuery);
                if (ds.Tables.Count > 1)
                {
                    DataTable dtReturnDetails = null;
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    DataTable dtCardDetails = ds.Tables[4];

                    if (ds.Tables.Count > 5)
                        dtReturnDetails = ds.Tables[5];

                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOfSupply = "", strCompanyPhone = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strStateCode = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strSalesPartyID = "", strSubPartyID = "", _strBranchName = "", strReferance = "";

                        double dTTaxAmt = 0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        _strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strStateCode = Convert.ToString(dRow["StateCode"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strReferance = Convert.ToString(_dRow["Description_3"]);
                        if (strSalesPartyID == "")
                        {
                            if (ConvertObjectToDouble(_dRow["CashAmt"]) > 0)
                                strSalesPartyID = "CASH SALE";
                            else if (ConvertObjectToDouble(_dRow["CardAmt"]) > 0)
                                strSalesPartyID = "CARD SALE";

                        }
                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt, strStateCode);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyPhone = Convert.ToString(dRow["PhoneNo"]);
                            strCompanyEmail = Convert.ToString(dRow["EmailID"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                            if (strHOAddress.Length < 16)
                                strHOAddress = "";
                        }
                        strPlaceOfSupply = Convert.ToString(dRow["PlaceOfSupply"]);

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        //if (strComapnyAddress.Length > 90)
                        //    strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        //if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                        //    strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }

                        }
                        int rowIndex = 1;
                        double dQty = 0, dRate = 0, dTQty = 0, dTAmt = 0, dTotalSaving = 0, dTotalMRP = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0, dMRP = 0, dTenderAmt = 0, dRefundAmt = 0;
                        double dReturnAmt = 0, dAdvanceAmt = 0;
                        // strTaxType = Convert.ToString(_dRow["TaxType"]);
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
                        string strBarcode = "", strVariant1 = "", strVariant2 = "", strVariant3 = "", strVariant4 = "", strVariant5 = "";
                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = "Mobile : " + strCompanyPhone;
                                if (strCompanyEmail != "" && MainPage.strPrintLayout != "T4" && MainPage.strPrintLayout != "T5")
                                    row["CompanyEMail"] = row["CompanyEMail"] + ", Email - " + strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOfSupply;
                                row["SupplierRef"] = _dRow["Marka"];
                                row["VehicleNo"] = _dRow["VehicleNo"];
                                row["WayBillNo"] = _dRow["WayBillNo"];
                                row["Other"] = _dRow["OtherField"];
                                //if (MainPage.strPrintLayout != "T4" || MainPage.strPrintLayout != "T5") {
                                //    row["Other"] = MainPage.currentDate.ToString("dd MMMM yyyy") + "  " + System.DateTime.Now.Hour.ToString("HH:mm:ss") + ((System.DateTime.Now.Hour) > 11 ? " PM" : " AM");
                                //}

                                row["OrderNo"] = "State Code : " + strStateCode;
                                // row["CompanyTIN"] = _dRow["SalePartyID"];
                                //       if (MainPage.strCompanyName.Contains("SARAOGI") || MainPage.strCompanyName.Contains("STYLO"))
                                {
                                    row["BuyerName"] = (strSalesPartyID + " " + strBuyerName).Trim();
                                    row["ShippedName"] = (strSubPartyID + " " + strSubPartyName).Trim();
                                }
                                //else
                                //{
                                //    row["BuyerName"] = strBuyerName;
                                //    row["ShippedName"] = strSubPartyName;
                                //}
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;


                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;

                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["Transport"] = _dRow["TransportName"];
                                row["Destination"] = _dRow["Station"];
                                row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"];
                                //row["TermsOfDelivery"] = MainPage.strDeclaration;
                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strBarcode = Convert.ToString(rows["Barcode"]);
                                strVariant1 = Convert.ToString(rows["Variant1"]);
                                strVariant2 = Convert.ToString(rows["Variant2"]);
                                //strVariant3 = Convert.ToString(rows["Variant3"]);
                                strVariant4 = Convert.ToString(rows["Variant4"]);
                                //strVariant5 = Convert.ToString(rows["Variant5"]);
                                strItemName = Convert.ToString(rows["ItemName"]);

                                if (strVariant1 != "")
                                    strItemName += " " + strVariant1;
                                if (strVariant2 != "")
                                    strItemName += " " + strVariant2;
                                if (strVariant3 != "")
                                    strItemName += " " + strVariant3;
                                if (strVariant4 != "")
                                    strItemName += " (" + strVariant4 + ")";
                                if (strVariant5 != "")
                                    strItemName += " " + strVariant5;

                                if (MainPage.pManfDesign && strBarcode != "")
                                    strItemName = strBarcode + " " + strItemName;

                                row["ItemName"] = strItemName;
                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["SNo"] = row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];
                                // row["PurchaseParty"] = rows["PurchaseParty"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dQty = ConvertObjectToDouble(rows["Qty"]);

                                if (MainPage.strPrintLayout == "T5")
                                    dTQty = dTQty + (Convert.ToString(rows["UnitName"]).ToUpper() == "MTR" ? 1 : dQty);
                                else
                                    dTQty = dTQty + dQty;

                                dSAmount = ConvertObjectToDouble(rows["Amount"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dRate = ConvertObjectToDouble(rows["Rate"]);
                                dMRP = ConvertObjectToDouble(rows["MRP"]);

                                dTotalMRP += dQty * dMRP;

                                dTAmt += dSAmount;
                                dTotalSaving += dMRP - dRate;
                                //if (Convert.ToDouble(rows["DisStatus"]) > 0)
                                //    row["DisPer"] = "+" + rows["DisStatus"] + "%";
                                //else
                                row["DisPer"] = rows["DisStatus"] + "%";

                                if (MainPage.pQty)
                                    row["Qty"] = (float)dQty;
                                //if (MainPage.strPrintLayout == "T5")
                                //    row["Qty"] = dQty.ToString();

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                    {
                                        row["IGSTPer"] = dTaxPer + "%";
                                        row["TaxPer"] = dTaxPer;
                                    }
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                        row["TaxPer"] = dTaxPer;
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                //---------------------------------------------------------------------------------------------------------------------               
                                if (_bIGST)
                                    row["TotalIGST"] = dTTaxAmt.ToString("N2", MainPage.indianCurancy);
                                else
                                {
                                    row["TotalCGST"] = (dTTaxAmt / 2).ToString("N2", MainPage.indianCurancy);
                                    row["TotalSGST"] = (dTTaxAmt / 2).ToString("N2", MainPage.indianCurancy);
                                }
                                dTTaxAmt = Math.Round(dTTaxAmt, 2);
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                //----------------------------------------------------------------------------------------------------------------------  

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                    if (MainPage.strPrintLayout == "T5")
                                    {
                                        row["UOM"] = Convert.ToString(rows["UnitName"]);
                                        row["MRP"] = dMRP.ToString();
                                        row["Rate"] = dRate.ToString();
                                    }
                                    else
                                    {
                                        row["Rate"] = dRate.ToString("N2", MainPage.indianCurancy);
                                        row["MRP"] = dMRP.ToString("N2", MainPage.indianCurancy);
                                    }
                                }
                                row["Jursdiction"] = MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";

                                if (!_bPrint || !strSerialCode.Contains("DLS"))
                                {
                                    row["HeaderImage"] = MainPage._headerImage;
                                    row["BrandLogo"] = MainPage._brandLogo;
                                }
                                row["User"] = MainPage.strLoginName;

                                row["OtherAmount"] = rows["TaxAmt"];
                                if (Convert.ToString(rows["ID"]) != "0")
                                    row["SalesMans"] = rows["SalesMans"];

                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount_Retail(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer, dtCardDetails, strStateCode);
                            }
                            if (dtReturnDetails != null)
                            {
                                if (dtReturnDetails.Rows.Count > 0)
                                {
                                    int index = 1;
                                    foreach (DataRow ro in dtReturnDetails.Rows)
                                    {
                                        _dtRtnDetails = table.Clone();
                                        DataRow RtRow = _dtRtnDetails.NewRow();
                                        string ItemName = "", Barcode = "", Variant1 = "", Variant2 = "", Variant3 = "", Variant4 = "", Variant5 = "";

                                        RtRow["HeaderName"] = "* [Sale Return : " + Convert.ToString(ro["BillCode"]) + " " + Convert.ToString(ro["BillNo"]) + " ]";
                                        RtRow["GeneratedBy"] = index + ".";

                                        Barcode = Convert.ToString(ro["Barcode"]);
                                        Variant1 = Convert.ToString(ro["Variant1"]);
                                        Variant2 = Convert.ToString(ro["Variant2"]);
                                        Variant3 = Convert.ToString(ro["Variant3"]);
                                        Variant4 = Convert.ToString(ro["Variant4"]);
                                        Variant5 = Convert.ToString(ro["Variant5"]);
                                        ItemName = Convert.ToString(ro["ItemName"]);
                                        if (Variant1 != "")
                                            ItemName += " " + Variant1;
                                        if (Variant2 != "")
                                            ItemName += " " + Variant2;
                                        if (Variant3 != "")
                                            ItemName += " " + Variant3;
                                        if (Variant4 != "")
                                            ItemName += " " + Variant4;
                                        if (Variant5 != "")
                                            ItemName += " " + Variant5;

                                        if (MainPage.pManfDesign && Barcode != "")
                                            ItemName = Barcode + " " + ItemName;

                                        RtRow["ItemName"] = ItemName;
                                        RtRow["Qty"] = (float)ConvertObjectToDouble(ro["Qty"]);
                                        RtRow["Rate"] = ConvertObjectToDouble(ro["Rate"]).ToString("N2", MainPage.indianCurancy);
                                        RtRow["UOM"] = Convert.ToString(ro["UnitName"]);
                                        RtRow["Amount"] = ConvertObjectToDouble(ro["Amount"]).ToString("N2", MainPage.indianCurancy);

                                        RtRow["InvoiceNo"] = Convert.ToString(ro["BillCode"]) + " " + Convert.ToString(ro["BillNo"]);
                                        RtRow["TotalQty"] = ConvertObjectToDouble(ro["TotalQty"]).ToString("N2", MainPage.indianCurancy);
                                        RtRow["TotalAmt"] = ConvertObjectToDouble(ro["TotalAmount"]).ToString("N2", MainPage.indianCurancy);

                                        _dtRtnDetails.Rows.Add(RtRow);
                                        index++;
                                    }
                                }
                            }
                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            if (strReferance != "")
                                strReferance = "Ref. Bill : " + strReferance + ", ";

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);
                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = strReferance + dTQty;
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            dTenderAmt = ConvertObjectToDouble(_dRow["TenderAmt"]);
                            dRefundAmt = ConvertObjectToDouble(_dRow["RefundAmt"]);
                            dReturnAmt = ConvertObjectToDouble(_dRow["ReturnAmt"]);
                            dAdvanceAmt = ConvertObjectToDouble(_dRow["AdvanceAmt"]);

                            row["TenderAmt"] = dTenderAmt.ToString("N2", MainPage.indianCurancy);
                            row["RefundAmt"] = dRefundAmt.ToString("N2", MainPage.indianCurancy);
                            row["ReturnAmt"] = dReturnAmt.ToString("N2", MainPage.indianCurancy);
                            row["AdvanceAmt"] = dAdvanceAmt.ToString("N2", MainPage.indianCurancy);

                            if (dTotalSaving > 0)
                                row["FooterMsg"] = "** TODAY YOU HAVE SAVED : " + dTotalSaving + " ₹ **";
                            if (_bIGST)
                                row["GSTInOneLine"] = "*GST ( IGST: " + dTTaxAmt + " ) : ₹ ";
                            else
                                row["GSTInOneLine"] = "*GST ( CGST: " + dTTaxAmt / 2 + ", SGST: " + dTTaxAmt / 2 + " ) : ₹ ";

                            row["TotalGST"] = (dTTaxAmt).ToString("N2", MainPage.indianCurancy);
                            row["TotalTaxable"] = (dTAmt - dTTaxAmt).ToString("N2", MainPage.indianCurancy);
                            row["TotalMRP"] = (dTotalMRP).ToString("N2", MainPage.indianCurancy);

                            // dTAmt = (dTAmt - dReturnAmt - dAdvanceAmt);
                            row["afterLessAmt"] = (dTAmt - dReturnAmt - dAdvanceAmt).ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;// "1. Interest @18% p.a. will be charged if the payment is not made with in 30 days.\n2.Subject to Delhi Jurisdiction only. ";// MainPage.strDeclaration; 
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            row["ForCompany"] = "FOR " + strCompanyName;

                            row["HeaderImage"] = dRow["HeaderImage"];
                            row["BrandLogo"] = dRow["BrandLogo"];
                            row["SignatureImage"] = dRow["SignatureImage"];

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                                if (MainPage.strPrintLayout == "T5")
                                    row["AmountInWord"] = row["AmountInWord"] + "/-";
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                if (strPartyBankAccountNo != "")
                                {
                                    //row["BankName"] = "Bank Name : " + strBankName;
                                    //row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "                 Branch Name : " + strBranchName;
                                    //row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;
                                    //row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";

                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                    row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;// strAccountNo;
                                                                                                // row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";
                                    row["IFSCCode"] = "SCAN TO PAY";
                                }
                            }
                            else if (strAccountNo != "" && strBankName != "")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + _strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }
                            if (_dscVerified)
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                            {
                                row["SignatureHeader"] = row["SignatureText"] = "";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }

        public DataTable CreateOnlineSalesBookRetailDataTable_Retail(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from ( Select 0 as ID, CD.FullCompanyName, TINNo as HOAddress,'Place of Supply : ' + (CD.StateName + ' (' + SM.StateCode + ')')PlaceOfSupply,(Address + ''+CD.StateName+' - '+CAST(CD.PinCode as varchar))Address, (CD.STDNo+' - '+CD.PhoneNo)  PhoneNo, EmailID,Website,'' as CompanyTIN ,CD.StateName,SM.StateCode,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD LEFT JOIN StateMaster SM On SM.StateName = CD.StateName Where Other in (Select CompanyName from CompanySetting Where SBillCode = '" + strSerialCode + "') Union ALL Select 1 as ID, CD.FullCompanyName,CD.TINNo as HOAddress,'Place of Supply : ' + (CD.StateName + ' (' + SM.StateCode + ')')PlaceOfSupply, (Address + ''+CD.StateName+' - '+CAST(CD.PinCode as varchar))Address, (CD.STDNo+' - '+CD.PhoneNo)  PhoneNo, EmailID,Website,'' as CompanyTIN,CD.StateName,SM.StateCode,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD LEFT JOIN StateMaster SM On SM.StateName = CD.StateName)_CD "
                            + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.Station,SR.PvtMarka as Marka,SR.Remark,WaybillNo,'' as VehicleNo,LRTime as TimeOfSupply,NoOfCase as OtherField,ISNULL((SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode),SR.Station) Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,ISNULL((SM.MobileNo + ' ' + SM.PhoneNo),SR.MobileNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,LRNumber, (CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,(Select TOP 1 StateCode from StateMaster WHere StateName = SM.State) BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0)+1,LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.Description_3,CardAmt,CashAmt,SR.TenderAmt TenderAmt,SR.RefundAmt RefundAmt,SR.ReturnAmt ReturnAmt,SR.AdvanceAmt AdvanceAmt from SalesBook SR  left join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SalesType = STM.TaxName and STM.SaleType = 'SALES'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "

                            + " Select *,CAST((CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) as Numeric(18,2)) Rate,0 NetDisAmt,0 as Cut,0 as MTR,0 as Fold from ( Select *, ROUND((((TotalAmt) * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt  from( Select ID, SerialNo, InvoiceNo, ItemName,BarCode,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, TaxRate, Qty, TaxType , SalesMans, UnitName, MRP, Amount, DisStatus,DAmt,(ROUND((CASE WHEN TaxType = 1 and Qty>0 then((DAmt * 100) / (100 + TaxRate)) else (DAmt)end), 2)) TotalAmt from( Select ID, SerialNo, InvoiceNo, ItemName, BarCode,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, Amount,ROUND((Amount *(100+ DisStatus)/100),2)DAmt,CAST(DisStatus as numeric(10,0)) DisStatus, Quantity as Qty, TaxRate, TaxType, SalesMans, UnitName, MRP from(  Select ID, SerialNo, InvoiceNo, LTRIM(RTRIM(REPLACE(REPLACE(ItemName, HSNCode, ''), ':', ''))) ItemName, BarCode,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName,  MRP, Amount, DisStatus, TaxRate, TaxType, SalesMans from( "
                            + " Select SE.SID as ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, '' as InvoiceNo, (CASE WHEN RTRIM((SE.BrandName+' '+ SE.DesignName))='' THEN SE.ItemName ELSE RTRIM((SE.BrandName+' '+ SE.DesignName)) End) ItemName, (CASE WHEN ISNULL(BarCode_S,'') = '' then BarCode else BarCode_S end)BarCode,SE.Variant1,SE.Variant2,SE.Variant3,SE.Variant4,SE.Variant5, GM.HSNCode, '' PurchaseParty, Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SE.ItemName) UnitName, SE.Qty,(MRP*(100-SR.SpecialDscPer)/100.00)MRP,((((MRP*(100-SR.SpecialDscPer)/100.00)*(100+(SE.SDisPer-ISNULL(SE.OfferDisPer,0)))/100.00))*SE.Qty)Amount, (ISNULL(SE.SDisPer,0)+ISNULL(SE.OfferDisPer,0)) as DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType ,(select distinct STUFF((SELECT distinct ', ' + ISNULL(sb1.SalesMan,'DIRECT') from SalesBookSecondary sb1 where SE.BillCode = sb1.BillCode AND SE.BillNo = sb1.BillNo FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') ,1,2,'')) SalesMans from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0 )_Sales UNION ALL "

                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,(SR.PackingAmt*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PackingAmt > 0 UNION ALL "
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,(SR.PostageAmt*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType ,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PostageAmt > 0 UNION ALL "
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP,(SR.GreenTax*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.GreenTax > 0 UNION ALL "
                            //     + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'INSURANCECHARGES' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, ((CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money))*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.DisAmt !=0 UNION ALL "
                            //  + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money))*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' SalesMans from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OtherAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GROSS' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.GrossAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.GrossAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OfferDiscount' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.OfferDisAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OfferDisAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Discount' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.DisAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.DisAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OtherAmt' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, CAST(SR.OtherSign + CAST(SR.OtherAmt as varchar)as Money) Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OtherAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Taxable' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.TaxableAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.TaxableAmt != 0 UNION ALL"
                            //  + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GST' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.TaxAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.TaxAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Final' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.FinalAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.FinalAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'RoundOff' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, (SR.RoundOffAmt*(CASE WHEN RoundOffSign = '-' then -1 else 1 end)) Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.RoundOffAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Advance' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.AdvanceAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.AdvanceAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Return' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.ReturnAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.ReturnAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Card' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.CardAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.CardAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Cheque' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.ChequeAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.ChequeAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'CashAmt' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.CashAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.CashAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Tender' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.TenderAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.TenderAmt != 0 UNION ALL"
                            + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Net' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.NetAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.NetAmt != 0 UNION ALL"
                            + "  Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'Refund' as ItemName,'' Barcode,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,0 MRP, SR.RefundAmt Amount,0 DisStatus,0 as TaxRate,1 as TaxType,'' SalesMans from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.RefundAmt != 0 "

                            + ")_Sales )Sales)_Sales)FinalSales Order by ID asc "

                            + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 and Qty > 0 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from(  "
                            + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, Qty as Quantity, ROUND((((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty) * (100.00 + SDisPer) / 100.00), 2) Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0  Union All "
                            + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((PackingAmt + GreenTax+PostageAmt + ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)))*(CASE WHEN SMN.TaxIncluded=1 then ((100.00+TaxPer)/100.00) else 1 end)), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and (PackingAmt + GreenTax+PostageAmt +SR.OtherAmt+SR.DisAmt) != 0 )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc "
                            + " SELECT * FROM CardDetails where BillCode = '" + strSerialCode + "' AND BillNo = " + strSerialNo;

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    DataTable dtCardDetails = ds.Tables[4];

                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strCompanyPhone = "", strHOAddress = "", strPlaceOfSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strStateCode = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strSalesPartyID = "", strSubPartyID = "", _strBranchName = "", strReferance = "";

                        double dTTaxAmt = 0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        _strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strStateCode = Convert.ToString(dRow["StateCode"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strReferance = Convert.ToString(_dRow["Description_3"]);
                        if (strSalesPartyID == "")
                        {
                            if (ConvertObjectToDouble(_dRow["CashAmt"]) > 0)
                                strSalesPartyID = "CASH SALE";
                            else if (ConvertObjectToDouble(_dRow["CardAmt"]) > 0)
                                strSalesPartyID = "CARD SALE";

                        }
                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyPhone = Convert.ToString(dRow["PhoneNo"]);
                            strCompanyEmail = Convert.ToString(dRow["EmailID"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                            if (strHOAddress.Length < 16)
                                strHOAddress = "";
                        }
                        strPlaceOfSupply = Convert.ToString(dRow["PlaceOfSupply"]);

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }

                        }
                        int rowIndex = 1;
                        double dQty = 0, dRate = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dTotalMRP = 0, dTotalSaving = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0, dMRP = 0, dTenderAmt = 0;
                        double dRefundAmt = 0, dReturnAmt = 0, dAdvanceAmt = 0;
                        // strTaxType = Convert.ToString(_dRow["TaxType"]);
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
                        string strBarcode = "", strVariant1 = "", strVariant2 = "", strVariant3 = "", strVariant4 = "", strVariant5 = "";
                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = "Phone - " + strCompanyPhone;
                                if (strCompanyEmail != "" && MainPage.strPrintLayout != "T4")
                                    row["CompanyEMail"] = row["CompanyEMail"] + ", Email - " + strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOfSupply;
                                row["SupplierRef"] = _dRow["Marka"];
                                row["VehicleNo"] = _dRow["VehicleNo"];
                                row["WayBillNo"] = _dRow["WayBillNo"];
                                row["Other"] = _dRow["OtherField"];
                                row["OrderNo"] = "State Code : " + strStateCode;
                                // row["CompanyTIN"] = _dRow["SalePartyID"];
                                //       if (MainPage.strCompanyName.Contains("SARAOGI") || MainPage.strCompanyName.Contains("STYLO"))
                                {
                                    row["BuyerName"] = (strSalesPartyID + " " + strBuyerName).Trim();
                                    row["ShippedName"] = (strSubPartyID + " " + strSubPartyName).Trim();
                                }
                                //else
                                //{
                                //    row["BuyerName"] = strBuyerName;
                                //    row["ShippedName"] = strSubPartyName;
                                //}
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;


                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;

                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["Transport"] = _dRow["TransportName"];
                                row["Destination"] = _dRow["Station"];
                                row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strBarcode = Convert.ToString(rows["Barcode"]);
                                strVariant1 = Convert.ToString(rows["Variant1"]);
                                strVariant2 = Convert.ToString(rows["Variant2"]);
                                //strVariant3 = Convert.ToString(rows["Variant3"]);
                                strVariant4 = Convert.ToString(rows["Variant4"]);
                                //strVariant5 = Convert.ToString(rows["Variant5"]);
                                strItemName = Convert.ToString(rows["ItemName"]);

                                if (strVariant1 != "")
                                    strItemName += " " + strVariant1;
                                if (strVariant2 != "")
                                    strItemName += " " + strVariant2;
                                if (strVariant3 != "")
                                    strItemName += " " + strVariant3;
                                if (strVariant4 != "")
                                    strItemName += " (" + strVariant4 + ")";
                                if (strVariant5 != "")
                                    strItemName += " " + strVariant5;

                                if (MainPage.pManfDesign && strBarcode != "")
                                    strItemName = strBarcode + " " + strItemName;

                                row["ItemName"] = strItemName;
                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];
                                // row["PurchaseParty"] = rows["PurchaseParty"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["Amount"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dRate = ConvertObjectToDouble(rows["Rate"]);
                                dMRP = ConvertObjectToDouble(rows["MRP"]);

                                dTotalMRP += dQty * dMRP;

                                dTotalSaving += dMRP - dRate;

                                dTAmt += dSAmount;

                                //if (Convert.ToDouble(rows["DisStatus"]) > 0)
                                //    row["DisPer"] = "+" + rows["DisStatus"] + "%";
                                //else
                                row["DisPer"] = rows["DisStatus"] + "%";

                                if (MainPage.pQty)
                                    row["Qty"] = dQty.ToString("0") + " " + rows["UnitName"];

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = dRate.ToString("N2", MainPage.indianCurancy);
                                    row["MRP"] = dMRP.ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["Jursdiction"] = MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";
                                row["User"] = MainPage.strLoginName;

                                if (!_bPrint || !strSerialCode.Contains("DLS"))
                                {
                                    row["HeaderImage"] = MainPage._headerImage;
                                    row["BrandLogo"] = MainPage._brandLogo;
                                }
                                if (Convert.ToString(rows["ID"]) != "0")
                                    row["SalesMans"] = rows["SalesMans"];
                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                AddGSTNetAmount_Retail(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer, dtCardDetails);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            if (strReferance != "")
                                strReferance = "Ref. Bill : " + strReferance + ", ";

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);
                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = strReferance + "Total Qty : " + dTQty;
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            dTenderAmt = ConvertObjectToDouble(_dRow["TenderAmt"]);
                            dRefundAmt = ConvertObjectToDouble(_dRow["RefundAmt"]);
                            dReturnAmt = ConvertObjectToDouble(_dRow["ReturnAmt"]);
                            dAdvanceAmt = ConvertObjectToDouble(_dRow["AdvanceAmt"]);

                            row["TenderAmt"] = dTenderAmt.ToString("N2", MainPage.indianCurancy);
                            row["RefundAmt"] = dRefundAmt.ToString("N2", MainPage.indianCurancy);
                            row["ReturnAmt"] = dReturnAmt.ToString("N2", MainPage.indianCurancy);
                            row["AdvanceAmt"] = dAdvanceAmt.ToString("N2", MainPage.indianCurancy);

                            if (dTotalSaving > 0)
                                row["FooterMsg"] = "** TODAY YOU HAVE SAVED : " + dTotalSaving + " ₹ **";

                            if (_bIGST)
                                row["GSTInOneLine"] = "*GST(IGST: " + dTTaxAmt + " ) : ₹ ";
                            else
                                row["GSTInOneLine"] = "*GST(CGST: " + dTTaxAmt / 2 + ", SGST: " + dTTaxAmt / 2 + " ) : ₹ ";

                            row["TotalGST"] = (dTTaxAmt).ToString("N2", MainPage.indianCurancy);
                            row["TotalTaxable"] = (dTAmt - dTTaxAmt).ToString("N2", MainPage.indianCurancy);
                            row["TotalMRP"] = (dTotalMRP).ToString("N2", MainPage.indianCurancy);
                            dTAmt = (dTAmt - dReturnAmt - dAdvanceAmt);

                            row["afterLessAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            // row["afterLessAmt"] = (dTAmt - dReturnAmt - dAdvanceAmt).ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;// "1. Interest @18% p.a. will be charged if the payment is not made with in 30 days.\n2.Subject to Delhi Jurisdiction only. ";// MainPage.strDeclaration; 
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            row["ForCompany"] = "FOR " + strCompanyName;

                            row["HeaderImage"] = dRow["HeaderImage"];
                            row["BrandLogo"] = dRow["BrandLogo"];
                            row["SignatureImage"] = dRow["SignatureImage"];

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                if (strPartyBankAccountNo != "")
                                {
                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                    row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;
                                    row["IFSCCode"] = "SCAN TO PAY";
                                }
                            }
                            else if (strAccountNo != "" && strBankName != "")
                            {
                                if (strBankName != "")
                                {
                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "Branch Name : " + strBranchName;
                                    row["AccountNo"] = "Account No. : " + strAccountNo;
                                    row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                                }
                            }
                            if (_dscVerified && MainPage.strSoftwareType == "AGENT")
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                            {
                                row["SignatureHeader"] = row["SignatureText"] = "";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }



        public DataTable SalesBookRestoDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SBillCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+(CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD "
                                  + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.Station,SR.PvtMarka as Marka,SR.Remark,WaybillNo,'' as VehicleNo,LRTime as TimeOfSupply,NoOfCase as OtherField,ISNULL((SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode),SR.Station) Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,ISNULL((SM.MobileNo + ' ' + SM.PhoneNo),SR.MobileNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,LRNumber, (CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,(Select TOP 1 StateCode from StateMaster WHere StateName = SM.State) BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0)+1,LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.Description_3,CardAmt,CashAmt,SR.TenderAmt TenderAmt,SR.RefundAmt RefundAmt,SR.ReturnAmt ReturnAmt,SR.AdvanceAmt from SalesBook SR  left join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SalesType = STM.TaxName and STM.SaleType = 'SALES'  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "

                                  + " Select *,CAST((CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) as Numeric(18,2)) Rate,0 NetDisAmt,0 as Cut,0 as MTR,0 as Fold from ( Select *, ROUND((((TotalAmt) * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt  from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, MRP, Amount, DisStatus,DAmt,(ROUND((CASE WHEN TaxType = 1 and Qty>0 then((DAmt * 100) / (100 + TaxRate)) else (DAmt)end), 2)) TotalAmt from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, Amount,ROUND((Amount *(100+ DisStatus)/100),2)DAmt,CAST(DisStatus as numeric(10,0)) DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName, MRP from(  Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, MRP, Amount, DisStatus, TaxRate, TaxType from( "
                                  + " Select SE.SID as ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, '' as InvoiceNo, ItemName+' '+DesignName ItemName,SE.Variant1,SE.Variant2,SE.Variant3,SE.Variant4,SE.Variant5, GM.HSNCode, '' PurchaseParty, Qty as Quantity, UnitName, SE.Qty,MRP,((((Rate*(100-ISNULL(SR.SpecialDscPer,0))/100.00)*(100+ISNULL(SE.SDisPer,0))/100.00))*SE.Qty)Amount, (ISNULL(SE.SDisPer,0)+ISNULL(SE.OfferDisPer,0)) as DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0 )_Sales "
                                  + ")_Sales )Sales)_Sales)FinalSales Order by ID asc "

                                  + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 and Qty > 0 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from(  "
                                  + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, Qty as Quantity, Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0  Union All "
                                  + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND((PackingAmt + GreenTax+PostageAmt + ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)))), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and (PackingAmt + GreenTax+PostageAmt +SR.OtherAmt+SR.DisAmt) != 0 )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc "
                                  + " SELECT * FROM CardDetails where BillCode = '" + strSerialCode + "' AND BillNo = " + strSerialNo;

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    DataTable dtCardDetails = ds.Tables[4];

                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOfSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strSalesPartyID = "", strSubPartyID = "", _strBranchName = "", strReferance = "";

                        double dTTaxAmt = 0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        _strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strReferance = Convert.ToString(_dRow["Description_3"]);
                        if (strSalesPartyID == "")
                        {
                            if (ConvertObjectToDouble(_dRow["CashAmt"]) > 0)
                                strSalesPartyID = "CASH SALE";
                            else if (ConvertObjectToDouble(_dRow["CardAmt"]) > 0)
                                strSalesPartyID = "CARD SALE";

                        }
                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        //if (strPackerName == "")
                        //    strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                            if (strHOAddress.Length < 16)
                                strHOAddress = "";
                        }
                        strPlaceOfSupply = Convert.ToString(dRow["PlaceOfSupply"]);

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }

                        }
                        int rowIndex = 1;
                        double dQty = 0, dRate = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0, dMRP = 0, dTenderAmt = 0, dRefundAmt = 0;
                        double dReturnAmt = 0, dAdvanceAmt = 0;
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOfSupply;
                                //  row["SupplierRef"] = _dRow["Marka"];
                                //   row["VehicleNo"] = _dRow["VehicleNo"];
                                // row["WayBillNo"] = _dRow["WayBillNo"];
                                //row["Other"] = _dRow["OtherField"];
                                //{
                                row["BuyerName"] = (strSalesPartyID + " " + strBuyerName).Trim();
                                //    row["ShippedName"] = (strSubPartyID + " " + strSubPartyName).Trim();
                                //}
                                //row["BuyerAddress"] = strBuyerAddress;
                                //row["BuyerStatePin"] = strBuyerSP;
                                //row["BilledStateCode"] = strBStateCode;
                                //row["BuyerEmail"] = strBuyerEmail;
                                //row["BilledPANNo"] = strBuyerPANNo;
                                //row["BuyerDealerType"] = strDealerType;

                                //row["ShippedAddress"] = strSAddress;
                                //row["ShippedState"] = strSState;
                                //row["ShippedStateCode"] = strSStateCode;
                                //row["ShippedEmail"] = strSMobileNo;
                                //row["ShippedPANNo"] = strShippedPANNo;
                                //row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;

                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strItemName = Convert.ToString(rows["ItemName"]);

                                row["ItemName"] = strItemName;
                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["Amount"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dRate = ConvertObjectToDouble(rows["Rate"]);
                                dMRP = ConvertObjectToDouble(rows["MRP"]);

                                dTAmt += dSAmount;

                                row["DisPer"] = rows["DisStatus"] + "%";

                                if (MainPage.pQty)
                                    row["Qty"] = dQty.ToString("0");

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                    {
                                        row["IGSTPer"] = dTaxPer + "%";
                                        row["TaxPer"] = dTaxPer;
                                    }
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                        row["TaxPer"] = dTaxPer;
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                //---------------------------------------------------------------------------------------------------------------------               
                                if (_bIGST)
                                    row["TotalIGST"] = dTTaxAmt.ToString("N2", MainPage.indianCurancy);
                                else
                                {
                                    row["TotalCGST"] = (dTTaxAmt / 2).ToString("N2", MainPage.indianCurancy);
                                    row["TotalSGST"] = (dTTaxAmt / 2).ToString("N2", MainPage.indianCurancy);
                                }
                                dTTaxAmt = Math.Round(dTTaxAmt, 2);
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                //----------------------------------------------------------------------------------------------------------------------  

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = dRate.ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                    row["MRP"] = dMRP.ToString("N2", MainPage.indianCurancy);
                                }
                                row["Jursdiction"] = MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";

                                if (!_bPrint || !strSerialCode.Contains("DLS"))
                                {
                                    row["HeaderImage"] = MainPage._headerImage;
                                    row["BrandLogo"] = MainPage._brandLogo;
                                }
                                row["User"] = MainPage.strLoginName;

                                row["OtherAmount"] = rows["TaxAmt"];

                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }
                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount_Retail(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer, dtCardDetails);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            if (strReferance != "")
                                strReferance = "Ref. Bill : " + strReferance + ", ";

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);
                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = strReferance + dTQty;
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            dTenderAmt = ConvertObjectToDouble(_dRow["TenderAmt"]);
                            dRefundAmt = ConvertObjectToDouble(_dRow["RefundAmt"]);
                            dReturnAmt = ConvertObjectToDouble(_dRow["ReturnAmt"]);
                            dAdvanceAmt = ConvertObjectToDouble(_dRow["AdvanceAmt"]);

                            row["TenderAmt"] = dTenderAmt.ToString("N2", MainPage.indianCurancy);
                            row["RefundAmt"] = dRefundAmt > 0 ? dRefundAmt.ToString("N2", MainPage.indianCurancy) : "0.00";
                            row["ReturnAmt"] = dReturnAmt.ToString("N2", MainPage.indianCurancy);
                            row["AdvanceAmt"] = dAdvanceAmt.ToString("N2", MainPage.indianCurancy);

                            dTAmt = (dTAmt - dReturnAmt - dAdvanceAmt);
                            row["afterLessAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            row["ForCompany"] = "FOR " + strCompanyName;

                            row["HeaderImage"] = dRow["HeaderImage"];
                            row["BrandLogo"] = dRow["BrandLogo"];
                            row["SignatureImage"] = dRow["SignatureImage"];

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (strAccountNo != "" && strBankName != "")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + _strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }
                            //if (_dscVerified)
                            //{
                            //    row["SignatureHeader"] = "Signature valid";
                            //    row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                            //                         + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                            //                         + "\nLocation: IN";
                            //}
                            //else
                            //{
                            //    row["SignatureHeader"] = row["SignatureText"] = "";
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }




        public DataTable CreateOnlineSalesBookRetailDataTable(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'' as PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SBillCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+(CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD "
                                + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.Station,SR.PvtMarka as Marka,SR.Remark,WaybillNo,'' as VehicleNo,LRTime as TimeOfSupply,NoOfCase as OtherField,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,LRNumber, (CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,'Place of Supply: '+(SM.State+'('+_SM.StateCode+')')PlaceOfSupply,(_SM.StateCode) BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0)+1,LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.Description_3,SR.NetAmt,[IRNNO],[QRCode] from SalesBook SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SalesType = STM.TaxName and STM.SaleType = 'SALES' left join StateMaster _SM on SM.State=_SM.StateName  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "

                                + " Select *,CAST((CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) as Numeric(18,2)) Rate,0 NetDisAmt,0 as Cut,0 as MTR,0 as Fold from ( Select *, ROUND((((TotalAmt) * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt  from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, Amount, DisStatus,DAmt,(ROUND((CASE WHEN TaxType = 1 and Qty>0 then((DAmt * 100) / (100 + TaxRate)) else (DAmt)end), 2)) TotalAmt from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, Amount,ROUND((Amount *(100+ DisStatus)/100),2)DAmt,CAST(DisStatus as numeric(10,0)) DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from(  Select ID, SerialNo, InvoiceNo, LTRIM(RTRIM(REPLACE(REPLACE(ItemName, HSNCode, ''), ':', ''))) ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, Amount, DisStatus, TaxRate, TaxType from( "
                                + " Select SE.SID as ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, '' as InvoiceNo, SE.ItemName,SE.Variant1,SE.Variant2,SE.Variant3,SE.Variant4,SE.Variant5,SUBSTRING(GM.HSNCode,0,7)HSNCode, '' PurchaseParty, Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SE.ItemName) UnitName, ((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty)Amount, SDisPer as DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " )_Sales UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.PackingAmt Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PackingAmt > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.PostageAmt Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PostageAmt > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.GreenTax Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.GreenTax > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'INSURANCECHARGES' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, (CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.DisAmt !=0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, (CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.OtherAmt != 0 )_Sales )Sales)_Sales)FinalSales Order by ID asc "

                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 and Qty > 0 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from(  "
                                + " Select (GM.Other + ' : ' + SUBSTRING(GM.HSNCode,0,7)) as HSNCode, Qty as Quantity, ROUND((((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty) * (100.00 + SDisPer) / 100.00), 2) Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(PackingAmt + GreenTax+PostageAmt + ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money))), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and (PackingAmt + GreenTax+PostageAmt +SR.OtherAmt+SR.DisAmt) != 0 )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc ";

                DataSet ds = GetDataSetRecord(strQuery);
                double dBillNetAmt = 0;
                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOfSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strQRCode="", strIRNNo="", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strSalesPartyID = "", strSubPartyID = "", _strBranchName = "", strReferance = "";

                        double dTTaxAmt = 0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        _strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strReferance = Convert.ToString(_dRow["Description_3"]);
                        dBillNetAmt = ConvertObjectToDouble(_dRow["NetAmt"]);

                        strQRCode = Convert.ToString(_dRow["QRCode"]);
                        byte[] _bQRCode = null;
                        if (strQRCode != "")
                            _bQRCode = QRCodeGen.GetQRCode(strQRCode);


                        strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        if (strIRNNo == "")
                            strIRNNo = "N/A";

                        strIRNNo = "IRN : " + strIRNNo;

                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }
                        strPlaceOfSupply = Convert.ToString(_dRow["PlaceOfSupply"]);

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }

                        }
                        int rowIndex = 1;
                        double dQty = 0, dRate = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0,  dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;
                        // strTaxType = Convert.ToString(_dRow["TaxType"]);
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
                        string strVariant1 = "", strVariant2 = "", strVariant3 = "", strVariant4 = "", strVariant5 = "";
                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOfSupply;
                                row["SupplierRef"] = _dRow["Marka"];
                                row["VehicleNo"] = _dRow["VehicleNo"];
                                row["WayBillNo"] = _dRow["WayBillNo"];
                                row["Other"] = _dRow["OtherField"];
                                // row["CompanyTIN"] = _dRow["SalePartyID"];
                                if ((MainPage.strCompanyName.Contains("SARAOGI") || MainPage.strCompanyName.Contains("STYLO")) && MainPage.strSoftwareType == "AGENT")
                                {
                                    row["BuyerName"] = strSalesPartyID + " " + strBuyerName;
                                    row["ShippedName"] = strSubPartyID + " " + strSubPartyName;
                                }
                                else
                                {
                                    row["BuyerName"] = strBuyerName;
                                    row["ShippedName"] = strSubPartyName;
                                }
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;


                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;

                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["IRNNO"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["Transport"] = _dRow["TransportName"];
                                row["Destination"] = _dRow["Station"];
                                row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strVariant1 = Convert.ToString(rows["Variant1"]);
                                strVariant2 = Convert.ToString(rows["Variant2"]);
                                //strVariant3 = Convert.ToString(rows["Variant3"]);
                                strVariant4 = Convert.ToString(rows["Variant4"]);
                                //strVariant5 = Convert.ToString(rows["Variant5"]);
                                strItemName = Convert.ToString(rows["ItemName"]);

                                if (strVariant1 != "")
                                    strItemName += " " + strVariant1;
                                if (strVariant2 != "")
                                    strItemName += " " + strVariant2;
                                if (strVariant3 != "")
                                    strItemName += " " + strVariant3;
                                if (strVariant4 != "")
                                    strItemName += " (" + strVariant4 + ")";
                                if (strVariant5 != "")
                                    strItemName += " " + strVariant5;

                                row["ItemName"] = strItemName;
                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];
                                // row["PurchaseParty"] = rows["PurchaseParty"];

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dRate = ConvertObjectToDouble(rows["Rate"]);

                                dTAmt += dSAmount;

                                //if (Convert.ToDouble(rows["DisStatus"]) > 0)
                                //    row["DisPer"] = "+" + rows["DisStatus"] + "%";
                                //else
                                row["DisPer"] = rows["DisStatus"] + "%";

                                if (MainPage.pQty)
                                    row["Qty"] = dQty.ToString("0") + " " + rows["UnitName"];

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = dRate.ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["Jursdiction"] = MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";

                                if (strQRCode != "")
                                    row["QRCode"] = _bQRCode;

                                if (!_bPrint || !strSerialCode.Contains("DLS"))
                                {
                                    row["HeaderImage"] = MainPage._headerImage;
                                    row["BrandLogo"] = MainPage._brandLogo;
                                }

                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            if (strReferance != "")
                                strReferance = "Ref. Bill : " + strReferance + ", ";

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);
                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = strReferance + "Total Qty : " + dTQty + ",   Grand Total :";
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;// "1. Interest @18% p.a. will be charged if the payment is not made with in 30 days.\n2.Subject to Delhi Jurisdiction only. ";// MainPage.strDeclaration; 
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            row["ForCompany"] = "FOR " + strCompanyName;

                            row["HeaderImage"] = dRow["HeaderImage"];
                            row["BrandLogo"] = dRow["BrandLogo"];
                            row["SignatureImage"] = dRow["SignatureImage"];

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                if (strPartyBankAccountNo != "")
                                {
                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                    row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;// strAccountNo;
                                                                                                // row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";
                                    row["IFSCCode"] = "SCAN TO PAY";
                                }
                            }
                            else if (strAccountNo != "" && strBankName != "")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }
                            if (_dscVerified)
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                            {
                                row["SignatureHeader"] = row["SignatureText"] = "";
                            }

                            if (dBillNetAmt != dTAmt)
                            {
                                MessageBox.Show("Sorry ! Net amt in invoice and net amt in print is not match !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                                    table.Rows.Clear();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }

        public DataTable CreatePurchaseReturnWayBillDataTable(string strBillCode, string strBillNo)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("WayBillNo", typeof(String));
            dt.Columns.Add("WayBillDate", typeof(String));
            dt.Columns.Add("EnteredBy", typeof(String));
            dt.Columns.Add("ValidFrom", typeof(String));
            dt.Columns.Add("SupplierGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDispatch", typeof(String));
            dt.Columns.Add("CustomerGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDelivery", typeof(String));
            dt.Columns.Add("BillNo", typeof(String));
            dt.Columns.Add("BillDate", typeof(String));
            dt.Columns.Add("ValueOfGoods", typeof(String));
            dt.Columns.Add("HSNCode", typeof(String));
            dt.Columns.Add("ReasonForTransportation", typeof(String));
            dt.Columns.Add("Transporter", typeof(String));
            dt.Columns.Add("Other", typeof(String));
            dt.Columns.Add("ApproxDistance", typeof(String));
            dt.Columns.Add("BarcodeNo", typeof(String));
            dt.Columns.Add("BarcodeNumber", typeof(String));
            dt.Columns.Add("TransactionType", typeof(String));

            string strWayBill = "", strGSTNo = "", strCustomerGSTNo, strSupplierGSTNo = "", strBarCodeNumber = "", strTransactionType = "Regular";
            string strQuery = " Select WayBillNo, WayBillDate, CD.GSTNo,CD.CompanyName FullCompanyName, CD.CompanyName CompanyName,(TST.StateName + '-' + PP.PinCode) PlaceOfSupply   , PP.GSTNo CustomerGSTNo, PP.Name as CustomerName, (TST.StateName + '-' + PP.PinCode) PlaceOfDelivery   , (BillCode + CAST(BillNo as varchar)) BillNo, CONVERT(varchar, PR.Date, 103)BillDate, ROUND(CAST(PR.NetAmt as Money), 0) NetAmt   , (TR.GSTNo + ' & ' + PR.Transport) Transporter, PD.Distance PDistance   from PurchaseReturn PR   LEFT JOIN Transport TR ON TransportName = PR.Transport   LEFT JOIN CompanyDetails CD ON CD.Other = '" + MainPage.strCompanyName + "'   LEFT JOIN SupplierMaster PP on(ISNULL(PP.AreaCode, '') + ISNULL(PP.AccountNo, '')) = PR.PurchasePartyID   LEFT JOIN StateMaster FST on CD.StateName = FST.StateName   LEFT JOIN StateMaster TST on PP.State = TST.StateName   LEFT JOIN PinCodeDistance PD on(PD.FromPinCode = CD.PinCode AND PD.ToPinCode = PP.PinCode)   OR(PD.FromPinCode = PP.PinCode AND PD.ToPinCode = CD.PinCode) Where PR.BillCode = '" + strBillCode + "' and PR.BillNo = " + strBillNo + " Order by PR.BillNo"
                               + " Select Max(Category) as Category, HSNCode, ItemName, Qty, COUNT(*)ItemCount from( Select PRD.ItemName, CategoryName as Category, IGM.HSNCode, PRD.Qty from PurchaseReturnDetails PRD inner join PurchaseReturn PR on PRD.BillCode = PR.BillCode and PRD.BIllNo = PR.BillNo LEFT JOIN Items IM ON PRD.ItemName = IM.ItemName LEFT JOIN ItemGroupMaster IGM ON IM.GroupName = IGM.GroupName Where PR.BillCode = '" + strBillCode + "' and PR.BillNo = " + strBillNo + " )Trans Group by HSNCode, ItemName, Qty Order by Qty desc ";
            DataSet ds = DataBaseAccess.GetDataSetRecord(strQuery);
            if (ds.Tables.Count > 0)
            {
                DataTable table = ds.Tables[0], dtDetails = ds.Tables[1];

                if (table.Rows.Count > 0 && dtDetails.Rows.Count > 0)
                {
                    DataRow dr = table.Rows[0];
                    DataRow row = dt.NewRow();
                    strBarCodeNumber = Convert.ToString(dr["WayBillNo"]).Replace(" ", "");
                    strWayBill = strBarCodeNumber;
                    strGSTNo = Convert.ToString(dr["GSTNo"]);
                    strCustomerGSTNo = Convert.ToString(dr["CustomerGSTNo"]);

                    //if (Convert.ToString(dr["SubPartyID"]) != "SELF")
                    //    strTransactionType = "Bill To - Ship To";

                    strWayBill = strWayBill.Insert(4, " ").Insert(9, " ");
                    strSupplierGSTNo = strGSTNo.Insert(5, " ").Insert(11, " ");
                    if (strCustomerGSTNo != "")
                        strCustomerGSTNo = strCustomerGSTNo.Insert(5, " ").Insert(11, " ");
                    else
                    {
                        strCustomerGSTNo = "URP";
                        strTransactionType = "- NA -";
                    }

                    row["WayBillNo"] = strWayBill;
                    row["WayBillDate"] = dr["WayBillDate"];
                    row["EnteredBy"] = strSupplierGSTNo + " - " + dr["FullCompanyName"];
                    row["ValidFrom"] = "Not Valid for Movement as Part B is not entered [" + dr["PDistance"] + "Kms]";
                    row["SupplierGSTNo"] = strGSTNo + "," + dr["CompanyName"];
                    row["PlaceOfDispatch"] = dr["PlaceOfSupply"];
                    row["CustomerGSTNo"] = strCustomerGSTNo + " ," + dr["CustomerName"];
                    row["PlaceOfDelivery"] = Convert.ToString(dr["PlaceOfDelivery"]).Replace("\n", " ").Replace("\r", " ");
                    row["BillNo"] = dr["BillNo"];
                    row["BillDate"] = dr["BillDate"];
                    row["ValueOfGoods"] = Convert.ToDouble(dr["NetAmt"]);

                    int Count = Convert.ToInt32(dtDetails.Rows.Count);
                    string Category = dtDetails.Rows[0]["Category"].ToString();

                    Category = Category == "" ? "READYMADE GARMENT" : Category;
                    if (Count > 1)
                        row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - " + Category + " (+" + (Count - 1).ToString() + ")";
                    else
                        row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - " + Category;

                    row["ReasonForTransportation"] = "Outward - Supply";
                    row["Transporter"] = dr["Transporter"];
                    row["Other"] = MainPage.currentDate.ToString("M/d/yyyy");
                    row["ApproxDistance"] = "";//dr["IRNNo"];
                    row["BarcodeNo"] = "*" + strBarCodeNumber + "*";
                    row["BarcodeNumber"] = strBarCodeNumber;
                    row["TransactionType"] = strTransactionType;

                    dt.Rows.Add(row);
                }
            }
            return dt;
        }


        public DataTable CreateOnlineSalesBookRetailDataTable_Custom(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'' as PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SBillCode='" + strSerialCode + "') Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+(CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD "
                                + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.Station,SR.PvtMarka as Marka,SR.Remark,WaybillNo,'' as VehicleNo,LRTime as TimeOfSupply,NoOfCase as OtherField,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,LRNumber, (CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,'Place of Supply: '+(SM.State+'('+_SM.StateCode+')')PlaceOfSupply,_SM.StateCode as BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0)+1,LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.Description_3,TotalBox,[IRNNO],[QRCode] from SalesBook SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SalesType = STM.TaxName and STM.SaleType = 'SALES'  OUTER APPLY (Select SUM(CAST(OTHER2 as money))TotalBox from SalesBookSecondary SBS Where SBS.BillCode=SR.BillCode and SBS.BillNo=SR.BillNo)SBS left join StateMaster _SM on SM.State=_SM.StateName Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " "

                                + " Select *,CAST((CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) as Numeric(18,2)) Rate,0 NetDisAmt,0 as Cut,0 as MTR,0 as Fold from ( Select *, ROUND((((TotalAmt) * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt  from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, Amount, DisStatus,DAmt,(ROUND((CASE WHEN TaxType = 1 and Qty>0 then((DAmt * 100) / (100 + TaxRate)) else (DAmt)end), 2)) TotalAmt,Description,BoxBal,BrandName from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, Amount,ROUND((Amount *(100+ DisStatus)/100),2)DAmt,CAST(DisStatus as numeric(10,0)) DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName,Description,BoxBal,BrandName from(  Select ID, SerialNo, InvoiceNo, LTRIM(RTRIM(REPLACE(REPLACE(ItemName, HSNCode, ''), ':', ''))) ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, Amount, DisStatus, TaxRate, TaxType,Description,BoxBal,BrandName from( "
                                + " Select SE.SID as ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, '' as InvoiceNo, SE.ItemName,SE.Variant1,SE.Variant2,SE.Variant3,SE.Variant4,SE.Variant5, GM.HSNCode, '' PurchaseParty, Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SE.ItemName) UnitName, ((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty)Amount, SDisPer as DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType,SE.Other1 as Description,SE.Other2 as BoxBal,BrandName from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0 )_Sales UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.PackingAmt Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' as Description,'' as BoxBal,'' as BrandName from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PackingAmt > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.PostageAmt Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' as Description,'' as BoxBal,'' as BrandName from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.PostageAmt > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.GreenTax Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' as Description,'' as BoxBal,'' as BrandName from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.GreenTax > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'CASHRECEIVED' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, SR.CashAmt as Amount,0 DisStatus,0 as TaxRate,0 as TaxType,'' as Description,'' as BoxBal,'' as BrandName from SalesBook SR Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.CashAmt > 0 UNION ALL "
                                //+ " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, (CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' as Description,'' as BoxBal from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SR.DisAmt !=0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, (CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType,'' as Description,'' as BoxBal,'' as BrandName from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and (SR.OtherAmt != 0 OR SR.DisAmt !=0) )_Sales )Sales)_Sales)FinalSales Order by ID asc "

                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 and Qty > 0 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from(  "
                                + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, Qty as Quantity, ROUND((((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty) * (100.00 + SDisPer) / 100.00), 2) Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName) as GM Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and SE.Amount > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(PackingAmt + GreenTax+PostageAmt + ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money))), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = '" + strSerialCode + "' and SR.BillNo =  " + strSerialNo + " and (PackingAmt + GreenTax+PostageAmt +SR.OtherAmt+SR.DisAmt) != 0 )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc ";

                DataSet ds = GetDataSetRecord(strQuery);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];

                        string strQRCode, strIRNNo,strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOfSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strSalesPartyID = "", strSubPartyID = "", _strBranchName = "", strReferance = "";

                        double dTTaxAmt = 0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        _strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strReferance = Convert.ToString(_dRow["Description_3"]);

                        strQRCode = Convert.ToString(_dRow["QRCode"]);
                        byte[] _bQRCode = null;
                        if (strQRCode != "")
                            _bQRCode = QRCodeGen.GetQRCode(strQRCode);

                        strIRNNo = Convert.ToString(_dRow["IRNNo"]);
                        if (strIRNNo == "")
                            strIRNNo = "N/A";

                        strIRNNo = "IRN : " + strIRNNo;

                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }
                        strPlaceOfSupply = Convert.ToString(_dRow["PlaceOfSupply"]);

                        if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }

                        }
                        int rowIndex = 1;
                        double dQty = 0, dRate = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0, dTotalBox = 0;
                        // strTaxType = Convert.ToString(_dRow["TaxType"]);
                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);

                        dTotalBox = ConvertObjectToDouble(_dRow["TotalBox"]);

                        string strMainItemName="", strVariant1 = "", strVariant2 = "", strVariant3 = "", strVariant4 = "", strVariant5 = "", strDesc = "", strBox = "", strBrandName = "";
                      
                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = MainPage.strSubTitle;
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOfSupply;
                                row["SupplierRef"] = _dRow["Marka"];
                                row["VehicleNo"] = _dRow["VehicleNo"];
                                row["WayBillNo"] = _dRow["WayBillNo"];
                                row["Other"] = _dRow["OtherField"];
                                // row["CompanyTIN"] = _dRow["SalePartyID"];
                                if ((MainPage.strCompanyName.Contains("SARAOGI") || MainPage.strCompanyName.Contains("STYLO")) && MainPage.strSoftwareType == "AGENT")
                                {
                                    row["BuyerName"] = strSalesPartyID + " " + strBuyerName;
                                    row["ShippedName"] = strSubPartyID + " " + strSubPartyName;
                                }
                                else
                                {
                                    row["BuyerName"] = strBuyerName;
                                    row["ShippedName"] = strSubPartyName;
                                }
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;


                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;

                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = MainPage.strGeneratedBy;
                                row["Jursdiction"] = MainPage.strJurisdiction;
                                row["IRNNO"] = strIRNNo;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["Transport"] = _dRow["TransportName"];
                                row["Destination"] = _dRow["Station"];
                                row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strVariant1 = Convert.ToString(rows["Variant1"]);
                                strVariant2 = Convert.ToString(rows["Variant2"]);
                                //strVariant3 = Convert.ToString(rows["Variant3"]);
                                strVariant4 = Convert.ToString(rows["Variant4"]);
                                //strVariant5 = Convert.ToString(rows["Variant5"]);
                                strItemName = strMainItemName= Convert.ToString(rows["ItemName"]);
                                strDesc = Convert.ToString(rows["Description"]);
                                strBrandName = Convert.ToString(rows["BrandName"]);
                               

                                strBox = Convert.ToString(rows["BoxBal"]);
                                if (strBox == "" || strBox == "0")
                                    strBox = "--";
                                if (strVariant1 != "")
                                    strItemName += " " + strVariant1;
                                if (strVariant2 != "")
                                    strItemName += " " + strVariant2;
                                if (strVariant3 != "")
                                    strItemName += " " + strVariant3;
                                if (strVariant4 != "")
                                    strItemName += " (" + strVariant4 + ")";
                                if (strVariant5 != "")
                                    strItemName += " " + strVariant5;
                                if (strDesc != "")
                                    strItemName += " (" + strDesc + ") ";

                                if (!MainPage._bTaxStatus)
                                {
                                    if (MainPage.strClientName == "LOTUS")
                                    {
                                        strItemName = strMainItemName + " " + strBrandName;
                                        strBrandName = Convert.ToString(rows["Variant1"]);

                                    }
                                }
                                else
                                {
                                    if (MainPage.strClientName == "LOTUS")
                                        row["OrderNo"] = "Size"; 
                                    else
                                        row["OrderNo"] = "Brand";
                                }

                                row["ItemName"] = strItemName;
                                row["HeaderName"] = MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"]; //rowIndex + "."; SerialNo
                                row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];
                                row["Mtr"] = strBox;
                                row["PurchaseParty"] = strBrandName;

                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dRate = ConvertObjectToDouble(rows["Rate"]);

                                dTAmt += dSAmount;

                                //if (Convert.ToDouble(rows["DisStatus"]) > 0)
                                //    row["DisPer"] = "+" + rows["DisStatus"] + "%";
                                //else
                                row["DisPer"] = rows["DisStatus"] + "%";

                                if (MainPage.pQty)
                                    row["Qty"] = dQty + " " + rows["UnitName"];

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = dRate.ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["Jursdiction"] = MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";

                                if(strQRCode!="")
                                    row["QRCode"] = _bQRCode;

                                if (!_bPrint || !strSerialCode.Contains("DLS"))
                                {
                                    row["HeaderImage"] = MainPage._headerImage;
                                    row["BrandLogo"] = MainPage._brandLogo;
                                }

                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            if (strReferance != "")
                                strReferance = "Ref. Bill : " + strReferance + ", ";
                            if (dTotalBox > 0)
                            {
                                if (MainPage.strClientName == "LOTUS")
                                    strReferance += "Total Box : " + dTotalBox.ToString("0") + ", ";
                                else
                                    strReferance += "Total Box/Roll : " + dTotalBox.ToString("0") + ", ";
                            }

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);
                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = strReferance + "Total Qty : " + dTQty + ",   Grand Total :";
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = MainPage.strDeclaration;// "1. Interest @18% p.a. will be charged if the payment is not made with in 30 days.\n2.Subject to Delhi Jurisdiction only. ";// MainPage.strDeclaration; 
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            row["ForCompany"] = "FOR " + strCompanyName;

                            row["HeaderImage"] = dRow["HeaderImage"];
                            row["BrandLogo"] = dRow["BrandLogo"];
                            row["SignatureImage"] = dRow["SignatureImage"];

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                if (strPartyBankAccountNo != "")
                                {
                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                    row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;// strAccountNo;
                                                                                                // row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";
                                    row["IFSCCode"] = "SCAN TO PAY";
                                }
                            }
                            else if (strAccountNo != "" && strBankName != "")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + _strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }
                            if (_dscVerified && MainPage.strSoftwareType == "AGENT" && MainPage.strCompanyName.Contains("SARAOGI"))
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                            {
                                row["SignatureHeader"] = row["SignatureText"] = "";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }

        protected internal void GetSaleRate_Retail(DataGridViewRow row, string strDate)
        {
            try
            {
                string strBarCode = Convert.ToString(row.Cells["barCode"].Value)
                    , strItemName = Convert.ToString(row.Cells["itemName"].Value)
                    , strVariant1 = Convert.ToString(row.Cells["variant1"].Value)
                    , strVariant2 = Convert.ToString(row.Cells["variant2"].Value)
                    , strBrand = Convert.ToString(row.Cells["brandName"].Value);

                DateTime _date = ConvertDateInExactFormat(strDate);

                string strQuery = "Select * from ( Select BrandName,DesignName,IM.UnitName,SaleMRP,[SaleDis],[SaleRate],ID from ( Select  0 ID,BrandName, DesignName, ItemName, SaleMRP,[SaleDis],[SaleRate], BarCode, Variant1, Variant2 from PurchaseBookSecondary Where SaleRate!=0 UNION ALL Select  1 ID, BrandName, DesignName, ItemName,[SaleMRP] as SaleMRP,0 as [SaleDis],[SaleRate], Description as BarCode, Variant1, Variant2 from Items IM inner join ItemSecondary ISS on IM.BilLCOde=ISS.BIlLCOde and IM.BillNo=ISS.BIllNo and IM.DisStatus=0 and ISS.ActiveStatus=1 Where ISNULL(ISS.SaleRate,0)!=0 UNION ALL Select  2 ID,BrandName, DesignName, ItemName, SaleMRP,[SaleDis],[SaleRate], BarCode, Variant1, Variant2 from PurchaseBookSecondary Where SaleRate!=0  union all select 3 ID,BrandName,DesignName,ItemName,Rate,0 SaleDis,0 SaleRate,BarCode,Variant1,Variant2 from StockMaster where BillType in ('Purchase','Opening','StockIn','SaleReturn'))PBS OUTER APPLY (Select Top 1 _IM.UnitName, ISNULL(_ICM.DisPer,0) DisPer from Items _IM left join ItemCategoryMaster  _ICM on _IM.Other=_ICM.CategoryName and PBS.SaleMRP>_ICM.FromRange and PBS.SaleMRP<_ICM.ToRange Where _Im.ItemName=PBS.ItemName)IM Where PBS.BarCode='" + strBarCode + "' and PBS.ItemName='" + strItemName + "' and PBS.Variant1='" + strVariant1 + "' and PBS.Variant2='" + strVariant2 + "'  UNION ALL "
                                + "Select BrandName,_im.BuyerDesignName as DesignName,_Im.UnitName,SaleRate as SaleMRP,ISNULL(IM.DisPer,0) as [SaleDis],(SaleRate*(100-ISNULL(IM.DisPer,0))/100)  SaleRate,1 as ID from Items _Im inner join ItemSecondary _IMS on _im.BillCode=_ims.BillCode and _im.BillNo=_ims.BillNo OUTER APPLY (Select Top 1 _IM.UnitName, ISNULL(_ICM.DisPer,0) DisPer from ItemCategoryMaster  _ICM Where _IM.Other=_ICM.CategoryName and _Im.ItemName=_im.ItemName and _ims.SaleRate>_ICM.FromRange and _ims.SaleRate<_ICM.ToRange)IM Where _IMS.Description='" + strBarCode + "' and _Im.ItemName='" + strItemName + "' and _IMS.Variant1='" + strVariant1 + "' and _IMS.Variant2='" + strVariant2 + "')_Sale Order by ID ";

                strQuery += "SELECT * FROM ( SELECT Cast(Cast(IncentivePer as Float) as Varchar(50)) +(Case when IncentiveType = 'PER' THEN '%' else '' end)IncAmt, (CASE WHEN IncentiveOn = 'BARCODE' then 0 when IncentiveOn = 'ITEM' then 1 when IncentiveOn = 'BRAND' then 2 else 3 end)OrderBY FROM IncentiveDetails ID "
                          + " WHERE(ID.BillCode + ' ' + CAST(ID.BillNo as Varchar(20)) IN( SELECT BillCode + ' ' + CAST(BillNo as Varchar(20))BillCodeNo FROM IncentiveSecondary WHERE FilterName = 'BRAND' AND FilterValue = '" + strBrand + "'"
                          + " UNION ALL SELECT BillCode + ' ' + CAST(BillNo as Varchar(20))BillCodeNo FROM IncentiveSecondary WHERE FilterName = 'ITEM' AND FilterValue = '" + strItemName + "'"
                          + " UNION ALL SELECT BillCode + ' ' + CAST(BillNo as Varchar(20))BillCodeNo FROM IncentiveSecondary WHERE FilterName = 'BARCODE' AND FilterValue = '" + strBarCode + "'"
                          + " ) OR ID.IncentiveOn = 'MRP' AND FilterByMRP = 1 and(StartMRP <=" + ConvertObjectToDouble(row.Cells["mrp"].Value) + " and EndMRP>=" + ConvertObjectToDouble(row.Cells["mrp"].Value) + ")) and(FilterByDate = 0 OR(StartDate <= '" + _date.ToString("MM/dd/yyyy") + "' and EndDate>='" + _date.ToString("MM/dd/yyyy") + "')))INCC ORDER BY OrderBY desc";

                double dDisPer = 0, dMRP = 0, dRate = 0;
                DataSet DS = GetDataSet(strQuery);
                DataTable dt = DS.Tables[0];
                if (dt.Rows.Count > 0)
                {
                    DataRow _row = dt.Rows[0];

                    row.Cells["mrp"].Value = dMRP = ConvertObjectToDouble(_row["SaleMRP"]);
                    row.Cells["disPer"].Value = "-" + _row["SaleDis"];
                    row.Cells["rate"].Value = dRate = ConvertObjectToDouble(_row["SaleRate"]);
                    //row.Cells["brandName"].Value = _row["BrandName"];
                    row.Cells["styleName"].Value = _row["DesignName"];
                    row.Cells["unitName"].Value = _row["UnitName"];

                    dDisPer = ConvertObjectToDouble(_row["SaleDis"]);
                    if (dDisPer == 0 && dRate != 0 && dMRP != 0)
                    {
                        dDisPer = 100 - ((dRate / dMRP) * 100.00);
                        row.Cells["disPer"].Value = dDisPer;
                    }
                }
                row.Cells["smInc"].Value = "";
                if (DS.Tables[1].Rows.Count > 0)
                {
                    DataRow ro = DS.Tables[1].Rows[0];
                    row.Cells["smInc"].Value = ro["IncAmt"];
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        //protected internal void GetSaleRate_Retail(DataGridViewRow row, string strDate)
        //{
        //    try
        //    {
        //        string strBarCode = Convert.ToString(row.Cells["barCode"].Value)
        //            , strItemName = Convert.ToString(row.Cells["itemName"].Value)
        //            , strVariant1 = Convert.ToString(row.Cells["variant1"].Value)
        //            , strVariant2 = Convert.ToString(row.Cells["variant2"].Value)
        //            , strBrand = Convert.ToString(row.Cells["brandName"].Value);

        //        DateTime _date = ConvertDateInExactFormat(strDate);

        //        string strQuery = "Select * from ( Select BrandName,DesignName,IM.UnitName,SaleMRP,[SaleDis],[SaleRate],ID from ( Select  0 ID,BrandName, DesignName, ItemName, SaleMRP,[SaleDis],[SaleRate], BarCode, Variant1, Variant2 from PurchaseBookSecondary Where SaleRate!=0 UNION ALL Select  1 ID, BrandName, DesignName, ItemName,[SaleMRP] as SaleMRP,0 as [SaleDis],[SaleRate], Description as BarCode, Variant1, Variant2 from Items IM inner join ItemSecondary ISS on IM.BilLCOde=ISS.BIlLCOde and IM.BillNo=ISS.BIllNo and IM.DisStatus=0 and ISS.ActiveStatus=1 Where ISNULL(ISS.SaleRate,0)!=0 UNION ALL Select  2 ID,BrandName, DesignName, ItemName, SaleMRP,[SaleDis],[SaleRate], BarCode, Variant1, Variant2 from PurchaseBookSecondary Where SaleRate!=0  union all select 3 ID,BrandName,DesignName,ItemName,Rate,0 SaleDis,0 SaleRate,BarCode,Variant1,Variant2 from StockMaster where BillType in ('Purchase','Opening','StockIn','SaleReturn'))PBS OUTER APPLY (Select Top 1 _IM.UnitName, ISNULL(_ICM.DisPer,0) DisPer from Items _IM left join ItemCategoryMaster  _ICM on _IM.Other=_ICM.CategoryName and PBS.SaleMRP>_ICM.FromRange and PBS.SaleMRP<_ICM.ToRange Where _Im.ItemName=PBS.ItemName)IM Where PBS.BarCode='" + strBarCode + "' and PBS.ItemName='" + strItemName + "' and PBS.Variant1='" + strVariant1 + "' and PBS.Variant2='" + strVariant2 + "'  UNION ALL "
        //                        + "Select BrandName,_im.BuyerDesignName as DesignName,_Im.UnitName,SaleRate as SaleMRP,ISNULL(IM.DisPer,0) as [SaleDis],(SaleRate*(100-ISNULL(IM.DisPer,0))/100)  SaleRate,1 as ID from Items _Im inner join ItemSecondary _IMS on _im.BillCode=_ims.BillCode and _im.BillNo=_ims.BillNo OUTER APPLY (Select Top 1 _IM.UnitName, ISNULL(_ICM.DisPer,0) DisPer from ItemCategoryMaster  _ICM Where _IM.Other=_ICM.CategoryName and _Im.ItemName=_im.ItemName and _ims.SaleRate>_ICM.FromRange and _ims.SaleRate<_ICM.ToRange)IM Where _IMS.Description='" + strBarCode + "' and _Im.ItemName='" + strItemName + "' and _IMS.Variant1='" + strVariant1 + "' and _IMS.Variant2='" + strVariant2 + "')_Sale Order by ID ";

        //        strQuery += " SELECT Cast(Cast(IncentivePer as Float) as Varchar(50)) +(Case when IncentiveType = 'PER' THEN '%' else '' end)IncAmt FROM IncentiveDetails ID "
        //                  + " WHERE(ID.BillCode + ' ' + CAST(ID.BillNo as Varchar(20)) IN( SELECT BillCode + ' ' + CAST(BillNo as Varchar(20))BillCodeNo FROM IncentiveSecondary WHERE FilterName = 'BRAND' AND FilterValue = '" + strBrand + "'"
        //                  + " UNION ALL SELECT BillCode + ' ' + CAST(BillNo as Varchar(20))BillCodeNo FROM IncentiveSecondary WHERE FilterName = 'ITEM' AND FilterValue = '" + strItemName + "'"
        //                  + " UNION ALL SELECT BillCode + ' ' + CAST(BillNo as Varchar(20))BillCodeNo FROM IncentiveSecondary WHERE FilterName = 'BARCODE' AND FilterValue = '" + strBarCode + "'"
        //                  + " ) OR ID.IncentiveOn = 'MRP' AND FilterByMRP = 1 and(StartMRP <=" + ConvertObjectToDouble(row.Cells["mrp"].Value) + " and EndMRP>=" + ConvertObjectToDouble(row.Cells["mrp"].Value) + ")) and(FilterByDate = 0 OR(StartDate <= '" + _date.ToString("MM/dd/yyyy") + "' and EndDate>='" + _date.ToString("MM/dd/yyyy") + "'))  ORDER BY IncentivePer desc";

        //        double dDisPer = 0, dMRP = 0, dRate = 0;
        //        DataSet DS = GetDataSet(strQuery);
        //        DataTable dt = DS.Tables[0];
        //        if (dt.Rows.Count > 0)
        //        {
        //            DataRow _row = dt.Rows[0];

        //            row.Cells["mrp"].Value = dMRP = ConvertObjectToDouble(_row["SaleMRP"]);
        //            row.Cells["disPer"].Value = "-" + _row["SaleDis"];
        //            row.Cells["rate"].Value = dRate = ConvertObjectToDouble(_row["SaleRate"]);
        //            //row.Cells["brandName"].Value = _row["BrandName"];
        //            row.Cells["styleName"].Value = _row["DesignName"];
        //            row.Cells["unitName"].Value = _row["UnitName"];

        //            dDisPer = ConvertObjectToDouble(_row["SaleDis"]);
        //            if (dDisPer == 0 && dRate != 0 && dMRP != 0)
        //            {
        //                dDisPer = 100 - ((dRate / dMRP) * 100.00);
        //                row.Cells["disPer"].Value = dDisPer;
        //            }
        //        }
        //        row.Cells["smInc"].Value = "";
        //        if (DS.Tables[1].Rows.Count > 0)
        //        {
        //            DataRow ro = DS.Tables[1].Rows[0];
        //            row.Cells["smInc"].Value = ro["IncAmt"];
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //    }
        //}


   

        public DataTable CreateOnlineSalesBookRetailDataTable_Remote(string strSerialCode, string strSerialNo, ref DataTable _dtGST, ref bool _bIGST, ref DataTable _dtSalesAmt, bool _dscVerified, bool _bPrint, string strCompanyCode)
        {
            DataTable table = new DataTable();
            try
            {
                CreateDataTableColumn(ref table);
                _dtSalesAmt = new DataTable();
                _dtSalesAmt.Columns.Add("AccountName", typeof(String));
                _dtSalesAmt.Columns.Add("Amount", typeof(String));

                string strQuery = " Declare @BillCode nvarchar(250),@BillNo bigint; Select @BillCode=BillCOde,@BillNo=BillNo from SalesBook Where AttachedBill='" + strSerialCode + " " + strSerialNo + "' "
                                + " Select TOP 1 * from (Select 0 as ID, CD.FullCompanyName,'H.O. Address : '+TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph.  : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+ (CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD Where Other in (Select CompanyName from CompanySetting Where SBillCode=@BillCode) Union ALL  Select 1 as ID, CD.FullCompanyName,'H.O. Address : '+CD.TINNo as HOAddress,'Place of Supply : '+(CD.StateName+' ('+(Select Top 1 StateCode from StateMaster SM Where SM.StateName=CD.StateName)+')')PlaceOfSupply,'Billing Address : '+(Address+'\n'+CD.StateName+'-'+CAST(CD.PinCode as varchar))Address, ('Ph. : '+CD.STDNo+'-'+CD.PhoneNo +', Email ID : '+CD.EmailId+(CASE WHEN ISNULL(CD.Website,'')!='' then ', Website : '+ISNULL(CD.Website,'') else '' end)) PhoneNo,'' as CompanyTIN,CD.StateName,CD.GSTNo,CD.PANNo,CD.SignaturePath,CD.BankName,CD.BranchName,CD.AccountName,CD.IFSCCode,CD.CINNumber,CD.SignatureImage,CD.HeaderImage,CD.BrandLogo from CompanyDetails CD )_CD "
                                + " Select SM.AccountNo,SR.SalePartyID,SR.SubPartyID, SM.Name as SalesParty,SR.TransportName,SR.Station,SR.PvtMarka as Marka,SR.Remark,WaybillNo,'' as VehicleNo,LRTime as TimeOfSupply,NoOfCase as OtherField,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address, SM.State,SM.GSTNo,SM.GroupII as DealerType,(SM.MobileNo + ' ' + SM.PhoneNo)MobileNo,SM.PANNumber,ISNULL(SM1.Name, '') as SubPartyName,(SM1.Address + ', ' + SM1.Station + ' ' + SM.State + '-')SAddress, SM1.State SState, SM1.GSTNo SGSTNo, SM1.GroupII as SDealerType,(SM1.MobileNo + ' ' + ISNULL(SM1.PhoneNo, ''))SMobileNo,SM1.PANNumber as SPANNumber ,(SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) BillNo,(Convert(nvarchar, SR.Date, 103))Date,LRNumber, (CASE WHEN SR.LrNumber!='' then CONVERT(nvarchar,SR.LrDate,103) else '' end) LRDate,(Select TOP 1 StateCode from StateMaster WHere StateName = SM.State) BStateCode,(Select TOP 1 StateCode from StateMaster WHere StateName = SM1.State) SStateCode,SUBSTRING(SR.PackerName,CHARINDEX(' ',SR.PackerName,0)+1,LEN(SR.PackerName)) PackerName,STM.TaxationType,STM.TaxIncluded as TaxType,(STM.IGSTTaxRate + STM.SGSTTaxRate)TaxRate,STM.Region,SR.Description_3 from SalesBook SR  inner join SupplierMaster SM On SR.SalePartyID = (SM.AreaCode + CAST(SM.AccountNo as nvarchar))   left join SupplierMaster SM1 On SR.SubPartyID = (SM1.AreaCode + CAST(SM1.AccountNo as nvarchar)) and SM1.GroupName = 'SUB PARTY' left join SaleTypeMaster STM on SR.SalesType = STM.TaxName and STM.SaleType = 'SALES'  Where SR.BillCode = @BillCode and SR.BillNo = @BillNo "

                                + " Select *,CAST((CASE WHEN Qty> 0 then ROUND((Amount / Qty), 2) else 0 end) as Numeric(18,2)) Rate,0 NetDisAmt,0 as Cut,0 as MTR,0 as Fold from ( Select *, ROUND((((TotalAmt) * TaxRate) / 100.00), 2) TaxAmt, ROUND(((Amount * TaxRate) / 100.00), 2) GTaxAmt  from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, TaxRate, Qty, TaxType, UnitName, Amount, DisStatus,DAmt,(ROUND((CASE WHEN TaxType = 1 and Qty>0 then((DAmt * 100) / (100 + TaxRate)) else (DAmt)end), 2)) TotalAmt from( Select ID, SerialNo, InvoiceNo, ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, Amount,ROUND((Amount *(100+ DisStatus)/100),2)DAmt,CAST(DisStatus as numeric(10,0)) DisStatus, Quantity as Qty, TaxRate, TaxType, UnitName from(  Select ID, SerialNo, InvoiceNo, LTRIM(RTRIM(REPLACE(REPLACE(ItemName, HSNCode, ''), ':', ''))) ItemName,Variant1,Variant2,Variant3,Variant4,Variant5, HSNCode, PurchaseParty, (Quantity)Quantity, UnitName, Amount, DisStatus, TaxRate, TaxType from( "
                                + " Select SE.SID as ID, (SR.BillCode + ' ' + CAST(SR.BillNo as nvarchar)) SerialNo, '' as InvoiceNo, SE.ItemName,SE.Variant1,SE.Variant2,SE.Variant3,SE.Variant4,SE.Variant5, GM.HSNCode, '' PurchaseParty, Qty as Quantity, (Select TOP 1 UnitName from Items Where ItemName = SE.ItemName) UnitName, ((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty)Amount, SDisPer as DisStatus, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo   left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Outer APPLY (Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM  Where SR.BillCode = @BillCode and SR.BillNo = @BillNo and SE.Amount > 0 )_Sales UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'PACKING' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.PackingAmt Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and SR.PackingAmt > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'POSTAGE' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.PostageAmt Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and SR.PostageAmt > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'GREENTAX' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName,SR.GreenTax Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName and SMN.SaleType = 'SALES' Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and SR.GreenTax > 0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'INSURANCECHARGES' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, (CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and SR.DisAmt !=0 UNION ALL "
                                + " Select 0 as ID,'' as SerialNo,'' as InvoiceNo,'OTHERCHARGES' as ItemName,'' as Variant1,'' as Variant2,'' as Variant3,'' as Variant4,'' as Variant5,'' HSNCode,'' as PurchaseParty,0 as Quantity,'' as UnitName, (CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)) Amount,0 DisStatus,SR.TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and SR.OtherAmt != 0 )_Sales )Sales)_Sales)FinalSales Order by ID asc "

                                + " Select HSNCode,Qty,Amount,TaxRate,ROUND(((Amount * TaxRate) / 100.00), 2) TaxAmt from (Select HSNCode,(CASE WHEN Qty = 0 then '' else CAST(Qty as nvarchar) end)Qty,TaxRate,ROUND((CASE WHEN TaxType = 1 and Qty > 0 then((Amount * 100) / (100 + TaxRate)) else Amount end),2) Amount from (Select HSNCode, SUM(Amount)Amount, SUM(Quantity) Qty, TaxRate, TaxType from(  "
                                + " Select(GM.Other + ' : ' + GM.HSNCode) as HSNCode, Qty as Quantity, ROUND((((SE.MRP-((SE.MRP*ISNULL(SR.SpecialDscPer,0))/100.00))*SE.Qty) * (100.00 + SDisPer) / 100.00), 2) Amount, GM.TaxRate, SMN.TaxIncluded as TaxType from SalesBook SR inner join SalesBookSecondary SE on SR.BillCode = SE.BillCode and SR.BillNo = SE.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))> _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((SE.Rate * 100) / (100 + TaxRate)) else SE.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 - (SR.DisPer)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName) as GM Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and SE.Amount > 0  Union All "
                                + " Select ISNULL((Select Top 1 'SAC : ' + SACCode from CompanyDetails Where SACCode != ''),'') as HSNCode,0 as Quantity,ROUND(PackingAmt + GreenTax+PostageAmt + ((CAST((SR.OtherSign + CAST(SR.OtherAmt as varchar)) as Money)+CAST((SR.Description + CAST(SR.DisAmt as varchar)) as Money))), 2) Amount,TaxPer as TaxRate,SMN.TaxIncluded as TaxType from SalesBook SR  left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Where SR.BillCode = @BillCode and SR.BillNo =  @BillNo and (PackingAmt + GreenTax+PostageAmt +SR.OtherAmt+SR.DisAmt) != 0 )_Sales Group by HSNCode, TaxRate, TaxType )_Sales Where Amount != 0 )_Sales Order by HSNCode asc,TaxRate desc "
                                + " Select TitleOfDocument,SubTitle,Jurisdiction,GeneratedBy,Declaration from PrintingConfig ";

                DataSet ds = SearchDataOther.GetDataSet(strQuery, strCompanyCode);

                if (ds.Tables.Count > 1)
                {
                    DataTable dt = ds.Tables[0];
                    DataTable _dtSupplier = ds.Tables[1];
                    DataTable dtItemDetail = ds.Tables[2];
                    DataTable dtGST = ds.Tables[3];
                    DataTable dtCompany = ds.Tables[4];

                    if (dt.Rows.Count > 0 && dtItemDetail.Rows.Count > 0)
                    {
                        DataRow dRow = dt.Rows[0];
                        DataRow _dRow = _dtSupplier.Rows[0];
                        DataRow rowCompany = null;
                        if (dtCompany.Rows.Count > 0)
                            rowCompany = dtCompany.Rows[0];
                        else
                            rowCompany = dtCompany.NewRow();

                        string strCompanyName = "", strComapnyAddress = "", strHOAddress = "", strPlaceOfSupply = "", strCompanyEmail = "", strBuyerName = "", strBuyerAddress = "", strBuyerSP = "", strBuyerEmail = "", strAgentName = "", strItemName = "", strStateName = "", strTaxType = "EXCLUDED", strBuyerGSTNo = "", strBStateCode = "", strBuyerPANNo = "", strPartyBankAccountNo = "", strPartyIFSCCode = "";
                        string strSubPartyName = "", strSAddress = "", strSState = "", strSMobileNo = "", strSGST = "", strSStateCode = "", strBankName = "", strBranchName = "", strAccountNo = "", strIFSCCode = "", strShippedPANNo = "", strDealerType = "", strSDealerType = "", strPackerName = "", strSalesPartyID = "", strSubPartyID = "", _strBranchName = "", strReferance = "";

                        double dTTaxAmt = 0;

                        strBankName = Convert.ToString(dRow["BankName"]);
                        _strBranchName = Convert.ToString(dRow["BranchName"]);
                        strAccountNo = Convert.ToString(dRow["AccountName"]);
                        strIFSCCode = Convert.ToString(dRow["IFSCCode"]);

                        strStateName = Convert.ToString(dRow["StateName"]);
                        strBuyerSP = Convert.ToString(_dRow["State"]);
                        strPackerName = Convert.ToString(_dRow["PackerName"]);

                        strSalesPartyID = Convert.ToString(_dRow["SalePartyID"]);
                        strSubPartyID = Convert.ToString(_dRow["SubPartyID"]);
                        strReferance = Convert.ToString(_dRow["Description_3"]);

                        strPartyBankAccountNo = "SASUSP" + ConvertObjectToDoubleStatic(_dRow["AccountNo"]).ToString("000000");
                        strPartyIFSCCode = "ICIC0000106";
                        strBranchName = "DELHI";

                        if (strPackerName == "")
                            strPackerName = "DIRECT";

                        string strTaxationType = Convert.ToString(_dRow["TaxationType"]);
                        if (Convert.ToString(_dRow["Region"]) == "LOCAL")
                            _bIGST = false;
                        else
                            _bIGST = true;

                        if (strTaxationType == "ITEMWISE")
                            CreateGSTDataTable(ref _dtGST, dtGST, _bIGST, strStateName, strBuyerSP, ref dTTaxAmt);

                        if (MainPage.pCompanyName)
                            strCompanyName = Convert.ToString(dRow["FullCompanyName"]);
                        if (MainPage.pCompanyAddress)
                        {
                            strComapnyAddress = Convert.ToString(dRow["Address"]);
                            strCompanyEmail = Convert.ToString(dRow["PhoneNo"]);
                            strHOAddress = Convert.ToString(dRow["HOAddress"]);
                        }
                        strPlaceOfSupply = Convert.ToString(dRow["PlaceOfSupply"]);

                        //if (MainPage.pBuyerAddress)
                        {
                            strBuyerAddress = Convert.ToString(_dRow["Address"]).Replace("\n", ", ");
                            strBuyerEmail = Convert.ToString(_dRow["MobileNo"]);
                        }

                        if (strComapnyAddress.Length > 90)
                            strComapnyAddress = strComapnyAddress.Replace("\n", ", ");
                        if (strComapnyAddress.Contains("CHANDNI CHOWK"))
                            strComapnyAddress = strComapnyAddress.Replace("CHANDNI CHOWK", "\nCHANDNI CHOWK");

                        // if (MainPage.pBuyerName)
                        {
                            strBuyerName = Convert.ToString(_dRow["SalesParty"]);
                            strSubPartyName = Convert.ToString(_dRow["SubPartyName"]);
                            strBuyerGSTNo = Convert.ToString(_dRow["GSTNo"]);
                            strBStateCode = Convert.ToString(_dRow["BStateCode"]);
                            strBuyerPANNo = Convert.ToString(_dRow["PANNumber"]);
                            strDealerType = Convert.ToString(_dRow["DealerType"]);
                            if (strSubPartyName == "")
                            {
                                strSubPartyName = strBuyerName;
                                strSAddress = strBuyerAddress;
                                strSMobileNo = strBuyerEmail;
                                strSGST = strBuyerGSTNo;
                                strSState = strBuyerSP;
                                strSStateCode = strBStateCode;
                                strShippedPANNo = strBuyerPANNo;
                                strSDealerType = strDealerType;
                                strSubPartyID = strSalesPartyID;
                            }
                            else
                            {
                                strSAddress = Convert.ToString(_dRow["SAddress"]).Replace("\n", ", ");
                                strSMobileNo = Convert.ToString(_dRow["SMobileNo"]);
                                strSGST = Convert.ToString(_dRow["SGSTNo"]);
                                strSState = Convert.ToString(_dRow["SState"]);
                                strSStateCode = Convert.ToString(_dRow["SStateCode"]);
                                strShippedPANNo = Convert.ToString(_dRow["SPANNumber"]);
                                strSDealerType = Convert.ToString(_dRow["DealerType"]);
                            }
                        }

                        int rowIndex = 1;
                        double dQty = 0, dRate = 0, dTQty = 0, dTAmt = 0, dTaxPer = 0, dSAmount = 0, dDisPer = 0, dSaleTypeTaxPer = 0;

                        if (Convert.ToString(_dRow["TaxType"]) != "")
                        {
                            if (Convert.ToBoolean(_dRow["TaxType"]))
                                strTaxType = "INCLUDED";
                        }
                        if (strTaxationType == "VOUCHERWISE" || strTaxationType == "REVERSECHARGE")
                            dSaleTypeTaxPer = ConvertObjectToDouble(_dRow["TaxRate"]);
                        string strVariant1 = "", strVariant2 = "", strVariant3 = "", strVariant4 = "", strVariant5 = "";
                        foreach (DataRow rows in dtItemDetail.Rows)
                        {
                            if (Convert.ToString(rows["UnitName"]) != "")
                            {
                                DataRow row = table.NewRow();
                                row["CompanyName"] = strCompanyName;
                                row["CompanyAddress"] = strComapnyAddress;
                                row["CompanyEMail"] = strCompanyEmail;
                                row["SubTitle"] = rowCompany["SubTitle"];
                                row["CompanyTIN"] = strHOAddress;
                                row["CompanyCST"] = strPlaceOfSupply;
                                row["SupplierRef"] = _dRow["Marka"];
                                row["VehicleNo"] = _dRow["VehicleNo"];
                                row["WayBillNo"] = _dRow["WayBillNo"];
                                row["Other"] = _dRow["OtherField"];

                                if ((MainPage.strCompanyName.Contains("SARAOGI") || MainPage.strCompanyName.Contains("STYLO")) && MainPage.strSoftwareType == "AGENT")
                                {
                                    row["BuyerName"] = strSalesPartyID + " " + strBuyerName;
                                    row["ShippedName"] = strSubPartyID + " " + strSubPartyName;
                                }
                                else
                                {
                                    row["BuyerName"] = strBuyerName;
                                    row["ShippedName"] = strSubPartyName;
                                }
                                row["BuyerAddress"] = strBuyerAddress;
                                row["BuyerStatePin"] = strBuyerSP;
                                row["BilledStateCode"] = strBStateCode;
                                row["BuyerEmail"] = strBuyerEmail;
                                row["BilledPANNo"] = strBuyerPANNo;
                                row["BuyerDealerType"] = strDealerType;


                                row["ShippedAddress"] = strSAddress;
                                row["ShippedState"] = strSState;
                                row["ShippedStateCode"] = strSStateCode;
                                row["ShippedEmail"] = strSMobileNo;
                                row["ShippedPANNo"] = strShippedPANNo;
                                row["ShippedDealerType"] = strSDealerType;

                                if (strBuyerGSTNo != "")
                                    row["BilledGSTNo"] = strBuyerGSTNo;
                                if (strSGST != "")
                                    row["ShippedGSTNo"] = strSGST;

                                row["OtherRef"] = strAgentName;
                                row["GeneratedBy"] = rowCompany["GeneratedBy"];// MainPage.strGeneratedBy;
                                row["Jursdiction"] = rowCompany["Jurisdiction"];// MainPage.strJurisdiction;
                                row["InvoiceNo"] = _dRow["BillNo"];
                                row["InvoiceDate"] = _dRow["Date"];
                                row["Transport"] = _dRow["TransportName"];
                                row["Destination"] = _dRow["Station"];
                                row["TimeofSupply"] = _dRow["TimeOfSupply"];
                                row["TermsOfDelivery"] = _dRow["Remark"];

                                if (Convert.ToString(dRow["GSTNo"]) != "")
                                    row["CompanyGSTNo"] = "GSTIN : " + dRow["GSTNo"];
                                if (Convert.ToString(dRow["CINNumber"]) != "")
                                    row["CompanyStatePin"] = "CIN No : " + dRow["CINNumber"];

                                if (Convert.ToString(_dRow["LrNumber"]) != "")
                                {
                                    row["LRNo"] = _dRow["LrNumber"];
                                    row["LRDate"] = _dRow["LRDate"];
                                }

                                strVariant1 = Convert.ToString(rows["Variant1"]);
                                strVariant2 = Convert.ToString(rows["Variant2"]);
                                //strVariant3 = Convert.ToString(rows["Variant3"]);
                                strVariant4 = Convert.ToString(rows["Variant4"]);
                                //strVariant5 = Convert.ToString(rows["Variant5"]);
                                strItemName = Convert.ToString(rows["ItemName"]);

                                if (strVariant1 != "")
                                    strItemName += " " + strVariant1;
                                if (strVariant2 != "")
                                    strItemName += " " + strVariant2;
                                if (strVariant3 != "")
                                    strItemName += " " + strVariant3;
                                if (strVariant4 != "")
                                    strItemName += " (" + strVariant4 + ")";
                                if (strVariant5 != "")
                                    strItemName += " " + strVariant5;

                                row["ItemName"] = strItemName;
                                row["HeaderName"] = rowCompany["TitleOfDocument"];// MainPage.strTitleofDocument;
                                row["SNo"] = rows["SerialNo"];
                                row["GeneratedBy"] = rowIndex + ".";
                                row["HSNCode"] = rows["HSNCode"];


                                dDisPer = ConvertObjectToDouble(rows["DisStatus"]);

                                dTQty += dQty = ConvertObjectToDouble(rows["Qty"]);
                                dSAmount = ConvertObjectToDouble(rows["TotalAmt"]);
                                dTaxPer = ConvertObjectToDouble(rows["TaxRate"]);
                                dRate = ConvertObjectToDouble(rows["Rate"]);

                                dTAmt += dSAmount;

                                row["DisPer"] = rows["DisStatus"] + "%";

                                if (MainPage.pQty)
                                    row["Qty"] = dQty.ToString("0") + " " + rows["UnitName"];

                                if (strTaxationType == "ITEMWISE")
                                {
                                    if (_bIGST)
                                        row["IGSTPer"] = dTaxPer + "%";
                                    else
                                    {
                                        row["CGSTPer"] = dTaxPer / 2 + "%";
                                        row["SGSTPer"] = dTaxPer / 2 + "%";
                                    }

                                }
                                else
                                    row["IGSTPer"] = "----";

                                //if (MainPage.pAmount)
                                {
                                    row["UOM"] = (dSAmount / dQty).ToString("N2", MainPage.indianCurancy);
                                    row["Rate"] = dRate.ToString("N2", MainPage.indianCurancy);
                                    row["Amount"] = dSAmount.ToString("N2", MainPage.indianCurancy);
                                }
                                row["Jursdiction"] = rowCompany["GeneratedBy"];// MainPage.strGeneratedBy;
                                row["AuthSignatory"] = "PRINTED BY : " + MainPage.strLoginName + ", Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                row["FormReceive"] = "CHECKED BY :                    PACKED BY : " + strPackerName;
                                row["EOE"] = "continued..";

                                if (!_bPrint || !strSerialCode.Contains("DLS"))
                                {
                                    row["HeaderImage"] = dRow["HeaderImage"];
                                    row["BrandLogo"] = dRow["BrandLogo"];
                                    row["SignatureImage"] = dRow["SignatureImage"];
                                }

                                table.Rows.Add(row);

                                rowIndex++;
                            }
                        }

                        if (table.Rows.Count > 0)
                        {
                            if (MainPage.pAmount)
                            {
                                dTAmt = AddGSTNetAmount(dTAmt, _dtGST, dTTaxAmt, _bIGST, strTaxType, ref _dtSalesAmt, dtItemDetail, strTaxationType, dSaleTypeTaxPer);
                            }

                            int count = _dtSalesAmt.Rows.Count;
                            if (_dtGST != null)
                            {
                                if (count < _dtGST.Rows.Count)
                                    count = _dtGST.Rows.Count;
                            }

                            if (strReferance != "")
                                strReferance = "Ref. Bill : " + strReferance + ", ";

                            DataRow row = table.Rows[table.Rows.Count - 1];

                            dTAmt = Math.Round(dTAmt, 0);
                            row["EOE"] = "E. & O.E.";
                            row["OrderDate"] = "Authorised Signatory";
                            row["Continue"] = "`";
                            if (MainPage.pQty)
                                row["TotalQty"] = strReferance + "Total Qty : " + dTQty + ",   Grand Total :";
                            if (MainPage.pAmount)
                                row["TotalAmt"] = dTAmt.ToString("N2", MainPage.indianCurancy);

                            if (MainPage.strDeclaration != "")
                            {
                                row["DeclarationHeader"] = "Term & Conditions :- ";
                                row["Declaration"] = rowCompany["Declaration"];// MainPage.strDeclaration;
                            }
                            if (MainPage.pCompanyName)
                                row["ForCompany"] = "FOR " + strCompanyName;
                            row["AmountInWordHeading"] = "Amt (in words) :";
                            row["SignaturePath"] = ConvertBitmap(Convert.ToString(dRow["SignaturePath"]));

                            row["ForCompany"] = "FOR " + strCompanyName;

                            row["HeaderImage"] = dRow["HeaderImage"];
                            row["BrandLogo"] = dRow["BrandLogo"];
                            row["SignatureImage"] = dRow["SignatureImage"];

                            if (MainPage.pAmount)
                            {
                                ChangeCurrencyToWord objCurrency = new ChangeCurrencyToWord();
                                row["AmountInWord"] = objCurrency.changeCurrencyToWords(dTAmt);
                            }

                            if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                            {
                                if (strPartyBankAccountNo != "")
                                {
                                    //row["BankName"] = "Bank Name : " + strBankName;
                                    //row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "                 Branch Name : " + strBranchName;
                                    //row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;
                                    //row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";

                                    row["BankName"] = "Bank Name : " + strBankName;
                                    row["BranchName"] = "IFSC Code : " + strPartyIFSCCode + "      Branch Name : " + strBranchName + "                              UPI : SSSPLTD285@ICICI";
                                    row["AccountNo"] = "Account No. : " + strPartyBankAccountNo;// strAccountNo;
                                                                                                // row["IFSCCode"] = "(This account no. is only for you, Each party have their unique account no. & this a/c no. is valid only for NEFT/RTGS not for IMPS/Cheque Deposit.)";
                                    row["IFSCCode"] = "SCAN TO PAY";
                                }
                            }
                            else if (strAccountNo != "" && strBankName != "")
                            {
                                row["BankName"] = "Bank Name : " + strBankName;
                                row["BranchName"] = "Branch Name : " + strBranchName;
                                row["AccountNo"] = "Account No. : " + strAccountNo;
                                row["IFSCCode"] = "IFSC Code : " + strIFSCCode;
                            }
                            if (_dscVerified && MainPage.strSoftwareType == "AGENT")
                            {
                                row["SignatureHeader"] = "Signature valid";
                                row["SignatureText"] = "Digitally signed by DS SARAOGI SUPER SALES PRIVATE LIMITED 2"
                                                     + "\nDate: " + MainPage.currentDate.ToString("yyyy.MM.dd") + " " + DateTime.Now.ToString("HH:mm:ss") + " +05:30"
                                                     + "\nLocation: IN";
                            }
                            else
                            {
                                row["SignatureHeader"] = row["SignatureText"] = "";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string[] strReport = { "Exception occurred in Preview in Sales Book", ex.Message };
                CreateErrorReports(strReport);
            }
            return table;
        }


        #endregion


        public DataTable GetSaleTypeDetails(string strSaleType, string strType)
        {
            DataTable dt = GetDataTable("Select *,(IGSTTaxRate+SGSTTaxRate) TaxRate,ISNULL((dbo.GetFullName(TaxAccountIGST)),'') IGSTName,ISNULL((dbo.GetFullName(TaxAccountSGST)),'') SGSTName from SaleTypeMaster Where SaleType='" + strType + "' and TaxName='" + strSaleType + "' ");
            return dt;
        }


        public byte[] ConvertBitmap(string strPath)
        {
            byte[] m_Bitmap = null;
            try
            {
                strPath = MainPage.strServerPath + "\\SIGNATURE\\OWNER.JPG";
                FileStream fs = new FileStream(strPath, FileMode.Open, FileAccess.Read, FileShare.Read);
                BinaryReader br = new BinaryReader(fs);
                int length = (int)br.BaseStream.Length;
                m_Bitmap = new byte[length];
                m_Bitmap = br.ReadBytes(length);
                br.Close();
                fs.Close();
            }
            catch
            {
            }
            return m_Bitmap;


        }

        protected internal int RoundOffNearest(double dValue, int v)
        {
            if (dValue != 0 && v != 0)
                return (int)Math.Round(dValue / v) * v;
            else
                return 0;
        }

        protected internal int SavePurchaseSetup(string strData1, string strData2, string strData3, string strData4, string strData5, string strData6, string strData7, string strData8, string strData9, string strData10, string strOther1, string strOther2, string strOther3)
        {
            int _count = 0;
            try
            {
                string strQuery = " if not exists (Select CompanyID from [Purchase_Setup] Where CompanyID Like('%" + MainPage.strDataBaseFile + "')) begin  "
                                + " INSERT INTO [dbo].[Purchase_Setup] ([CompanyID],[Data1],[Data2],[Data3],[Data4],[Data5],[Data6],[Data7],[Data8],[Data9],[Data10],[Other1],[Other2],[Other3],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus])  "
                                + " Values('" + MainPage.strDataBaseFile + "','" + strData1 + "','" + strData2 + "','" + strData3 + "','" + strData4 + "','" + strData5 + "','" + strData6 + "','" + strData7 + "','" + strData8 + "','" + strData9 + "','" + strData10 + "','" + strOther1 + "','" + strOther2 + "','" + strOther3 + "','" + MainPage.strLoginName + "','',1,0) end else "
                                + " begin Update [dbo].[Purchase_Setup] Set [Data1]='" + strData1 + "',[Data2]='" + strData2 + "',[Data3]='" + strData3 + "',[Data4]='" + strData4 + "',[Data5]='" + strData5 + "',[Data6]='" + strData6 + "',[Data7]='" + strData7 + "',[Data8]='" + strData8 + "',[Data9]='" + strData9 + "',[Data10]='" + strData10 + "',[Other1]='" + strOther1 + "',[Other2]='" + strOther2 + "',[Other3]='" + strOther3 + "',[UpdatedBy]='" + MainPage.strLoginName + "',[UpdateStatus]=1 Where CompanyID Like('%" + MainPage.strDataBaseFile + "') end ";

                _count = ExecuteMyNonQuery(strQuery);
            }
            catch (Exception ex) { MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
            return _count;
        }

        public int MergePartyName(string strFirstParty, string strSecondParty, string strFinalParty, string strGroupName, bool _mergeType)
        {
            int _count = 0;
            string strQuery = "", strOldParty = "";

            strOldParty = " '" + strFirstParty + "','" + strSecondParty + "'";
            if (strGroupName == "SUNDRY DEBTORS" || strGroupName == "SUNDRY CREDITOR" || strGroupName == "OTHER PARTY")
            {
                strQuery += " Declare @Amt Money,@AmtStatus nvarchar(250);Set  @AmtStatus='DEBIT'; Select @Amt=Amount from (Select SUM(Amt)Amount from ( "
                     + " Select ISNULL(SUM(CAST(Amount as Money)), 0)Amt from BalanceAmount Where AccountStatus = 'OPENING' and Status = 'DEBIT' and AccountID in ('" + strFirstParty + "','" + strSecondParty + "','" + strFinalParty + "') Union All "
                     + " Select - ISNULL(SUM(CAST(Amount as Money)), 0)Amt from BalanceAmount Where AccountStatus = 'OPENING' and Status = 'CREDIT' and AccountID in ('" + strFirstParty + "','" + strSecondParty + "','" + strFinalParty + "'))Balance)Balance "
                     + " if (@Amt < 0) begin Set @AmtStatus = 'CREDIT'; Set @Amt = ABS(@Amt); end";
            }
            if (strGroupName == "SUNDRY DEBTORS")
            {
                strQuery += "  Update OrderBooking set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update GoodsReceive set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update SalesBook set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update SalesRecord set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update SaleServiceBook set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update PurchaseRecord set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update GoodsReturned set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update SaleReturn set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ")"
                            + "  Update PurchaseReturnDetails set SalePartyID='" + strFinalParty + "' where  SalePartyID in (" + strOldParty + ") "
                            + "  Update BiltyDetail set PartyName ='" + strFinalParty + "'  where  PartyName in (" + strOldParty + ") ";
            }
            else if (strGroupName == "SUNDRY CREDITOR")
            {
                strQuery += " Update OrderBooking set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ")"
                         + "  Update GoodsReceive set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ")"
                         + "  Update PurchaseBook set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ")"
                         + "  Update SalesEntry set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ")"
                         + "  Update PurchaseRecord set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ")"
                         + "  Update GoodsReturned set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ") "
                         + "  Update SaleReturnDetails set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ") "
                         + "  Update PurchaseReturn set PurchasePartyID='" + strFinalParty + "' where  PurchasePartyID in (" + strOldParty + ") "
                         + "  Update PaymentRequest Set PartyID='" + strFinalParty + "' WHere PartyID in (" + strOldParty + ") ";
            }
            else if (strGroupName == "STATION")
            {
                strQuery += " Update BiltyDetail set StationName ='" + strFinalParty + "' where StationName in (" + strOldParty + ") "
                    + " Update ForwardingRecord set Station='" + strFinalParty + "' where Station in (" + strOldParty + ") "
                    + " Update OrderBooking set Station ='" + strFinalParty + "' where Station in (" + strOldParty + ") "
                    + " Update OrderBooking set Booking ='" + strFinalParty + "' where Booking in (" + strOldParty + ") "
                    + " Update SalesRecord set Station='" + strFinalParty + "' where Station in (" + strOldParty + ") "
                    + " Update SupplierMaster set Station='" + strFinalParty + "' where Station in (" + strOldParty + ") "
                    + " Update SupplierMaster set BookingStation='" + strFinalParty + "' where BookingStation in (" + strOldParty + ") "
                    + " Delete from Station where StationName in (" + strOldParty + ") and StationName !='" + strFinalParty + "' ";

            }
            else if (strGroupName == "TRANSPORT")
            {
                strQuery += " Update BiltyDetail set TransportName ='" + strFinalParty + "' where TransportName in (" + strOldParty + ") "
                      + " Update ForwardingRecord set Transport='" + strFinalParty + "' where Transport in (" + strOldParty + ") "
                      + " Update OrderBooking set Transport='" + strFinalParty + "' where Transport in (" + strOldParty + ") "
                      + " Update SalesRecord set Transport='" + strFinalParty + "' where Transport in (" + strOldParty + ") "
                      + " Update SupplierMaster set Transport='" + strFinalParty + "' where Transport in (" + strOldParty + ") "
                      + " Delete from Transport where TransportName in (" + strOldParty + ") and TransportName !='" + strFinalParty + "' ";

            }

            if (strGroupName == "SUNDRY DEBTORS" || strGroupName == "SUNDRY CREDITOR" || strGroupName == "OTHER PARTY")
            {
                strQuery += " Update BalanceAmount set AccountID='" + strFinalParty + "' where  AccountID in (" + strOldParty + ") and AccountStatus != 'OPENING' "
                        + " Update BalanceAmount set AccountStatusID='" + strFinalParty + "' where  AccountStatusID in (" + strOldParty + ") "
                        + " Update JournalAccount set DebitPartyID='" + strFinalParty + "' where  DebitPartyID in (" + strOldParty + ") "
                        + " Update JournalAccount set CreditPartyID='" + strFinalParty + "' where  CreditPartyID in (" + strOldParty + ") "
                        + " Update ChequeDetails set DebitAccountID='" + strFinalParty + "' where  DebitAccountID in (" + strOldParty + ") "
                        + " Update ChequeDetails set CreditAccountID='" + strFinalParty + "' where  CreditAccountID in (" + strOldParty + ") "
                        + " Update JournalVoucherDetails set PartyID='" + strFinalParty + "' where  PartyID in (" + strOldParty + ") "
                        + " Update JournalVoucherDetails set AccountID='" + strFinalParty + "' where  AccountID in (" + strOldParty + ") "
                        + " Update SupplierMaster set OpeningBal=@Amt, Status=@AmtStatus,UpdateStatus=1 where (AreaCode+Cast(AccountNo as varchar)) = '" + strFinalParty + "'"
                        + " Update BalanceAmount set Amount = @Amt,Description='FORWARDED', Status=@AmtStatus where AccountID= '" + strFinalParty + "' and AccountStatus='OPENING'"
                        + " Delete from BalanceAmount Where AccountID in (" + strOldParty + ") and AccountStatus='OPENING' and  AccountID !='" + strFinalParty + "'"
                        + " Delete from SupplierMaster where (AreaCode+Cast(AccountNo as varchar)) in (" + strOldParty + ") and (AreaCode+Cast(AccountNo as varchar)) !='" + strFinalParty + "' "
                        + " Delete from SupplierBankDetails where (AreaCode+Cast(AccountNo as varchar)) in (" + strOldParty + ") and (AreaCode+Cast(AccountNo as varchar)) !='" + strFinalParty + "' "
                        + " Delete from SupplierBrandDetails where (AreaCode+Cast(AccountNo as varchar)) in (" + strOldParty + ") and (AreaCode+Cast(AccountNo as varchar)) !='" + strFinalParty + "' ";

            }

            if (_mergeType)
            {
                strQuery += " INSERT INTO [dbo].[MergePartyDetails] ([FirstParty],[SecondParty],[FinalParty],[GroupName],[CreatedBy],[Date],[InsertStatus]) VALUES "
                         + " ('" + strFirstParty + "','" + strSecondParty + "','" + strFinalParty + "','" + strGroupName + "','" + MainPage.strLoginName + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),1) ";
            }
            //  strQuery += " end ";

            _count = ExecuteMyQuery(strQuery);
            if (_count > 0 && MainPage.strOnlineDataBaseName != "")
                CreateDeleteQuery(strQuery, _mergeType);
            return _count;

        }

        public int MergeItemGroupName(string strFirstName, string strSecondName, string strFinalName, string strGroupName, bool _mergeType)
        {
            int _count = 0;
            string strQuery = "", strOldName = "";
            strOldName = " '" + strFirstName + "','" + strSecondName + "'";
            if (strGroupName == "GROUPNAME")
            {
                strQuery += " if exists ( Select * from (Select TaxCategoryName from ItemGroupMaster Where  GroupName in ('" + strFirstName + "','" + strSecondName + "','" + strFinalName + "') group by TaxCategoryName)_Item Group by TaxCategoryName having(Count(*)=1)) begin "
                         + " Update [dbo].[Items] set GroupName='" + strFinalName + "' Where GroupName in (" + strOldName + ") "
                         + " Delete from [dbo].[ItemGroupMaster] Where GroupName in (" + strOldName + ") and GroupName not in ('" + strFinalName + "') end ";
            }
            else if (strGroupName == "ITEMNAME")
            {
                strQuery += " if exists ( Select * from (Select GroupName from Items Where  ItemName in  ('" + strFirstName + "','" + strSecondName + "','" + strFinalName + "')  group by GroupName)_Item Group by GroupName having(Count(*)=1)) begin "
                         + " Update [dbo].[GoodsReceiveDetails] set ItemName='" + strFinalName + "' Where ItemName in (" + strOldName + ") "
                         + " Update [dbo].[PurchaseReturnDetails] set ItemName = '" + strFinalName + "' Where ItemName in (" + strOldName + ") "
                         + " Update [dbo].[SaleReturnDetails] set ItemName = '" + strFinalName + "' Where ItemName in (" + strOldName + ") "
                         + " Update [dbo].[JournalVoucherDetails] set Other = '" + strFinalName + "' Where Other in (" + strOldName + ") "
                         + " Delete from [dbo].[Items] Where ItemName in (" + strOldName + ")  and ItemName not in ('" + strFinalName + "') end";
            }

            if (_mergeType)
            {
                strQuery += " INSERT INTO [dbo].[MergeItemDetails] ([FirstItem],[SecondItem],[FinalItem],[GroupName],[CreatedBy],[Date],[InsertStatus]) VALUES "
                         + " ('" + strFirstName + "','" + strSecondName + "','" + strFinalName + "','" + strGroupName + "','" + MainPage.strLoginName + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),1) ";
            }

            _count = ExecuteMyQuery(strQuery);
            if (_count > 0 && MainPage.strOnlineDataBaseName != "")
                CreateDeleteQuery(strQuery, _mergeType);

            return _count;
        }

        public int MergeReferenceName(string strFirstName, string strSecondName, string strFinalName, bool _mergeType)
        {
            int _count = 0;
            string strQuery = "", strOldName = "";
            strOldName = "'" + strFirstName + "','" + strSecondName + "'";

            strQuery += " Update SupplierMaster Set Reference='" + strFinalName + "' Where LTRIM(RTRIM(Reference)) in (" + strOldName + ") "
                     + " Delete from AddressBook where Name in (" + strOldName + ") and Name !='" + strFinalName + "' and AreaCode Like('%R') ";

            if (_mergeType)
            {
                strQuery += " INSERT INTO [dbo].[MergePartyDetails] ([FirstParty],[SecondParty],[FinalParty],[GroupName],[CreatedBy],[Date],[InsertStatus]) VALUES "
                         + " ('" + strFirstName + "','" + strSecondName + "','" + strFinalName + "','REFERENCE','" + MainPage.strLoginName + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),1) ";
            }

            _count = ExecuteMyQuery(strQuery);
            if (_count > 0 && MainPage.strOnlineDataBaseName != "")
                CreateDeleteQuery(strQuery, _mergeType);

            return _count;
        }

        public int DownloadMergedMaster(string strDataBase, string strItemType)
        {
            int count = 0;
            try
            {
                string strQuery = " Select * from [dbo].[MergeItemDetails] Where GroupName in ('" + strItemType + "') and InsertStatus=1 and Date>DATEADD(dd,-10,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) ";
                DataTable dt = NetDBAccess.GetDataTableRecord(strQuery);

                string strFirstParty = "", strSecondParty = "", strFinalParty = "", strGroupName = "";
                foreach (DataRow row in dt.Rows)
                {
                    strFirstParty = Convert.ToString(row["FirstItem"]);
                    strSecondParty = Convert.ToString(row["SecondItem"]);
                    strFinalParty = Convert.ToString(row["FinalItem"]);
                    strGroupName = Convert.ToString(row["GroupName"]);

                    count += MergeItemGroupName(strFirstParty, strSecondParty, strFinalParty, strGroupName, false);
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return count;
        }

        public static bool CheckSoftwareVersion()
        {
            if (MainPage.strSSSDataBaseIP != "")
            {
                if (Generate_Setup_Config())
                {
                    string strQuery = "Select VersionName,(CASE WHEN DateADD(dd,2,UpdatedDate)>DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())) then UpdateQuery else '' end ) as UpdateQuery from [VersionInfo] Where ProductType='" + MainPage.strProductType + "' ";
                    DataTable _dt = GetDataTableFromNet(strQuery, MainPage.strSSSDataBaseIP, "SSS");
                    if (_dt.Rows.Count > 0)
                    {
                        string strVersion = Convert.ToString(_dt.Rows[0]["VersionName"]);
                        MainPage.strUpdateQuery = Convert.ToString(_dt.Rows[0]["UpdateQuery"]);//.Replace("|", System.Environment.NewLine) ;
                        if (strVersion != MainPage.strProductVersion)
                        {
                            try
                            {
                                DialogResult result = MessageBox.Show("Sorry ! You are using older version. Are you want to download new version (" + strVersion + ") ? ", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                if (DialogResult.Yes == result)
                                {
                                    string strFileName = "SYBER__" + MainPage.strProductType + ".exe", strDocumentPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\" + strFileName;
                                    if (File.Exists(strDocumentPath))
                                        System.Diagnostics.Process.Start(strDocumentPath);
                                    else
                                    {
                                        using (WebClient webClient = new WebClient())
                                        {
                                            string strFTPPath = "http://pdffiles.ssspltd.com/download/GST/" + strFileName;
                                            webClient.UseDefaultCredentials = true;
                                            webClient.DownloadFile(new Uri(strFTPPath), strDocumentPath);
                                            System.Diagnostics.Process.Start(strDocumentPath);
                                        }
                                    }
                                }
                                return false;
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            }
                        }
                    }
                }
            }
            return CheckMachineIDStatus();
        }


        public static bool CheckMachineIDStatus()
        {
            try
            {
                RegistrationClass objReg = new RegistrationClass();

                string strPlanType = "", strMachineID = objReg.CheckMachineID(ref strPlanType);
                if (strMachineID == "")
                {
                    MessageBox.Show("Sorry ! Your machine is not registered with us. Please register your machine.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    Registration obj = new Registration();
                    obj.ShowDialog();

                    bool _activationStatus = obj._activationStatus;
                    return false;
                }
                else if (strPlanType != "")
                {
                    MainPage.strPlanType = strPlanType;
                    if (strPlanType != "DIAMOND")
                    {
                       MainPage.strVersionUpdateQuery= UpdatePlanType();
                    }
                }
            }
            catch { }
            return true;
        }

        private static string UpdatePlanType()
        {
            string strQuery = " if not exists (Select Count(*) from Version_Control Having(COUNT(*)>40)) begin Delete from Version_Control SET IDENTITY_INSERT [dbo].[Version_Control] ON "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (1, N'LedgerStatementAdjustement', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (2, N'DigitallySignedInvoice', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (3, N'E_InvoicingFacility', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (4, N'BranchWiseBalanceSheet', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (5, N'RefrenceMaster', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (6, N'CreditLimitManagement', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (7, N'SchemeManagement', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (8, N'TransectionLockUnlock', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (9, N'BlackListFacility', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (10, N'CostMarginMRPMarginInDesignMaster', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (11, N'LoyalityCardSystem', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (12, N'Purchase_import_PDF_Excel_PT', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (13, N'Import_Bank_Way_Bill', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (14, N'Import_PurchaseBook', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (15, N'PayRoll', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (16, N'RemovalReason', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (17, N'ReminderSetUp', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (18, N'PrintingSetting', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (19, N'InterestStatement', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (20, N'DueDateWisereport', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (21, N'PartyBalanceSlabWise', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (22, N'PrintMultiLedger', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (23, N'BlackListTransectionReport', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (24, N'UnmovedItemReport', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (25, N'AmendedBillReport', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (26, N'Dashboard', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (27, N'Import', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (28, N'Export', 0, N'SILVER', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (29, N'DigitallySignedInvoice', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (30, N'E_InvoicingFacility', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (31, N'UnmovedItemReport', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (32, N'Dashboard', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (33, N'Import', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (34, N'Export', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (35, N'CostMarginMRPMarginInDesignMaster', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (36, N'LoyalityCardSystem', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (37, N'Purchase_import_PDF_Excel_PT', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (38, N'Import_Bank_Way_Bill', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (39, N'Import_PurchaseBook', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (40, N'RemovalReason', 0, N'GOLD', Getdate()) "
                            + " INSERT [dbo].[Version_Control] ([ID], [Modules], [Access], [PlanType], [Date]) VALUES (41, N'PrintingSetting', 0, N'GOLD', Getdate()) SET IDENTITY_INSERT [dbo].[Version_Control] OFF end ";

            //int count = ExecuteMyNonQuery_WithoutMsg(strQuery);
            return strQuery;
        }

        public static string DownloadChartSetup()
        {
            string strPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\MSChart.exe";
            try
            {
                using (WebClient webClient = new WebClient())
                {
                    webClient.DownloadFile("http://sssdekho.com/download/GST/MSChart.exe", strPath);
                }
            }
            catch { }
            return strPath;
        }

        public static string DownloadFileFromServer(string strPath, string strFileName)
        {
            try
            {
                using (WebClient webClient = new WebClient())
                {
                    webClient.DownloadFile("http://sssdekho.com/download/GST/" + strFileName, strPath);
                }
            }
            catch { }
            return strPath;
        }

        public bool GetBillNextPrevRecord(string BillType, string BillCode, string BillNo, object txtDateBox)
        {
            try
            {
                if (BillType != "")
                {
                    MaskedTextBox txtDate = txtDateBox as MaskedTextBox;
                    string strQuery = "";
                    if (BillType == "SALES")
                        strQuery = "with DATES(MinDate,MaxDate) as (SELECT Convert(varchar(10), (SELECT MAX(BillDate) FROM(SELECT BillDate FROM(SELECT BillDate = MAX(Date) FROM SalesBook where BillCode = '" + BillCode + "' AND BillNo < " + BillNo + ")SB UNION ALL SELECT BillDate FROM(SELECT BillDate = MAX(BillDate) FROM SalesRecord where BillCode = '" + BillCode + "' AND BillNo < " + BillNo + ")SR)MAXX),103),  Convert(varchar(10), (SELECT MIN(BillDate) FROM(SELECT BillDate FROM(SELECT BillDate = MIN(Date) FROM SalesBook where BillCode = '" + BillCode + "' AND BillNo > " + BillNo + ")SB UNION ALL SELECT BillDate FROM(SELECT BillDate = MIN(BillDate) FROM SalesRecord where BillCode = '" + BillCode + "' AND BillNo > " + BillNo + ")SR)MINN),103)) SELECT MinDate,MaxDate FROM DATES";
                    else if (BillType == "SALE RETURN")
                        strQuery = "with DATES(MinDate,MaxDate) as (SELECT Convert(varchar(10),(SELECT BillDate = MAX(Date) FROM SaleReturn where BillCode = '" + BillCode + "' AND BillNo < " + BillNo + "),103) ,  Convert(varchar(10),(SELECT BillDate = MIN(Date) FROM SaleReturn where BillCode = '" + BillCode + "' AND BillNo > " + BillNo + "),103)) SELECT MinDate,MaxDate FROM DATES";

                    if (strQuery != "")
                    {
                        DataTable DT = GetDataTable(strQuery);
                        DateTime enteredDate = ConvertDateInExactFormat(txtDate.Text);
                        if (DT.Rows.Count > 0)
                        {
                            DateTime MaxDate = new DateTime();
                            DateTime MinDate = new DateTime();

                            if (Convert.ToString(DT.Rows[0]["MinDate"]) != "")
                            {
                                MinDate = ConvertDateInExactFormat(Convert.ToString(DT.Rows[0]["MinDate"]));
                                if (enteredDate < MinDate)
                                {
                                    txtDate.Focus();
                                    MessageBox.Show("Date can't be less than " + Convert.ToString(DT.Rows[0]["MinDate"]) + " - date of previous bill.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return false;
                                }
                            }

                            if (Convert.ToString(DT.Rows[0]["MaxDate"]) != "")
                            {
                                MaxDate = ConvertDateInExactFormat(Convert.ToString(DT.Rows[0]["MaxDate"]));
                                if (enteredDate > MaxDate)
                                {
                                    txtDate.Focus();
                                    MessageBox.Show("Date can't be greater than " + Convert.ToString(DT.Rows[0]["MaxDate"]) + " - date of next bill.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex) { }
            return true;
        }

        public bool ValidateBackDateEntry_Only(string strDate)
        {
            DateTime _date = ConvertDateInExactFormat(strDate);
            if (!MainPage.mymainObject.bBackDayEntry)
            {
                if (_date.AddDays(3) < MainPage.currentDate)
                {
                    MessageBox.Show("Back Date Entry is not Allowed ! Please Contact to Administrator ! ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
            }
            return true;
        }

        public bool ValidateBackDateEntry(string strDate)
        {
            DateTime _date = ConvertDateInExactFormat(strDate);
            if (!MainPage.mymainObject.bBackDayEntry)
            {
                if (_date.AddDays(3) < MainPage.currentDate)
                {
                    MessageBox.Show("Back Date Entry is not Allowed ! Please Contact to Administrator ! ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
            }

            if (_date > MainPage.currentDate)
            {
                MessageBox.Show("Forward Date Entry is not allowed ! Please Contact to Administrator ! ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                    return false;
            }
            return true;
        }

        public bool ValidateForwardDateEntry(string strDate)
        {
            DateTime _date = ConvertDateInExactFormat(strDate);

            if (_date > MainPage.currentDate)
            {
                MessageBox.Show("Forward Date Entry is not allowed  !  Please Contact to Administrator ! ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                if (!MainPage.strUserRole.Contains("SUPERADMIN"))
                    return false;
            }
            return true;
        }

        public static void OpenPartyMaster(string strPartyName)
        {
            try
            {
                if (strPartyName != "")
                {
                    SupplierMaster objMaster = new SSS.SupplierMaster(strPartyName);
                    objMaster.FormBorderStyle = FormBorderStyle.FixedDialog;
                    objMaster.ShowInTaskbar = true;
                    objMaster.Show();
                }
            }
            catch { }
        }

        public static void OpenSubPartyMaster(string strPartyName)
        {
            try
            {
                if (strPartyName != "" && strPartyName != "SELF")
                {
                    NewSubParty objMaster = new SSS.NewSubParty("", strPartyName);
                    objMaster.FormBorderStyle = FormBorderStyle.FixedDialog;
                    objMaster.ShowInTaskbar = true;
                    objMaster.Show();
                }
            }
            catch { }
        }

        public static void OpenTransportMaster(string strTransportName)
        {
            try
            {
                if (strTransportName != "")
                {
                    TransportMaster objMaster = new SSS.TransportMaster(strTransportName);
                    objMaster.FormBorderStyle = FormBorderStyle.FixedDialog;
                    objMaster.ShowInTaskbar = true;
                    objMaster.Show();
                }
            }
            catch { }
        }


        public static double GetPartyAmountFromQueryNotSendToNet(string strAccountID)
        {
            double dAmt = 0;
            if (strAccountID != "")
            {
                string strQuery = " Select SUM(Amt) Amt From(Select ISNULL(SUM(CAST(Amount as Money)),0) Amt from BalanceAmount Where Status='Debit' and InsertSTatus=1 and AccountID in ('" + strAccountID + "') Union All "
                                + " Select -ISNULL(SUM(CAST(Amount as Money)),0) Amt  from BalanceAmount Where Status='Credit' and InsertSTatus=1 and AccountID in ('" + strAccountID + "'))Balance ";

                object objValue = ExecuteMyScalar(strQuery);
                if (objValue != null)
                {
                    dAmt = ConvertObjectToDoubleStatic(objValue);
                }
            }
            return dAmt;
        }

        public static string GetPreviousYearDataBase()
        {
            string strDBName = "";
            DataTable dt = new DataTable();
            SqlDataAdapter adap = new SqlDataAdapter("Select Prev_Y_Path from Company Where CompanyName='" + MainPage.strCompanyName + "' ", MainPage.con);
            adap.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                string strpath = Convert.ToString(dt.Rows[0][0]);
                if (strpath != "")
                {
                    int index = strpath.LastIndexOf(@"\");
                    strDBName = "A" + strpath.Substring(index + 1);
                }
            }
            return strDBName;
        }


        public DataTable CreateWayBillDataTable(string strBillCode, string strBillNo)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("WayBillNo", typeof(String));
            dt.Columns.Add("WayBillDate", typeof(String));
            dt.Columns.Add("EnteredBy", typeof(String));
            dt.Columns.Add("ValidFrom", typeof(String));
            dt.Columns.Add("SupplierGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDispatch", typeof(String));
            dt.Columns.Add("CustomerGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDelivery", typeof(String));
            dt.Columns.Add("BillNo", typeof(String));
            dt.Columns.Add("BillDate", typeof(String));
            dt.Columns.Add("ValueOfGoods", typeof(String));
            dt.Columns.Add("HSNCode", typeof(String));
            dt.Columns.Add("ReasonForTransportation", typeof(String));
            dt.Columns.Add("Transporter", typeof(String));
            dt.Columns.Add("Other", typeof(String));
            dt.Columns.Add("ApproxDistance", typeof(String));
            dt.Columns.Add("BarcodeNo", typeof(String));
            dt.Columns.Add("BarcodeNumber", typeof(String));
            dt.Columns.Add("TransactionType", typeof(String));

            string strWayBill = "", strGSTNo = "", strCustomerGSTNo, strSupplierGSTNo = "", strBarCodeNumber = "", strTransactionType = "Regular";
            string strQuery = " Select WayBillNo,WayBillDate,CD.GSTNo,CD.FullCompanyName,CompanyName,PlaceOfSupply,SM.GSTNo CustomerGSTNo,SM.Name as CustomerName,PlaceOfDelivery, (BillCode+CAST(BillNo as varchar)) BillNo,CONVERT(varchar,BillDate,103)BillDate,ROUND(CAST(SR.NetAmt as Money),0) NetAmt,(TR.GSTNo+' & '+SR.Transport) Transporter, (Select Top 1 (Distance) Distance from PinCodeDistance Where ToPinCode=SM.PINCode) PDistance,SubPartyID,SR.IRNNo  from SalesRecord SR OUTER APPLY (Select Top 1 SM2.Address, SM2.Station,SM2.State,SM2.PinCode from SupplierMaster SM2 Where (SM2.AreaCode+SM2.AccountNo)=SR.SubPartyID) SM2 Outer APPLY (Select Top 1 Name,GSTNo,(CASE WHEN SubPartyID!='SELF' then (SM2.Address+' '+ SR.Station+','+SM2.State+'-'+SM2.PinCode) else (Address+' '+SR.Station+','+State+'-'+PinCode) end) PlaceOfDelivery,(CASE WHEN SubPartyID='SELF' then SM.PINCode else SM2.PINCode end)PINCode from SupplierMaster SM Where (AreaCode+AccountNo)=SR.SalePartyID) SM Outer Apply (Select TOp 1 GSTNo,FullCompanyName,CompanyName,(StateName+'-'+PinCode) PlaceOfSupply from CompanyDetails Order by ID asc) CD Outer Apply (Select TOP 1 TR.GSTNo from Transport TR Where TransportName=SR.Transport) TR  Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo
                            + " Select HSNCode,ItemName, Qty,COUNT(*)ItemCount from (Select LTRIM(RTRIM(REPLACE(REPLACE(GRD.ItemName, GM.HSNCode, ''), ':', '')))ItemName,GM.HSNCode,SUM(Quantity) Qty,GM.TaxRate from GoodsReceiveDetails GRD inner join SalesEntry SE on (GRD.ReceiptCode+' '+ CAST(GRD.ReceiptNo as varchar)) =SE.GRSNo inner join SalesRecord SR on SE.BillCode=SR.BillCode and SE.BIllNo=Sr.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IGM.Other, _IGM.HSNCode, (CASE WHEN _TC.ChangeTaxRate = 1 then(CASE WHEN _TC.GreaterORSmaller = '>' then(CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100) / (100 + TaxRate)) else GRD.Rate end))) * (CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end))) > _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) else (CASE WHEN((((((CASE WHEN SMN.TaxIncluded = 1 then((GRD.Rate * 100) / (100 + TaxRate)) else GRD.Rate end)))*(CASE WHEN _TC.AmountType = 'NET PRICE' then((100.00 + (SE.DiscountStatus + SE.Discount)) / 100.00) else 1.00 end)))< _TC.ChangeAmt) then _TC.TaxChangeRateIGST else _TC.TaxRateIGST end) end) else _TC.TaxRateIGST end) TaxRate from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where GRD.ItemName = _IM.ItemName ) as GM  Where SR.BillCode='" + strBillCode + "' and SR.BillNo=" + strBillNo + " Group by  LTRIM(RTRIM(REPLACE(REPLACE(GRD.ItemName, GM.HSNCode, ''), ':', ''))),GM.HSNCode,GM.TaxRate)Sales Group by HSNCode,ItemName, Qty Order by Qty desc ";
            DataSet ds = DataBaseAccess.GetDataSetRecord(strQuery);
            if (ds.Tables.Count > 0)
            {
                DataTable table = ds.Tables[0], dtDetails = ds.Tables[1];

                if (table.Rows.Count > 0 && dtDetails.Rows.Count > 0)
                {
                    DataRow dr = table.Rows[0];
                    DataRow row = dt.NewRow();
                    strBarCodeNumber = Convert.ToString(dr["WayBillNo"]).Replace(" ", "");
                    strWayBill = strBarCodeNumber;
                    strGSTNo = Convert.ToString(dr["GSTNo"]);
                    strCustomerGSTNo = Convert.ToString(dr["CustomerGSTNo"]);

                    if (Convert.ToString(dr["SubPartyID"]) != "SELF")
                        strTransactionType = "Bill To - Ship To";

                    strWayBill = strWayBill.Insert(4, " ").Insert(9, " ");
                    strSupplierGSTNo = strGSTNo.Insert(5, " ").Insert(11, " ");
                    if (strCustomerGSTNo != "")
                        strCustomerGSTNo = strCustomerGSTNo.Insert(5, " ").Insert(11, " ");
                    else
                    {
                        strCustomerGSTNo = "URP";
                        strTransactionType = "- NA -";
                    }

                    row["WayBillNo"] = strWayBill;
                    row["WayBillDate"] = dr["WayBillDate"];
                    row["EnteredBy"] = strSupplierGSTNo + " - " + dr["FullCompanyName"];
                    row["ValidFrom"] = "Not Valid for Movement as Part B is not entered [" + dr["PDistance"] + "Kms]";
                    row["SupplierGSTNo"] = strGSTNo + "," + dr["CompanyName"];
                    row["PlaceOfDispatch"] = dr["PlaceOfSupply"];
                    row["CustomerGSTNo"] = strCustomerGSTNo + " ," + dr["CustomerName"];
                    row["PlaceOfDelivery"] = Convert.ToString(dr["PlaceOfDelivery"]).Replace("\n", " ").Replace("\r", " ");
                    row["BillNo"] = dr["BillNo"];
                    row["BillDate"] = dr["BillDate"];
                    row["ValueOfGoods"] = Convert.ToDouble(dr["NetAmt"]);
                    row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - READYMADE GARMENT( +" + (dtDetails.Rows.Count) + " )";
                    row["ReasonForTransportation"] = "Outward - Supply";
                    row["Transporter"] = dr["Transporter"];
                    row["Other"] = MainPage.currentDate.ToString("M/d/yyyy");
                    row["ApproxDistance"] = dr["IRNNo"];
                    row["BarcodeNo"] = "*" + strBarCodeNumber + "*";
                    row["BarcodeNumber"] = strBarCodeNumber;
                    row["TransactionType"] = strTransactionType;

                    dt.Rows.Add(row);
                }
            }
            return dt;
        }

        private string GetWaybillReportPath(string strBillCode, string strBillNo)
        {
            string strPath = "", strFileName = "";
            try
            {
                string strNewPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Way_Bill";
                strPath = strFileName = strNewPath + "\\Waybill_" + strBillNo + ".pdf";
                if (File.Exists(strFileName))
                    File.Delete(strFileName);
                Directory.CreateDirectory(strNewPath);

                DataTable _dt = CreateWayBillDataTable(strBillCode, strBillNo);
                if (_dt.Rows.Count > 0)
                {
                    Reporting.WayBillReport objReport = new Reporting.WayBillReport();
                    objReport.SetDataSource(_dt);
                    objReport.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;
                    if (strPath != "")
                    {
                        objReport.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                    }
                    objReport.Close();
                    objReport.Dispose();
                }
            }
            catch { strPath = ""; }
            return strPath;
        }

        public int SendEmailIDAndWhatsappNumberToCustomer(string strBillNos)
        {
            int count = 0, _failedCount = 0;
            try
            {
                string strQuery = "";
                strQuery += " Select Distinct BillCode,BillNo,EmailID,WMobileNo,(SalePartyID+' '+Name)CustomerName,'SALE' BillType from SalesRecord SR OUTER APPLY (Select SM.Name,SM.EmailID,SOD.WaybillUserName as WMobileNo from SupplierMaster SM inner join SupplierOtherDetails SOD on SM.AreaCode=SOD.AreaCode and SM.AccountNo=SOD.AccountNo Where (SM.AreaCode+SM.AccountNo)=SalePartyID)SM Where (BillCode+CAST(BillNo as varchar)) in (" + strBillNos + ") UNION ALL "
                         + " Select Distinct BillCode,BillNo,EmailID,WMobileNo,(SalePartyID + ' ' + Name)CustomerName,'RETAIL' BillType from SalesBook SR  OUTER APPLY (Select SM.Name, SM.EmailID, SOD.WaybillUserName as WMobileNo from SupplierMaster SM inner join SupplierOtherDetails SOD on SM.AreaCode = SOD.AreaCode and SM.AccountNo = SOD.AccountNo Where(SM.AreaCode + SM.AccountNo) = SalePartyID)SM Where (BillCode+CAST(BillNo as varchar)) in (" + strBillNos + ") ";
                DataTable _dt = GetDataTable(strQuery);
                if (_dt.Rows.Count > 0)
                {
                    string strBillType = "", strBillCode = "", strBillNo = "", strEmailID = "", strMobileNo = "", strPartyName = "", strMessage = "", strSub = "", strBillPath = "", strPath = "", strAllBillNo = "";

                    DataTable dTable = _dt.DefaultView.ToTable(true, "CustomerName", "EmailID", "WMobileNo");
                    foreach (DataRow dr in dTable.Rows)
                    {
                        strPartyName = Convert.ToString(dr["CustomerName"]);
                        DataRow[] rows = _dt.Select("CustomerName='" + strPartyName + "' ");
                        foreach (DataRow row in rows)
                        {
                            strBillCode = Convert.ToString(row["BillCode"]);
                            strBillNo = Convert.ToString(row["BillNo"]);
                            strMobileNo = Convert.ToString(row["WMobileNo"]);
                            strBillType = Convert.ToString(row["BillType"]);
                            if (strBillType == "SALE")
                                strBillPath = ShowSaleBookPrint(strBillCode, strBillNo, true, false);
                            else
                                strBillPath = ShowRetailSaleBookPrint(strBillCode, strBillNo, true, false);

                            if (strBillPath != "")
                            {
                                if (strPath != "")
                                    strPath += ",";
                                strPath += strBillPath;
                                if (strAllBillNo != "")
                                    strAllBillNo += ",";
                                strAllBillNo += strBillCode + " " + strBillNo;
                                //strMobileNo = "8802872474";
                                if (strMobileNo != "")
                                    SendSaleBillWhatsappMessage(strMobileNo, strBillPath, strBillCode, strBillNo, strPartyName);
                            }
                        }

                        strEmailID = Convert.ToString(dr["EmailID"]);
                        // strEmailID = "chandrakant@ssspltd.com";

                        if (strPath != "")
                        {
                            if (strEmailID != "")
                            {
                                strMessage = "M/S : " + strPartyName + ", sale bill nos : " + strAllBillNo + " attached with this mail, Please find attachment.";
                                strSub = "!! Sale bill attached !!";

                                SendingEmailPage objEmail = new SendingEmailPage(strEmailID, strSub, strMessage, strPath, "SALES REPORT");
                                objEmail.ShowDialog();

                                //bool bStatus = DataBaseAccess.SendEmail(strEmailID, strSub, strMessage, strPath, "", "SALE BILL", true);
                                //if (!bStatus)
                                //{
                                //    MessageBox.Show("Sorry ! Unable to send mail of : " + strBillCode + " " + strBillNo + ".", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //    _failedCount++;
                                //}
                            }
                            else
                            {
                                MessageBox.Show("Sorry !! Email ID not found in the Customer : " + strPartyName, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                _failedCount++;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Sorry !! Unable to generate pdf files right now ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            _failedCount++;
                        }
                    }
                }
                count = _dt.Rows.Count - _failedCount;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry !! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                count = 0;
            }
            return count;
        }

        public int SendEmailIDAndWhatsappNumberToSupplier(string strBillNos)
        {
            int count = 0, _failedCount = 0;
            try
            {
                string strQuery = " Select Distinct SR.BillCode,SR.BillNo,EmailID,WMobileNo,(SalePartyID+' '+SalesParty)CustomerName,(PurchasePartyID+' '+Name)SupplierName from SalesRecord SR left join (SELECT SE.PurchasePartyID,SE.BillCode,SE.BillNo from SalesEntry SE)SE on SR.BillCode=SE.BillCode and SR.BillNo=SE.BillNo left join (Select  SM.AreaCode,SM.AccountNo,SM.Name,SM.EmailID,SOD.WaybillUserName as WMobileNo from SupplierMaster SM inner join SupplierOtherDetails SOD on SM.AreaCode=SOD.AreaCode and SM.AccountNo=SOD.AccountNo)SM on (SM.AreaCode+SM.AccountNo)=PurchasePartyID Where (GoodsType='DIRECT' OR SM.Name Like('%SPARKY%')) and (SR.BillCode+CAST(SR.BillNo as varchar)) in (" + strBillNos + ")  Order by SR.BillNo ";
                DataTable _dt = GetDataTable(strQuery);
                if (_dt.Rows.Count > 0)
                {
                    string strBillCode = "", strBillNo = "", strEmailID = "", strMobileNo = "", strPartyName = "", strMessage = "", strSub = "", strBillPath = "", strWaybillPath = "", strPath = "";

                    foreach (DataRow row in _dt.Rows)
                    {
                        strBillCode = Convert.ToString(row["BillCode"]);
                        strBillNo = Convert.ToString(row["BillNo"]);
                        strEmailID = Convert.ToString(row["EmailID"]);
                        strMobileNo = Convert.ToString(row["WMobileNo"]);
                        strPartyName = Convert.ToString(row["CustomerName"]);

                        if (strEmailID != "" || strMobileNo != "")
                        {
                            strBillPath = ShowSaleBookPrint(strBillCode, strBillNo, true, false);
                            strWaybillPath = GetWaybillReportPath(strBillCode, strBillNo);
                            strPath = strBillPath + "," + strWaybillPath;

                            if (strBillPath != "" && strWaybillPath != "")
                            {
                                if (strEmailID != "")
                                {
                                    strMessage = "M/S : " + strPartyName + ", SALE BILL NO : " + strBillCode + " " + strBillNo + " CREATED.";

                                    strSub = "Sale bill no :  " + strBillCode + " " + strBillNo + " generated on the behalf of : " + strPartyName;

                                    bool bStatus = DataBaseAccess.SendEmail(strEmailID, strSub, strMessage, strPath, "", "SALE BILL", true);
                                    if (!bStatus)
                                    {
                                        MessageBox.Show("Sorry ! Unable to send mail of : " + strBillCode + " " + strBillNo + ".", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        _failedCount++;
                                    }
                                }

                                //if (strMobileNo != "")
                                //{
                                //    SendSaleBillWhatsappMessage(strMobileNo, strBillPath, strBillCode, strBillNo, strPartyName);
                                //    SendEWaybillWhatsappMessage(strMobileNo, strWaybillPath, strBillCode, strBillNo, strPartyName);
                                //}
                            }
                            else
                            {
                                if (strBillPath != "" && strWaybillPath == "")
                                    MessageBox.Show("Sorry !! Unable to generate way bill pdf files right now ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                else if (strBillPath == "" && strWaybillPath != "")
                                    MessageBox.Show("Sorry !! Unable to generate sale bill pdf files right now ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                else
                                    MessageBox.Show("Sorry !! Unable to generate pdf files right now ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                                _failedCount++;
                            }
                        }
                        if (strEmailID == "")
                        {
                            MessageBox.Show("Sorry !! Email ID not found in the supplier : " + row["SupplierName"], "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            _failedCount++;
                        }

                    }
                }

                count = _dt.Rows.Count - _failedCount;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry !! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                count = 0;
            }
            return count;
        }

        private void SendSaleBillWhatsappMessage(string strMobileNo, string strPath, string strBillCode, string strBillNo, string strPartyName)
        {
            string _strFileName = strBillCode.Replace("18-19/", "").Replace("19-20/", "") + "_" + strBillNo + ".pdf", strMessage = "", strBranchCode = strBillCode;
            string strFilePath = MainPage.strHttpPath+ "/SALEBILL/" + strBranchCode + "/" + _strFileName, strName = GetSafePartyName(strPartyName);

            DeleteSaleBillFile(strPath, strBranchCode);
            //strMessage = "Sale bill no : " + strBillCode + " " + strBillNo + " generated on the behalf of : " + strName;

            bool _bStatus = UploadSaleBillPDFFile(strPath, _strFileName, strBranchCode);
            if (_bStatus)
            {
                string strResult = WhatsappClass.SendWhatsAppMessage(strMobileNo, strMessage, strFilePath, "SALEBILL", "", "PDF");
            }
        }

        public string ShowSaleBookPrint(string strBillCode, string strBillNo, bool _dscVerified, bool _bPrint)
        {
            string strPath = "";
            try
            {
                string strNewPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Sales Bill\\Mail";
                string strFileName = strNewPath + "\\" + strBillNo + ".pdf";
                if (File.Exists(strFileName))
                    File.Delete(strFileName);
                Directory.CreateDirectory(strNewPath);

                string _strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\SalesBill\\Mail\\" + strBillNo, _strFileName = DateTime.Now.Day.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                _strPath += "\\" + _strFileName;

                strPath = _strPath + "\\" + strBillNo + ".pdf";
                if (File.Exists(strPath))
                    File.Delete(strPath);
                Directory.CreateDirectory(_strPath);


                if (strPath != "")
                {
                    bool _bstatus = GSTPrintAndPreviewofSaleBook(strFileName, strBillCode, strBillNo, _dscVerified, _bPrint);
                    if (_bstatus)
                    {
                        if (!_dscVerified)
                        {
                            string strSignPath = MainPage.strServerPath.Replace(@"\NET", "") + "\\Signature\\sign.pfx";
                            PDFSigner _objSigner = new PDFSigner();
                            bool _bFileStatus = _objSigner.SetSign(strFileName, strPath, strSignPath);
                            if (!_bFileStatus)
                                strPath = "";
                            if (strPath != "")
                                System.Diagnostics.Process.Start(strPath);
                            else
                                MessageBox.Show("Sorry ! File not found !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                        else
                            strPath = strFileName;

                    }
                    else
                        strPath = "";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                strPath = "";
            }
            return strPath;
        }

        public string ShowRetailSaleBookPrint(string strBillCode, string strBillNo, bool _dscVerified, bool _bPrint)
        {
            string strPath = "";
            try
            {
                string strNewPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\Sales Bill\\Mail";
                string strFileName = strNewPath + "\\" + strBillNo + ".pdf";
                if (File.Exists(strFileName))
                    File.Delete(strFileName);
                Directory.CreateDirectory(strNewPath);

                string _strPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\SalesBill\\Mail\\" + strBillNo, _strFileName = DateTime.Now.Day.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Year.ToString() + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                _strPath += "\\" + _strFileName;

                strPath = _strPath + "\\" + strBillNo + ".pdf";
                if (File.Exists(strPath))
                    File.Delete(strPath);
                Directory.CreateDirectory(_strPath);


                if (strPath != "")
                {
                    bool _bstatus = GSTPrintAndPreviewofRetailSale(strFileName, strBillCode, strBillNo, _dscVerified, _bPrint);
                    if (_bstatus)
                    {
                        if (!_dscVerified)
                        {
                            string strSignPath = MainPage.strServerPath.Replace(@"\NET", "") + "\\Signature\\sign.pfx";
                            PDFSigner _objSigner = new PDFSigner();
                            bool _bFileStatus = _objSigner.SetSign(strFileName, strPath, strSignPath);
                            if (!_bFileStatus)
                                strPath = "";
                            if (strPath != "")
                                System.Diagnostics.Process.Start(strPath);
                            else
                                MessageBox.Show("Sorry ! File not found !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                        else
                            strPath = strFileName;

                    }
                    else
                        strPath = "";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                strPath = "";
            }
            return strPath;
        }

        private bool GSTPrintAndPreviewofSaleBook(string strPath, string strBillCode, string strBillNo, bool _dscVerified, bool _bPrint)
        {
            DataTable _dtGST = null, _dtSalesAmt = null;
            bool _bIGST = false, _bDiffState = false;
            DataTable dt = CreateOnlineSaleBookDataTable(strBillCode, strBillNo, ref _dtGST, ref _bIGST, ref _dtSalesAmt, _dscVerified, false, ref _bDiffState);
            if (dt.Rows.Count > 0 && strPath != "")
            {
                if (!_bIGST)
                {
                    if (strBillCode.Contains("SRT"))
                    {
                        Reporting.SaleBook_Cloth_Report_CSGST_DSC objOL_salebill = new Reporting.SaleBook_Cloth_Report_CSGST_DSC();
                        objOL_salebill.SetDataSource(dt);
                        objOL_salebill.Subreports[0].SetDataSource(_dtGST);
                        objOL_salebill.Subreports[1].SetDataSource(_dtSalesAmt);
                        objOL_salebill.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;

                        if (_bPrint && _dscVerified)
                            objOL_salebill.PrintToPrinter(1, false, 0, 0);
                        else if (strPath != "")
                        {
                            objOL_salebill.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                            return true;
                        }
                        objOL_salebill.Close();
                        objOL_salebill.Dispose();
                    }
                    else
                    {
                        ReportClass objOL_salebill;
                        if (_bDiffState)
                            objOL_salebill = new Reporting.SaleBookReport_CSGST_DSC_Ship_From();
                        else
                            objOL_salebill = new Reporting.SaleBookReport_CSGST_DSC();

                        objOL_salebill.SetDataSource(dt);
                        objOL_salebill.Subreports[0].SetDataSource(_dtGST);
                        objOL_salebill.Subreports[1].SetDataSource(_dtSalesAmt);
                        objOL_salebill.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;

                        if (_bPrint && _dscVerified)
                            objOL_salebill.PrintToPrinter(1, false, 0, 0);
                        else if (strPath != "")
                        {
                            objOL_salebill.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                            return true;
                        }
                        objOL_salebill.Close();
                        objOL_salebill.Dispose();
                    }
                }
                else
                {
                    if (strBillCode.Contains("SRT"))
                    {
                        Reporting.SaleBook_Cloth_Report_IGST_DSC objOL_salebill = new Reporting.SaleBook_Cloth_Report_IGST_DSC();
                        objOL_salebill.SetDataSource(dt);
                        objOL_salebill.Subreports[0].SetDataSource(_dtGST);
                        objOL_salebill.Subreports[1].SetDataSource(_dtSalesAmt);
                        objOL_salebill.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;

                        if (_bPrint && _dscVerified)
                            objOL_salebill.PrintToPrinter(1, false, 0, 0);
                        else if (strPath != "")
                        {
                            objOL_salebill.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                            objOL_salebill.Close();
                            objOL_salebill.Dispose();
                            return true;
                        }
                        else
                        {
                            objOL_salebill.Close();
                            objOL_salebill.Dispose();
                        }
                    }
                    else
                    {
                        ReportClass objOL_salebill;
                        if (_bDiffState)
                            objOL_salebill = new Reporting.SaleBookReport_IGST_DSC_Ship_From();
                        else
                            objOL_salebill = new Reporting.SaleBookReport_IGST_DSC();
                        objOL_salebill.SetDataSource(dt);
                        objOL_salebill.Subreports[0].SetDataSource(_dtGST);
                        objOL_salebill.Subreports[1].SetDataSource(_dtSalesAmt);
                        objOL_salebill.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;

                        if (_bPrint && _dscVerified)
                            objOL_salebill.PrintToPrinter(1, false, 0, 0);
                        else if (strPath != "")
                        {
                            objOL_salebill.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                            objOL_salebill.Close();
                            objOL_salebill.Dispose();
                            return true;
                        }
                        else
                        {
                            objOL_salebill.Close();
                            objOL_salebill.Dispose();
                        }
                    }
                }
            }
            return false;
        }


        private bool GSTPrintAndPreviewofRetailSale(string strPath, string strBillCode, string strBillNo, bool _dscVerified, bool _bPrint)
        {
            DataTable _dtGST = null, _dtSalesAmt = null;
            bool _bIGST = false;
            DataTable dt = CreateOnlineSalesBookRetailDataTable(strBillCode, strBillNo, ref _dtGST, ref _bIGST, ref _dtSalesAmt, _dscVerified, false);
            if (dt.Rows.Count > 0 && strPath != "")
            {
                if (!_bIGST)
                {
                    Reporting.SaleBookRetailReport_CSGST_DSC objOL_salebill = new Reporting.SaleBookRetailReport_CSGST_DSC();
                    objOL_salebill.SetDataSource(dt);
                    objOL_salebill.Subreports[0].SetDataSource(_dtGST);
                    objOL_salebill.Subreports[1].SetDataSource(_dtSalesAmt);
                    objOL_salebill.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;

                    if (_bPrint && _dscVerified)
                        objOL_salebill.PrintToPrinter(1, false, 0, 0);
                    else if (strPath != "")
                    {
                        objOL_salebill.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                        objOL_salebill.Close();
                        objOL_salebill.Dispose();
                        return true;
                    }
                    else
                    {
                        objOL_salebill.Close();
                        objOL_salebill.Dispose();
                    }
                }
                else
                {
                    Reporting.SaleBookRetailReport_IGST_DSC objOL_salebill = new Reporting.SaleBookRetailReport_IGST_DSC();
                    objOL_salebill.SetDataSource(dt);
                    objOL_salebill.Subreports[0].SetDataSource(_dtGST);
                    objOL_salebill.Subreports[1].SetDataSource(_dtSalesAmt);
                    objOL_salebill.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;

                    if (_bPrint && _dscVerified)
                        objOL_salebill.PrintToPrinter(1, false, 0, 0);
                    else if (strPath != "")
                    {
                        objOL_salebill.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                        objOL_salebill.Close();
                        objOL_salebill.Dispose();
                        return true;
                    }
                    else
                    {
                        objOL_salebill.Close();
                        objOL_salebill.Dispose();
                    }
                }
            }
            return false;
        }


        public int UpdateCompanyMySetting(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
                MainPage.OpenConnection();

            string strQuery = "";
            strQuery += " if not exists (Select * from CompanySetting Where CompanyName='" + record[5] + "' ) begin "
                          + " Insert into CompanySetting (CompanyName,StandardLogin,ShowAccountCode,PwdLimit,MobileNo,EmailID,Date,[GReceiveCode] ,[SBillCode],[PBillCode],[FChallanCode],[GReturnCode],[CashVCode],[JournalVCode] ,[CourierCode],[OrderCode],[BankVCode],[Password],CreatedBy,UpdateStatus,[PurchaseReturnCode],[SaleServiceCode],[DebitNoteCode],[CreditNoteCode],[RCMVCode],[SMTPServer],[SMTPPort],[AltrationCode],[STCode],[CHQCode],[OtherCode],[TCSDNCode],[TCSCNCode],[AdvanceVCode],[Rebate],[StockAsPer],[ItemMapping],[BarcodingType],[ItemOpening],[MonthLockPeriod],[MonthLockDate],[PurchaseSetWise]) Values "
                          + " ('" + record[5] + "','" + record[0] + "', '" + record[1] + "','" + record[2] + "', '" + record[3] + "', '" + record[4] + "',DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())), '" + record[6] + "', '" + record[7] + "', '" + record[8] + "', '" + record[9] + "', '" + record[10] + "', '" + record[11] + "', '" + record[12] + "', '" + record[13] + "' ,'" + record[14] + "','" + record[15] + "','" + record[16] + "','" + MainPage.strLoginName + "',0,'" + record[17] + "','" + record[18] + "','" + record[19] + "','" + record[20] + "','" + record[21] + "','" + record[22] + "','" + record[23] + "','" + record[24] + "','" + record[25] + "','" + record[26] + "','" + record[27] + "','" + record[28] + "','" + record[29] + "','" + record[30] + "','" + record[31] + "','" + record[32] + "','" + record[33] + "','" + record[34] + "','" + record[35] + "','" + record[36] + "','" + record[37] + "','" + record[38] + "') end "
                          + " else begin Update CompanySetting Set ShowAccountCode='" + record[1] + "', MobileNo='" + record[3] + "', EmailID='" + record[4] + "',Password='" + record[16] + "',Date=DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),UpdatedBy='" + MainPage.strLoginName + "',UpdateStatus=1,[DebitNoteCode]='" + record[19] + "',[CreditNoteCode]='" + record[20] + "',[RCMVCode]='" + record[21] + "',[SMTPServer]='" + record[22] + "',[SMTPPort]='" + record[23] + "',[CHQCode]='" + record[26] + "',[OtherCode]='" + record[27] + "',[AdvanceVCode]='" + record[30] + "',[Rebate]='" + record[31] + "',[StockAsPer]='" + record[32] + "',[ItemMapping]='" + record[33] + "',[BarcodingType]='" + record[34] + "',[ItemOpening]='" + record[35] + "',[MonthLockPeriod]='" + record[36] + "',[MonthLockDate]='" + record[37] + "',[PurchaseSetWise]='" + record[38] + "' Where CompanyName='" + record[5] + "' "
                          + " if not exists (Select Top 1 * from GoodsReceive) begin "
                          + " Update CompanySetting set GReceiveCode='" + record[6] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 *  from SalesRecord) begin "
                          + " Update CompanySetting set SBillCode='" + record[7] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select TOP 1 *  from PurchaseRecord) begin "
                          + " Update CompanySetting set PBillCode='" + record[8] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select  * from ForwardingRecord) begin "
                          + " Update CompanySetting set FChallanCode='" + record[9] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 * from SaleReturn) begin  "
                          + " Update CompanySetting set GReturnCode='" + record[10] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select TOP 1 * from OrderBooking) begin  "
                          + " Update CompanySetting set OrderCode='" + record[14] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select TOP 1 * from BalanceAmount Where VoucherCode!='') begin  "
                          + " Update CompanySetting Set CashVCode='" + record[11] + "',BankVCode='" + record[15] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end"
                          + " if not exists (Select Top 1 * from JournalAccount Where VoucherCode!='') begin  "
                          + " Update CompanySetting Set JournalVCode='" + record[12] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 * from CourierRegister Where SCode!='' ) begin  "
                          + " Update CompanySetting Set CourierCode='" + record[13] + "' Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 * from PurchaseReturn) begin  "
                          + " Update CompanySetting Set PurchaseReturnCode='" + record[17] + "' Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 * from SaleServiceBook) begin  "
                          + " Update CompanySetting Set SaleServiceCode='" + record[18] + "' Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 * from AlterationSlip) begin  "
                          + " Update CompanySetting Set AltrationCode='" + record[24] + "' Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 BillCode from StockTransfer) begin  "
                          + " Update CompanySetting Set STCode='" + record[25] + "'  Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " if not exists (Select Top 1 * from TCSDetails) begin  "
                          + " Update CompanySetting Set TCSDNCode='" + record[28] + "',TCSCNCode='" + record[29] + "' Where CompanyName='" + MainPage.strCompanyName + "' end "
                          + " end ";

            cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();
            MainPage.CloseConnection();
            return count;
        }

        public int UpdateCompanyApplicationSetting(string[] record)
        {
            if (MainPage.con.State == ConnectionState.Closed)
            {
                MainPage.OpenConnection();
            }
            int days = 0, graceDays = 0, CashDis = 0;
            try
            {
                days = Int32.Parse(record[0]);
                graceDays = Int32.Parse(record[1]);
                CashDis = Int32.Parse(record[2]);
            }
            catch
            {
            }

            string strQuery = "";
            strQuery += " if not exists (Select * from CompanySetting Where CompanyName='" + record[12] + "' ) begin "
                          + " Insert into CompanySetting(CompanyName,DaysInYear,GraceDays,CashDiscDays,CashDiscRate,DrInterest,CrInterest,FreightDhara,TaxDhara,Postage,Packing,Date,CreatedBy,UpdateStatus,[HTTPPath],[FTPPath],[FTPUserName],[FTPPassword]) Values " //,Vat,Rebate
                          + " ('" + record[12] + "'," + days + ", " + graceDays + "," + CashDis + ",'" + record[3] + "', '" + record[4] + "', '" + record[5] + "' , '" + record[6] + "', '" + record[7] + "', '" + record[8] + "', '" + record[9] + "', '" + MainPage.startFinDate + "','" + MainPage.strLoginName + "',0,'" + record[13] + "', '" + record[14] + "', '" + record[15] + "', '" + record[16] + "') end  "
                          + " else begin Update CompanySetting set DaysInYear=" + days + ", GraceDays=" + graceDays + ",CashDiscDays=" + CashDis + ",CashDiscRate='" + record[3] + "', DrInterest='" + record[4] + "', CrInterest='" + record[5] + "' , FreightDhara='" + record[6] + "', "
                          + "  TaxDhara='" + record[7] + "',Postage='" + record[8] + "', Packing='" + record[9] + "',Date='" + MainPage.startFinDate + "',UpdatedBy='" + MainPage.strLoginName + "',UpdateStatus=1,[HTTPPath]='" + record[13] + "',[FTPPath]='" + record[14] + "',[FTPUserName]='" + record[15] + "',[FTPPassword]='" + record[16] + "' where CompanyName='" + record[12] + "' end "; 

            cmd = new SqlCommand(strQuery, MainPage.con);
            int count = cmd.ExecuteNonQuery();

            MainPage.CloseConnection();
            return count;
        }

        public DataTable GetComSetting(string strName)
        {
            DataTable dt = GetDataTable("if COL_LENGTH('CompanySetting','PurchaseSetWise') is null Alter table CompanySetting Add PurchaseSetWise Varchar(50) Select *,Convert(varchar,Date,103)CDate from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "' ");
            return dt;
        }

        public static int SaveDistanceFromPinCode(string strFromPinCode, string strToPinCode, double dDistance)
        {
            string strQuery = "if not exists (Select Distance from PinCodeDistance  Where FromPinCOde='" + strFromPinCode + "' and ToPinCode='" + strToPinCode + "') begin "
                          + " INSERT INTO[dbo].[PinCodeDistance] ([FromPinCode],[ToPinCode],[Distance],[Date]) VALUES('" + strFromPinCode + "','" + strToPinCode + "'," + dDistance + ", DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) end";
            int count = ExecuteMyNonQuery(strQuery);
            return count;
        }

        public bool GenerateEWayBillJSON(string strSaleBillNo, string usedFor = null)
        {
            try
            {
                string strJSON = "";
                if (usedFor != null && usedFor == "TRADING")
                {
                    strJSON = JSONAccess.GetJSONFromTradingSaleBillNo(strSaleBillNo);
                }
                else if (usedFor != null && usedFor == "STOCKTRANSFER")
                {
                    strJSON = JSONAccess.GetJSONFromStockTransfer(strSaleBillNo);
                }
                else if (usedFor != null && usedFor == "PURCHASERETURN")
                {
                    strJSON = JSONAccess.GetJSONFromPurchaseReturn(strSaleBillNo);
                }
                else
                {
                    strJSON = JSONAccess.GetJSONFromSaleBillNo(strSaleBillNo);
                }
                if (strJSON != "")
                {
                    strJSON = "{\"version\":\"1.0.1118\",\"billLists\":" + strJSON + "}";
                    string strPath = "", strFileName = "EwayBill_" + DateTime.Now.Day.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Year.ToString() + "_" + DateTime.Now.Hour.ToString() + "_" + DateTime.Now.Minute.ToString() + "_" + DateTime.Now.Second.ToString() + ".json";
                    SaveFileDialog _browser = new SaveFileDialog();
                    _browser.Filter = "JSON Files (*.json)|*.json";
                    _browser.FileName = strFileName;// "EwayBill.json";
                    _browser.ShowDialog();

                    if (_browser.FileName != "")
                        strPath = _browser.FileName;
                    if (strPath != "")
                    {

                        StreamWriter sw = new StreamWriter(strPath, false);
                        sw.WriteLine(strJSON);
                        sw.Close();

                        MessageBox.Show("Thank you !! JSON created successfully !! ", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        return true;
                    }
                }
                else
                {
                    MessageBox.Show("Sorry !! Unable to generate json right now !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch { }
            return false;
        }

        public bool GenerateEInvoiceJSON_SaleBook(bool _bEway, string strBillNo, string usedFor = null, string _strInvType = null)
        {
            try
            {
                string strJSON = JSONAccess.GetJSONFrom_EInvoiceSaleBillNo(_bEway,strBillNo, usedFor, _strInvType);
                if (strJSON != "")
                {
                    string strPath = "", strFileName = "EInvoice_" + DateTime.Now.Day.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Year.ToString() + "_" + DateTime.Now.Hour.ToString() + "_" + DateTime.Now.Minute.ToString() + "_" + DateTime.Now.Second.ToString() + ".json";

                    SaveFileDialog _browser = new SaveFileDialog();
                    _browser.Filter = "JSON Files (*.json)|*.json";
                    _browser.FileName = strFileName;// "EwayBill.json";
                    _browser.ShowDialog();

                    if (_browser.FileName != "")
                        strPath = _browser.FileName;
                    if (strPath != "")
                    {
                        StreamWriter sw = new StreamWriter(strPath, false);
                        sw.WriteLine(strJSON);
                        sw.Close();

                        MessageBox.Show("Thank you !! JSON created successfully !! ", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        return true;
                    }
                }
                else
                {
                    MessageBox.Show("Sorry !! Unable to generate json right now !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
            catch { }
            return false;
        }

    
        public static void DeleteFTPImage(string strImageName)
        {
            try
            {
                string strFTPPath = MainPage.strNetImagePath.Replace("http", "ftp");
                FtpWebRequest requestFileDownload = (FtpWebRequest)WebRequest.Create(strFTPPath + "/" + strImageName);
                requestFileDownload.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                requestFileDownload.Method = WebRequestMethods.Ftp.DeleteFile;
                FtpWebResponse response = (FtpWebResponse)requestFileDownload.GetResponse();
            }
            catch
            {
            }
        }

        public static bool UploadDesignImageToFTP(string strImage, string strPath)
        {
            try
            {
                string strFTPPath = MainPage.strNetImagePath.Replace("http", "ftp");
                FtpWebRequest request = FtpWebRequest.Create(new Uri(strFTPPath + "/" + strImage)) as FtpWebRequest;
                request.UseBinary = true;
                request.KeepAlive = false;
                request.Method = WebRequestMethods.Ftp.UploadFile;
                request.Credentials = new NetworkCredential(MainPage.strFTPUserName, MainPage.strFTPPassword);

                FileStream file = File.OpenRead(strPath);
                int length = 2048;
                byte[] buffer = new byte[length];
                int bytesRead = 0;
                int totalLength = Convert.ToInt32(file.Length);
                int increment = totalLength / 2048;

                Stream ftpStream = request.GetRequestStream();
                do
                {
                    bytesRead = file.Read(buffer, 0, length);
                    ftpStream.Write(buffer, 0, bytesRead);
                }
                while (bytesRead != 0);
                file.Close();
                ftpStream.Close();
                return true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry : " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return false;
        }

        public object GetPurchaseRate(ref object objDisPer, object objItem, object objCategory1, object objCategory2, object objCategory3, object objCategory4, object objCategory5, ref object objSaleRate)
        {
            object objValue = "0";
            try
            {
                string strQuery = "", strSubQuery = "";
                strSubQuery = " and Variant1='" + objCategory1 + "' and Variant2='" + objCategory2 + "' and Variant3='" + objCategory3 + "' and Variant4='" + objCategory4 + "' and Variant5='" + objCategory5 + "' ";

                strQuery += "Select Rate,(Select ISNULL(_ICM.DisPer,0) DisPer from Items _IM inner join ItemCategoryMaster  _ICM on _IM.Other=_ICM.CategoryName Where _Im.ItemName='" + objItem + "' and Rate>_ICM.FromRange and Rate<_ICM.ToRange) DisPer,SRate  from ("
                              + " Select 0 ID,  ISNULL(PurchaseRate,0) as Rate,ISNULL(SaleRate,0) as SRate from Items DM inner join ItemSecondary DMS on DM.BillCode=DMS.BillCode and DM.BillNo=DMS.BillNo Where DMS.ActiveStatus=1 and PurchaseRate!=0 and DM.ItemName='" + objItem + "' " + strSubQuery // + " Union All "
                                                                                                                                                                                                                                                                                                          //+ " Select 1 ID,ISNULL(Rate,0) Rate from StockMaster Where BillType='PURCHASE' and BillNo in (Select ISNULL(Max(BillNo),0) from StockMaster Where  BillType='PURCHASE' and ItemName='" + objItem + "' " + strSubQuery + ") and ItemName='" + objItem + "' " + strSubQuery + "  Union All "
                                                                                                                                                                                                                                                                                                          //+ " Select 2 ID,ISNULL(Rate,0) Rate from StockMaster Where BillType='OPENING' and BillNo in (Select ISNULL(Max(BillNo),0) from StockMaster Where  BillType='OPENING' and ItemName='" + objItem + "' " + strSubQuery + ") and ItemName='" + objItem + "' " + strSubQuery + " "
                              + " ) Stock Order by ID";

                //DataTable 

                DataTable dt = GetDataTable(strQuery);
                if (dt.Rows.Count > 0)
                {
                    objValue = dt.Rows[0]["Rate"];
                    objDisPer = dt.Rows[0]["DisPer"];
                    objSaleRate = dt.Rows[0]["SRate"];
                }
            }
            catch
            {
            }
            return objValue;
        }

        public object GetPurchaseRate_Return(ref object objDisPer, object objBarCode, object objItem, object objCategory1, object objCategory2, object objCategory3, object objCategory4, object objCategory5, ref object objRate)
        {
            object objMRP = "0";
            try
            {
                string strQuery = "", strSubQuery = "";
                strSubQuery = " and Variant1='" + objCategory1 + "' and Variant2='" + objCategory2 + "' and Variant3='" + objCategory3 + "' and Variant4='" + objCategory4 + "' and Variant5='" + objCategory5 + "' ";

                strQuery += "Select ID, MRP,SDisPer,Rate  from ("
                         + " Select 0 ID,MRP,SDisPer,Rate from PurchaseBookSecondary Where BarCode='" + objBarCode + "' and ItemName='" + objItem + "' " + strSubQuery + " UNION ALL "
                         + " Select 1 ID,  ISNULL(PurchaseRate,0) as MRP,0 as SDisPer,ISNULL(PurchaseRate,0) as Rate from Items DM inner join ItemSecondary DMS on DM.BillCode=DMS.BillCode and DM.BillNo=DMS.BillNo Where DMS.ActiveStatus=1 and PurchaseRate!=0 and DM.ItemName='" + objItem + "' " + strSubQuery
                         + " ) Stock Order by ID";

                //DataTable 

                DataTable dt = GetDataTable(strQuery);
                if (dt.Rows.Count > 0)
                {
                    objMRP = dt.Rows[0]["MRP"];
                    objDisPer = dt.Rows[0]["SDisPer"];
                    objRate = dt.Rows[0]["Rate"];
                }
            }
            catch
            {
            }

            return objMRP;
        }

        public object GetPurchaseRate_Other(ref object objDisPer, object objItem, object objCategory1, object objCategory2, object objCategory3, object objCategory4, object objCategory5, string strCompanyCode, ref object _SaleRate)
        {
            object objValue = "0";
            try
            {
                string strQuery = "", strSubQuery = "";
                strSubQuery = " and Variant1='" + objCategory1 + "' and Variant2='" + objCategory2 + "' and Variant3='" + objCategory3 + "' and Variant4='" + objCategory4 + "' and Variant5='" + objCategory5 + "' ";

                strQuery += " Select Rate,(Select ISNULL(_ICM.DisPer,0) DisPer from Items _IM inner join ItemCategoryMaster  _ICM on _IM.Other=_ICM.CategoryName Where _Im.ItemName='" + objItem + "' and Rate>_ICM.FromRange and Rate<_ICM.ToRange) DisPer,SRate  from ("
                         + " Select 0 ID,  ISNULL(PurchaseRate,0) as Rate,ISNULL(SaleRate,0) as SRate from Items DM inner join ItemSecondary DMS on DM.BillCode=DMS.BillCode and DM.BillNo=DMS.BillNo Where DMS.ActiveStatus=1 and DM.ItemName='" + objItem + "' " + strSubQuery + " ) Stock Order by ID ";

                DataTable dt = SearchDataOther.GetDataTable(strQuery, strCompanyCode);
                if (dt.Rows.Count > 0)
                {
                    objValue = dt.Rows[0]["Rate"];
                    objDisPer = dt.Rows[0]["DisPer"];
                    _SaleRate = dt.Rows[0]["SRate"];
                }
            }
            catch
            {
            }
            return objValue;
        }

        public object GetSaleRate_Other(object objItem, object objCategory1, object objCategory2, object objCategory3, object objCategory4, object objCategory5, ref double dQty, ref object objDisPer, DateTime _date, ref double dQtyRatio)
        {
            object objValue = "0";
            try
            {
                string strQuery = "", strSubQuery = "";
                strSubQuery = " and Variant1='" + objCategory1 + "' and Variant2='" + objCategory2 + "' and Variant3='" + objCategory3 + "' and Variant4='" + objCategory4 + "' and Variant5='" + objCategory5 + "' ";

                strQuery += " Select Rate,Qty,DisPer,QtyRatio from ("
                         + " Select 0 ID,  ISNULL(SaleRate,0) as Rate,Margin from Items DM inner join ItemSecondary DMS on DM.BillCode=DMS.BillCode and DM.BillNo=DMS.BillNo Where DMS.ActiveStatus=1 and SaleRate!=0 and DM.ItemName='" + objItem + "' " + strSubQuery //+ " Union All "                             
                         + " ) Stock OUTER APPLY (Select SUM(Qty) Qty from (Select SUM(ISNULL(Qty,0))Qty from StockMaster Where BillType in ('OPENING','PURCHASE','SALERETURN','STOCKIN') and ItemName='" + objItem + "' " + strSubQuery + " UNION ALL Select -SUM(ISNULL(Qty,0))Qty from StockMaster Where BillType in ('SALES','PURCHASERETURN') and ItemName='" + objItem + "' " + strSubQuery + " )_Stock) Qty  OUTER APPLY (Select Top 1 QtyRatio,(CASE WHEN _ICM.DisPer=0 and _ICM.Margin>0 then -1 else 1 end)*(ISNULL(_ICM.DisPer,0)-ISNULL((CASE WHEN _ICM.CategoryName Like('SHIYARAM%') and _ICM.Margin=1 and Convert(Date,'" + _date.ToString("MM/dd/yyyy") + "',103) > Convert(Date,'06/06/2019',103) then 0 else _ICM.Margin end),0)) DisPer from Items _IM inner join ItemCategoryMaster  _ICM on _IM.Other=_ICM.CategoryName Where _Im.ItemName='" + objItem + "' and Rate>_ICM.FromRange and Rate<_ICM.ToRange)_IM Order by ID";

                DataTable _dt = GetDataTable(strQuery);
                if (_dt.Rows.Count > 0)
                {
                    objValue = _dt.Rows[0]["Rate"];
                    dQty = ConvertObjectToDouble(_dt.Rows[0]["Qty"]);
                    dQtyRatio = ConvertObjectToDouble(_dt.Rows[0]["QtyRatio"]);
                    objDisPer = _dt.Rows[0]["DisPer"];

                }
            }
            catch
            {
            }
            return objValue;
        }

        public object GetSaleRate(object objItem, object objCategory1, object objCategory2, object objCategory3, object objCategory4, object objCategory5, ref double dQty, ref object objDisPer, DateTime _date)
        {
            object objValue = "0";
            try
            {
                string strQuery = "", strSubQuery = "";
                strSubQuery = " and Variant1='" + objCategory1 + "' and Variant2='" + objCategory2 + "' and Variant3='" + objCategory3 + "' and Variant4='" + objCategory4 + "' and Variant5='" + objCategory5 + "' ";

                strQuery += " Select Rate,Qty,ISNULL((Select (CASE WHEN _ICM.DisPer=0 and _ICM.Margin>0 then -1 else 1 end)*(ISNULL(_ICM.DisPer,0)-ISNULL((CASE WHEN _ICM.CategoryName Like('SHIYARAM%') and _ICM.Margin=1 and Convert(Date,'" + _date.ToString("MM/dd/yyyy") + "',101) > Convert(Date,'06/06/2019',101) then 0 else _ICM.Margin end),0)) DisPer from Items _IM inner join ItemCategoryMaster  _ICM on _IM.Other=_ICM.CategoryName Where _Im.ItemName='" + objItem + "' and Rate>_ICM.FromRange and Rate<_ICM.ToRange),0) DisPer from ("
                         + " Select 0 ID, ISNULL(PurchaseRate,0) as Rate,Margin from Items DM inner join ItemSecondary DMS on DM.BillCode=DMS.BillCode and DM.BillNo=DMS.BillNo Where DMS.ActiveStatus=1 and PurchaseRate!=0 and DM.ItemName='" + objItem + "' " + strSubQuery //+ " Union All "                             
                         + " ) Stock OUTER APPLY (Select SUM(Qty) Qty from (Select SUM(ISNULL(Qty,0))Qty from StockMaster Where BillType in ('OPENING','PURCHASE','SALERETURN','STOCKIN') and ItemName='" + objItem + "' " + strSubQuery + " UNION ALL Select -SUM(ISNULL(Qty,0))Qty from StockMaster Where BillType in ('SALES','PURCHASERETURN','STOCKOUT') and ItemName='" + objItem + "' " + strSubQuery + " )_Stock) Qty Order by ID";

                DataTable _dt = GetDataTable(strQuery);
                if (_dt.Rows.Count > 0)
                {
                    objValue = _dt.Rows[0]["Rate"];
                    dQty = ConvertObjectToDouble(_dt.Rows[0]["Qty"]);
                    objDisPer = _dt.Rows[0]["DisPer"];
                }
            }
            catch
            {
            }
            return objValue;
        }

        public string GetSalesRecordType(string strBillCode, string strBillNo)
        {
            try
            {
                object objValue = ExecuteMyScalar("Select (CASE WHEN (ISNULL(SaleBillType,'')=''OR ISNULL(SaleBillType,'')='TRADING') then 'TRADING' else 'RETAIL' end)  from SalesBook Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo + " ");
                return Convert.ToString(objValue);
            }
            catch { }
            return "";
        }

        public bool GetPurchaseRecordType(string strBillCode, string strBillNo)
        {
            try
            {
                object objValue = ExecuteMyScalar("Select BillCode from PurchaseRecord Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo + " ");
                if (Convert.ToString(objValue) != "")
                    return true;
                else
                    return false;
            }
            catch { }
            return true;
        }

        public void GetOrderSerialCodeAndSerialNo(string strOrderNo, ref string strBillCode, ref string strBillNo)
        {
            try
            {
                string strQuery = " Select OrderCode,SerialNo from OrderBooking Where (CASE When NumberCode!='' then (OrderCode+' '+CAST(OrderNo as varchar)+' '+NumberCode) else OrderCode+' '+CAST(OrderNo as varchar) end)='" + strOrderNo + "' ";
                DataTable dt = GetDataTable(strQuery);
                if (dt.Rows.Count > 0)
                {
                    strBillCode = Convert.ToString(dt.Rows[0]["OrderCode"]);
                    strBillNo = Convert.ToString(dt.Rows[0]["SerialNo"]);
                }
            }
            catch { }
        }

        public string GetPurchaseSerialCodeAndSerialNoFromOrder(string strOrderNo)
        {
            try
            {
                string strQuery = " Select (ReceiptCode+' '+CAST(ReceiptNo as varchar)) from GoodsReceive Where OrderNo='" + strOrderNo + "' ";
                object _obj = ExecuteMyScalar(strQuery);
                return Convert.ToString(_obj);
            }
            catch { return ""; }
        }

        public static void DownloadBarCodeFonts()
        {
            try
            {
                string strExePath = @"C:\Windows\Fonts\IDAutomationHC39M.ttf";
                if (!File.Exists(strExePath))
                {
                    string strPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\IDAutomationHC39M.ttf";
                    strPath = DataBaseAccess.DownloadFileFromServer(strPath, "IDAutomationHC39M.ttf");
                    if (strPath != "")
                        System.Diagnostics.Process.Start(strPath);
                }
            }
            catch { }
        }

        public static double GetCashBalanceForEachParty(string strPartyName)
        {
            double dAmt = 0;
            string strQuery = "Select SUM(Amt) Amount from ( "
                            + " Select SUM(CAST(Amount as money)) Amt from BalanceAmount BA CROSS APPLY(Select Name from SupplierMaster SM Where(AreaCode + AccountNo) = AccountStatusID and GroupName = 'CASH A/C') SM Where BA.Status = 'DEBIT' and BA.AccountID = '" + strPartyName + "'   UNION ALL "
                            + " Select - SUM(CAST(Amount as money)) Amt from BalanceAmount BA CROSS APPLY(Select Name from SupplierMaster SM Where(AreaCode + AccountNo) = AccountStatusID and GroupName = 'CASH A/C') SM Where BA.Status = 'CREDIT' and BA.AccountID = '" + strPartyName + "' ) Bal";

            object objValue = NetDBAccess.ExecuteMyScalar(strQuery);
            dAmt = ConvertObjectToDoubleStatic(objValue);
            if (dAmt < 0)
                dAmt = Math.Abs(dAmt);

            strQuery = "Select SUM(Amt) Amount from ( "
                            + " Select SUM(CAST(Amount as money)) Amt from BalanceAmount BA CROSS APPLY(Select Name from SupplierMaster SM Where(AreaCode + AccountNo) = AccountStatusID and GroupName = 'CASH A/C') SM Where BA.Status = 'DEBIT' and BA.AccountID = '" + strPartyName + "'   UNION ALL "
                            + " Select - SUM(CAST(Amount as money)) Amt from BalanceAmount BA CROSS APPLY(Select Name from SupplierMaster SM Where(AreaCode + AccountNo) = AccountStatusID and GroupName = 'CASH A/C') SM Where BA.Status = 'CREDIT' and BA.AccountID = '" + strPartyName + "' ) Bal";

            objValue = NetDBAccess.ExecuteMyScalar(strQuery);
            dAmt += ConvertObjectToDoubleStatic(objValue);

            return dAmt;
        }

        public static string GetCurrentUserComputerName(string strPartyName)
        {
            string strQuery = "Select TOP 1 ComputerName from LoginDetails Where UserName='" + MainPage.strLoginName + "'  Order by Date desc  ";
            object objValue = NetDBAccess.ExecuteMyScalar(strQuery);

            return Convert.ToString(objValue);
        }

        public double GetOpeningStockAmount(DateTime sDate)
        {
            double dAmt = 0;
            try
            {
                string strSubQuery = " and ((CASE WHEN BillType='SALES' then (Select  Top 1 SB.Date from SalesBook SB Where SB.BillCode=SM.BillCode and SB.BillNo=SM.BillNo) WHEN BillType='PURCHASE' then (Select  Top 1 SB.Date from PurchaseBook SB Where SB.BillCode=SM.BillCode and SB.BillNo=SM.BillNo) WHEN BillType in ('STOCKIN','STOCKOUT') then (Select  Top 1 SB.Date from StockTransfer SB Where SB.BillCode=SM.BillCode and SB.BillNo=SM.BillNo) WHEN BillType='SALERETURN' then (Select  Top 1 SR.Date from SaleReturn SR Where SR.BillCode=SM.BillCode and SR.BillNo=SM.BillNo) WHEN BillType='PURCHASERETURN' then (Select  Top 1 PR.Date from PurchaseReturn PR Where PR.BillCode=SM.BillCode and PR.BillNo=SM.BillNo) else DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())) end) <'" + sDate.ToString("MM/dd/yyyy") + "' OR BillType='OPENING') ";

                string strQuery = " Select SUM(CASE WHEN InQty<>0 then ((InQty-OutQty)*(IAmount/InQty)) else ((InQty-OutQty)*(OAmount/OutQty)) end) OpeningAmt from ( "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(IQty)InQty, SUM(IAmt)IAmount, SUM(OQty) OutQty, SUM(OAmt)OAmount from( "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(IQty) IQty, SUM(OQty) OQty, Rate, (SUM(IQty) * Rate) IAmt, (SUM(OQty) * Rate) OAmt from( "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, Rate from StockMaster SM Where Qty != 0 and BillType in ('OPENING', 'PURCHASE', 'SALERETURN','STOCKIN') " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, Rate   Union All "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, 0 as IQty, SUM(Qty) OQty, Rate from StockMaster SM Where  Qty != 0 and BillType in ('SALES', 'PURCHASERETURN','STOCKOUT') " + strSubQuery + "  Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, Rate "
                                + " )Stock Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, Rate )Stock Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5 )NewStock ";

                object objValue = ExecuteMyScalar(strQuery);
                if (Convert.ToString(objValue) != "")
                    dAmt = Convert.ToDouble(objValue);
            }
            catch
            {
            }
            return dAmt;
        }

        public void EnableCopyOnClipBoard(DataGridView dgrd)
        {
            //if (MainPage.strUserRole.Contains("ADMIN"))
            dgrd.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText;
            //else
            //    dgrd.ClipboardCopyMode = DataGridViewClipboardCopyMode.Disable;
        }

        public double GetClosingStockAmount(DateTime sDate)
        {
            double dAmt = 0;
            try
            {
                //string strSubQuery = " and (CASE WHEN BillType='SALES' then (Select  Top 1 SB.Date from SalesBook SB Where SB.BillCode=SM.BillCode and SB.BillNo=SM.BillNo) WHEN BillType='PURCHASE' then (Select  Top 1 SB.Date from PurchaseBook SB Where SB.BillCode=SM.BillCode and SB.BillNo=SM.BillNo) WHEN BillType='SALERETURN' then (Select  Top 1 SR.Date from SaleReturn SR Where SR.BillCode=SM.BillCode and SR.BillNo=SM.BillNo) WHEN BillType='PURCHASERETURN' then (Select  Top 1 PR.Date from PurchaseReturn PR Where PR.BillCode=SM.BillCode and PR.BillNo=SM.BillNo) WHEN BillType='OPENING' then (Select  Top 1 SB.Date from Items SB Where SB.BillCode=SM.BillCode and SB.BillNo=SM.BillNo) else DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())) end) <'" + sDate.ToString("MM/dd/yyyy") + "' ";

                string strQuery = "", strSubQuery = " and Date<'" + sDate.ToString("MM/dd/yyyy") + "' ";

                if (MainPage.strCompanyName.Contains("SARAOGI SUPER SALE") && MainPage.strSoftwareType == "AGENT")
                {
                    //if (MainPage.startFinDate < ConvertDateInExactFormat("31/01/2020"))
                    //{
                    strQuery = " Select  SUM((InQty-OutQty)*_Rate) OpeningAmt from (  "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(IQty)InQty, SUM(OQty) OutQty, ISNULL(_Rate,SRate) as _Rate from ( "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(IQty) IQty, SUM(OQty) OQty, MAX(DiscPer) as DiscPer, (MRP)MRP from( "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, MRP, DiscPer from StockMaster SM  OUTER APPLY(Select Top 1 DiscPer from PurchaseBook PB Where PB.BillCode = SM.BillCode and PB.BillNo = SM.BillNo) PB Where Qty <> 0 and BillType in ('PURCHASE') " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, MRP, Discper  UNION ALL "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, MRP, CAST(GodownName as float) as DiscPer from StockMaster SM Where Qty <> 0 and BillType in ('OPENING') " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, MRP, GodownName  UNION ALL "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, MRP, 0 as DiscPer from StockMaster SM Where Qty != 0 and BillType in ('SALERETURN','STOCKIN')  " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5,MRP  Union All "
                                + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, 0 as IQty, SUM(Qty) OQty, MRP, 0 as DiscPer from StockMaster SM Where  Qty != 0 and BillType in ('SALES', 'PURCHASERETURN','STOCKOUT')  " + strSubQuery + "  Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5,MRP "
                                + " )Stock Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5,MRP )Stock OUTER APPLY (Select (_ISS.PurchaseRate)_Rate from Items _IM OUTER APPLY (Select TOP 1 ((100.00-_ICM.DisPer)*.01) NDisPer from ItemCategoryMaster _ICM Where _IM.Other=_ICM.CategoryName and MRP>=FromRange and MRP<ToRange and MRP>0)_ICM OUTER APPLY (Select _IS.Variant1,_IS.Variant2,((_IS.PurchaseRate*ISNULL(_ICM.NDisPer,1))*((100.00-ISNULL(Stock.DiscPer,0))*0.01))PurchaseRate from ItemSecondary _IS Where _Im.BillCode=_IS.BillCode and _IM.BillNo=_IS.BillNo) _ISS  Where _IM.ItemName=Stock.ItemName and _ISS.Variant1=Stock.Variant1 and _ISS.Variant2=Stock.Variant2)_ICM OUTER APPLY (Select TOP 1 SRate from (Select 0 as ID, Max(SM.Rate) SRate from StockMaster SM Where  SM.BilLType in ('OPENING','PURCHASE') and SM.ItemName=Stock.ItemName and SM.Variant1=Stock.Variant1 and SM.Variant2=Stock.Variant2 and SM.Variant3=Stock.Variant3 and SM.MRP=Stock.MRP and _Rate IS NULL UNION ALL Select 1 as ID, Max(SM.Rate) SRate from StockMaster SM Where  SM.BilLType in ('SALERETURN','STOCKIN') and SM.ItemName=Stock.ItemName and SM.Variant1=Stock.Variant1 and SM.Variant2=Stock.Variant2 and SM.Variant3=Stock.Variant3 and SM.MRP=Stock.MRP and _Rate IS NULL)___Stock Where SRate is Not Null Order by ID asc)_ST Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, _Rate,SRate,MRP  )NewStock ";

                    //}
                    //else
                    //{
                    //    strQuery = " Select  SUM((InQty-OutQty)*_Rate) OpeningAmt from (  "
                    //                    + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(IQty)InQty, SUM(OQty) OutQty, ISNULL(_Rate,SRate) as _Rate from ( "
                    //                    + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(IQty) IQty, SUM(OQty) OQty, MAX(DiscPer) as DiscPer, (MRP)MRP from( "
                    //                    + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, MRP, DiscPer from StockMaster SM  OUTER APPLY(Select Top 1 DiscPer from PurchaseBook PB Where PB.BillCode = SM.BillCode and PB.BillNo = SM.BillNo) PB Where Qty <> 0 and BillType in ('PURCHASE') " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, MRP, Discper  UNION ALL "
                    //                    + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, MRP, CAST(GodownName as float) as DiscPer from StockMaster SM Where Qty <> 0 and BillType in ('OPENING') " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, MRP, GodownName  UNION ALL "
                    //                    + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, SUM(Qty) IQty, 0 as OQty, MRP, 0 as DiscPer from StockMaster SM Where Qty != 0 and BillType in ('SALERETURN','STOCKIN')  " + strSubQuery + " Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5,MRP  Union All "
                    //                    + " Select ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, 0 as IQty, SUM(Qty) OQty, MRP, 0 as DiscPer from StockMaster SM Where  Qty != 0 and BillType in ('SALES', 'PURCHASERETURN','STOCKOUT')  " + strSubQuery + "  Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5,MRP "
                    //                    + " )Stock Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5,MRP )Stock OUTER APPLY (Select (_ISS.PurchaseRate)_Rate from Items _IM OUTER APPLY (Select TOP 1 ((100.00-_ICM.DisPer)*.01) NDisPer from ItemCategoryMaster _ICM Where _IM.Other=_ICM.CategoryName and MRP>=FromRange and MRP<ToRange and MRP>0)_ICM OUTER APPLY (Select _IS.Variant1,_IS.Variant2,((_IS.PurchaseRate*ISNULL(_ICM.NDisPer,1))*((100.00-ISNULL(Stock.DiscPer,0))*0.01))PurchaseRate from ItemSecondary _IS Where _Im.BillCode=_IS.BillCode and _IM.BillNo=_IS.BillNo) _ISS  Where _IM.ItemName=Stock.ItemName and _ISS.Variant1=Stock.Variant1 and _ISS.Variant2=Stock.Variant2)_ICM OUTER APPLY (Select TOP 1 SRate from (Select 0 as ID, Max(SM.Rate) SRate from StockMaster SM Where  SM.BilLType in ('OPENING','PURCHASE') and SM.ItemName=Stock.ItemName and SM.Variant1=Stock.Variant1 and SM.Variant2=Stock.Variant2 and SM.MRP=Stock.MRP and _Rate IS NULL UNION ALL Select 1 as ID, Max(SM.Rate) SRate from StockMaster SM Where  SM.BilLType in ('SALERETURN','STOCKIN') and SM.ItemName=Stock.ItemName and SM.Variant1=Stock.Variant1 and SM.Variant2=Stock.Variant2 and SM.MRP=Stock.MRP and _Rate IS NULL)___Stock Where SRate is Not Null Order by ID asc)_ST Group By ItemName, Variant1, Variant2, Variant3, Variant4, Variant5, _Rate,SRate,MRP  )NewStock Where (InQty-OutQty)!=0 ";
                    //}





                }
                else
                {
                    // strQuery = "Select SUM(NQty*Rate)NetAmt from (Select SM.BrandName,SM.BarCode,SM.ItemName, SM.Variant1, SM.Variant2,INQty,(INQty-ISNULL(OutQty,0))NQty,ISNULL(PRate.Rate,0)Rate from (Select SM.BrandName,ISNULL(SM.BarCode,'')BarCode,SM.ItemName, SM.Variant1, SM.Variant2, SUM(SM.Qty)INQty from StockMaster SM Where BillType in ('OPENING','PURCHASE','STOCKIN','SALERETURN') and SM.Date<'" + sDate.ToString("MM/dd/yyyy") + "' Group by SM.BrandName,ISNULL(SM.BarCode,''),SM.ItemName, SM.Variant1, SM.Variant2   )SM left join (Select _SM.BrandName,ISNULL(_SM.BarCode,'')BarCode,_SM.ItemName, _SM.Variant1,_SM.Variant2,SUM(_SM.Qty)OutQty from StockMaster _SM Where _SM.BillType in ('SALES','PURCHASERETURN','STOCKOUT') and _SM.Date<'" + sDate.ToString("MM/dd/yyyy")+ "' Group by _SM.BrandName,ISNULL(_SM.BarCode,''),_SM.ItemName,_SM.Variant1,_SM.Variant2)_SM on SM.BrandName=_SM.BrandName and SM.BarCode=_SM.BarCode and SM.ItemName=_SM.ItemName and SM.Variant1=_SM.Variant1 and SM.Variant2=_SM.Variant2 left join (Select BarCode,BrandName,ItemName,Variant1,Variant2,Rate,ROW_NUMBER() OVER (PARTITION BY BarCode,BrandName,ItemName,Variant1,Variant2 ORDER BY ID ASC) AS RNo from (Select * from (SELECT 0 ID,BarCode,BrandName,ItemName,Variant1,Variant2,Rate,ROW_NUMBER() OVER (PARTITION BY BarCode,BrandName,ItemName,Variant1,Variant2 ORDER BY Date DESC) AS RNumber FROM StockMaster SM1 Where BillType in ('OPENING','PURCHASE','STOCKIN') and SM1.Rate>0 and SM1.Date<'" + sDate.ToString("MM/dd/yyyy") + "' )PBS Where RNumber=1 UNION ALL Select * from (SELECT 1 ID,BarCode,BrandName,ItemName,Variant1,Variant2,Rate,ROW_NUMBER() OVER (PARTITION BY BarCode,BrandName,ItemName,Variant1,Variant2 ORDER BY BillNo DESC) AS RNumber FROM StockMaster SM1 Where BillType in ('SALERETURN') and SM1.Rate>0 and SM1.Date<'" + sDate.ToString("MM/dd/yyyy") + "')PBS Where RNumber=1)_Purchase )PRate on SM.BrandName=PRate.BrandName and SM.BarCode=PRate.BarCode and SM.ItemName=PRate.ItemName and SM.Variant1=PRate.Variant1 and SM.Variant2=PRate.Variant2  and RNo=1)Stock ";
                    //strQuery = " Select SUM((InQty-SQty)*Rate) NetAmt from (  Select _IM.Category,BrandName,GroupName,MakeName,_Stock.ItemName,_Stock.Variant1,_Stock.Variant2,InQty,ISNULL(SQty,0) SQty,ISNULL(MRP,ISNULL(SMRP,SSMRP))MRP,PB.BillCode,ISNULL(PBillDate,ISNULL(SDate,SSDate)) as PBillDate,PB.PurchasePartyID,ISNULL(Rate,ISNULL(SRate,SSRate)) Rate  from (   Select BarCode,BrandName,ItemName, Variant1, Variant2, SUM(InQty)InQty from(   Select ISNULL(BarCode,'')BarCode,ISNULL(BrandName,'') BrandName,ItemName, Variant1, Variant2, SUM(Qty)InQty from StockMaster SM Where BillType in ('OPENING') Group by ISNULL(BarCode,''),ISNULL(BrandName,''),ItemName, Variant1, Variant2  UNION ALL   Select ISNULL(BarCode,'')BarCode,ISNULL(BrandName,'') BrandName,ItemName, Variant1, Variant2, SUM(Qty)InQty from StockMaster SM Where BillType in ('PURCHASE') Group by ISNULL(BarCode,''),ISNULL(BrandName,''),ItemName, Variant1, Variant2  UNION ALL   Select ISNULL(BarCode,'')BarCode,ISNULL(BrandName,'') BrandName,ItemName, Variant1, Variant2, SUM(Qty)InQty from StockMaster SM Where BillType in ('SALERETURN','STOCKIN') Group by ISNULL(BarCode,''),ISNULL(BrandName,''),ItemName, Variant1, Variant2   )_Stock Group by BarCode,BrandName,ItemName, Variant1, Variant2   )_Stock OUTER APPLY(Select _IM.Other as Category,GroupName,MakeName from Items _IM Where _IM.ItemName = _Stock.ItemName)_IM OUTER APPLY(Select SUM(Qty)SQty from StockMaster SM Where ISNULL(SM.BrandName,'') = ISNULL(_Stock.BrandName,'') and ISNULL(SM.BarCode,'') = ISNULL(_Stock.BarCode,'') and SM.ItemName = _Stock.ItemName and SM.Variant1 = _Stock.Variant1 and SM.Variant2 = _Stock.Variant2  and BillType in ('SALES', 'PURCHASERETURN','STOCKOUT'))_ST   OUTER APPLY(Select Top 1 PB.BillCode,PB.Date as PBillDate, PB.PurchasePartyID, PBS.Rate,PBS.MRP from PurchaseBookSecondary PBS inner join PurchaseBook PB on PBS.BillCode = PB.BillCode and PBS.BillNO = PB.BillNo Where ISNULL(PBS.BrandName,'') = ISNULL(_Stock.BrandName,'') and  ISNULL(PBS.BarCode,'') = ISNULL(_Stock.BarCode,'') and PBS.ItemName = _Stock.ItemName and PBS.Variant1 = _Stock.Variant1 and PBS.Variant2 = _Stock.Variant2 Order by PB.Date desc)PB  OUTER APPLY(Select Top 1 SM.Rate as SRate,SM.MRP as SMRP,SM.Date as SDate from StockMaster SM Where BillType in ('SALERETURN', 'OPENING','STOCKIN') and ISNULL(SM.BrandName,'') = ISNULL(_Stock.BrandName,'') and ISNULL(SM.BarCode,'') = ISNULL(_Stock.BarCode,'') and SM.ItemName = _Stock.ItemName and SM.Variant1 = _Stock.Variant1 and SM.Variant2 = _Stock.Variant2 and SM.Rate!=0 and ISNULL(PB.Rate,0)=0)_STR  OUTER APPLY(Select Top 1 SM.Rate as SSRate,SM.MRP as SSMRP,SM.Date as SSDate from StockMaster SM Where BillType in ('SALES','STOCKOUT') and ISNULL(SM.BrandName,'') = ISNULL(_Stock.BrandName,'') and ISNULL(SM.BarCode,'') = ISNULL(_Stock.BarCode,'') and SM.ItemName = _Stock.ItemName and SM.Variant1 = _Stock.Variant1 and SM.Variant2 = _Stock.Variant2 and SM.Rate!=0 and ISNULL(_STR.SRate,0)=0 and ISNULL(PB.Rate,0)=0 )_SSales Where (InQty!=0 OR SQty!=0)  and ISNULL(PBillDate,ISNULL(SDate,SSDate))<='" + sDate.ToString("MM/dd/yyyy") + "' )Stock ";

                    strQuery = "Select SUM(NQty*Rate)NetAmt from (Select SM.BrandName,SM.BarCode,SM.ItemName, SM.Variant1, SM.Variant2,INQty,(INQty-ISNULL(OutQty,0))NQty,ISNULL(PRate.AvgRate,0)+ISNULL(Rate,0)Rate from (Select SM.BrandName,ISNULL(SM.BarCode,'')BarCode,SM.ItemName, SM.Variant1, SM.Variant2, SUM(SM.Qty)INQty,0 Rate from StockMaster SM Where BillType in ('OPENING','PURCHASE','STOCKIN','SALERETURN') and SM.Date<'" + sDate.ToString("MM/dd/yyyy") + "' Group by SM.BrandName,ISNULL(SM.BarCode,''),SM.ItemName, SM.Variant1, SM.Variant2  UNION ALL SELECT BrandName,ISNULL(BarCode,'')BarCode,ItemName, Variant1, Variant2, 0 INQty, AvgRate FROM(SELECT BrandName,ISNULL(BarCode,'')BarCode,ItemName, Variant1, Variant2,SUM(Qty)TSQty,(SUM(SAmt)/SUM(Qty))AvgRate FROM (Select SO.BrandName, ISNULL(SO.BarCode, '')BarCode, SO.ItemName, SO.Variant1, SO.Variant2,Qty,(Qty)*(Rate)SAmt from StockMaster SO Where SO.BillType in ('SALES', 'PURCHASERETURN', 'STOCKOUT')  and SO.Date<'" + sDate.ToString("MM/dd/yyyy") + "' )SOLD Group by SOLD.BrandName,ISNULL(SOLD.BarCode, ''),SOLD.ItemName,SOLD.Variant1,SOLD.Variant2 )OUTS WHERE (Select COUNT(*) from StockMaster ISM Where BillType in ('OPENING','PURCHASE','STOCKIN','SALERETURN') AND ISM.BrandName = OUTS.BrandName  and ISNULL(ISM.BarCode,'')= ISNULL(OUTS.BarCode,'') and ISM.ItemName = OUTS.ItemName and ISM.Variant1 = OUTS.Variant1 and ISM.Variant2 = OUTS.Variant2    ) = 0 )SM left join (Select _SM.BrandName,ISNULL(_SM.BarCode,'')BarCode,_SM.ItemName, _SM.Variant1,_SM.Variant2,SUM(_SM.Qty)OutQty from StockMaster _SM Where _SM.BillType in ('SALES','PURCHASERETURN','STOCKOUT') and _SM.Date<'" + sDate.ToString("MM/dd/yyyy") + "' Group by _SM.BrandName,ISNULL(_SM.BarCode,''),_SM.ItemName,_SM.Variant1,_SM.Variant2)_SM on SM.BrandName=_SM.BrandName and ISNULL(SM.BarCode,'')=ISNULL(_SM.BarCode,'') and SM.ItemName=_SM.ItemName and SM.Variant1=_SM.Variant1 and SM.Variant2=_SM.Variant2 left join (SELECT ROW_NUMBER() OVER (PARTITION BY BarCode,BrandName,ItemName,Variant1,Variant2 ORDER BY ID ASC) AS RNo , BrandName,BarCode,ItemName,Variant1,Variant2,SUM(PQty)TPQty,CAST((SUM(PAmt)/SUM(PQty)) as Numeric(18,4))AvgRate FROM (  SELECT 0 ID ,BrandName,BarCode,ItemName,Variant1,Variant2,Qty PQty ,Qty*(CASE WHEN ST.TaxIncluded = 1 then (SELECT NetRate FROM GetTaxRate(SM.ItemName,SM.MRP,SM.Rate)) else isnull(SM.Rate,0) end )PAmt  FROM StockMaster SM  LEFT JOIN PurchaseBook PB on Sm.BillNo = PB.BillNo AND SM.BillCode = PB.BillCode  LEFT JOIN SaleTypeMaster ST on PB.PurchaseType = ST.TaxName AND ST.SaleType = 'PURCHASE'  WHERE Qty > 0 AND  BillType IN ('OPENING','PURCHASE','STOCKIN') and SM.Date < '" + sDate.ToString("MM/dd/yyyy") + "'  UNION ALL  SELECT 1 ID ,BrandName,BarCode,ItemName,Variant1,Variant2,Qty PQty ,Qty*(CASE WHEN ST.TaxIncluded = 1 then (SELECT NetRate FROM GetTaxRate(SM.ItemName,SM.MRP,SM.Rate)) else isnull(SM.Rate,0) end )PAmt  FROM StockMaster SM  LEFT JOIN PurchaseBook PB on Sm.BillNo = PB.BillNo AND SM.BillCode = PB.BillCode  LEFT JOIN SaleTypeMaster ST on PB.PurchaseType = ST.TaxName AND ST.SaleType = 'PURCHASE'	 WHERE Qty > 0 AND BillType IN ('SALERETURN') and SM.Date < '" + sDate.ToString("MM/dd/yyyy") + "' )Ratt GROUP BY BrandName,BarCode,ItemName,Variant1,Variant2,ID)PRate on SM.BrandName=PRate.BrandName and ISNULL(SM.BarCode,'')=ISNULL(PRate.BarCode,'') and SM.ItemName=PRate.ItemName and SM.Variant1=PRate.Variant1 and SM.Variant2=PRate.Variant2  and RNo=1)Stock";
                }
                object objValue = ExecuteMyScalar(strQuery);
                if (Convert.ToString(objValue) != "")
                    dAmt = Convert.ToDouble(objValue);
            }
            catch(Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return dAmt;
        }

        public static bool GetLastLoginComputerName()
        {
            try
            {
                string strComputerName = (Environment.MachineName.Replace("'", "") + "/" + Environment.UserName.Replace("'", "")).ToUpper(), strValue = "";
                string strQuery = "Select TOP 1 UPPER(ComputerName) as ComputerName from LoginDetails Where UserName='" + MainPage.strLoginName + "' and Date>CONVERT(date,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),100) Order by Date desc";
                object objValue = ExecuteMyScalar(strQuery);
                strValue = Convert.ToString(objValue);
                if (strValue != strComputerName && strValue != "")
                {
                    MessageBox.Show("Warning ! You have logged out and Already logged in on " + strValue + ".", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    MainPage.mymainObject.Close();
                    return false;
                }

            }
            catch { return false; }
            return true;
        }

        public static int LogoutFromThisComputerName()
        {
            int _count = 0;
            try
            {
                string strComputerName = (Environment.MachineName.Replace("'", "") + "/" + Environment.UserName.Replace("'", "")).ToUpper();
                string strQuery = "UPDATE LoginDetails Set Remark='LOGOUT' Where ID in (Select MAX(ID) from LoginDetails Where ComputerName='" + strComputerName + "' and UserName='" + MainPage.strLoginName + "') ";
                _count = ExecuteMyNonQuery(strQuery);
            }
            catch { }
            return _count;
        }

        public DataTable GetRelatedPartyDetails(string strPartyName)
        {
            string strQuery = " Select (AreaCode+AccountNo+' '+Name) as Name,ChqDate from SupplierMaster SM OUTER APPLY (Select TOP 1 CONVERT(varchar,MAX(CD.Date),103) ChqDate from ChequeDetails CD Where CD.CreditAccountID=(SM.AreaCode+SM.AccountNo) and ChequeType='SECURITY' and Status='PENDING')_CD Where (SM.AreaCode+SM.AccountNo+' '+SM.Name)!='" + strPartyName + "' and SM.GroupName!='SUB PARTY' and SM.Other!='' and SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+SM1.AccountNo+' '+SM1.Name)='" + strPartyName + "')  Order by Name ";
            DataTable _dt = GetDataTable(strQuery);
            return _dt;
        }


        public DataSet GetRelatedPartyDetailsWithChequeDate(string strPartyName)
        {
            DataSet _ds = new DataSet();
            string[] strName = strPartyName.Split(' ');
            if (strName.Length > 1)
            {
                string strQuery = " Select Distinct (AreaCode+AccountNo+' '+Name) as Name,_CD.ChqDate,TINNumber as Grade,MobileNo,AmountLimit,Category,BlackList,BlackListReason,TransactionLock,'' as LastPaymentDate,0 as LastPayment,UPPER(SM.Other1) as OrangeList from SupplierMaster SM OUTER APPLY (Select TOP 1 CONVERT(varchar,MAX(CD.Date),103) ChqDate from ChequeDetails CD Where CD.CreditAccountID=(SM.AreaCode+SM.AccountNo) and ChequeType='SECURITY' and Status='PENDING')_CD Where (SM.AreaCode+SM.AccountNo)!='" + strName[0] + "' and SM.Other!='' and SM.GroupName!='SUB PARTY' and SM.Other in (Select SM1.Other from SupplierMaster SM1 Where (SM1.AreaCode+SM1.AccountNo)='" + strName[0] + "')  Order by Name "
                                + " Select Top 1 TINNumber as Grade,MobileNo,AmountLimit,Category,BlackList,BlackListReason,TransactionLock,'' LastPaymentDate,0 as LastPayment,UPPER(SM.Other1) as OrangeList, (Select TOP 1 CONVERT(varchar,MAX(CD.Date),103) _ChqDate from ChequeDetails CD Where CD.CreditAccountID=(AreaCode+AccountNo) and ChequeType='SECURITY' and Status='PENDING') _ChqDate from SupplierMaster SM  Where (AreaCode+AccountNo)='" + strName[0] + "' ";

                _ds = GetDataSetRecord(strQuery);
            }
            return _ds;
        }

        private DataTable CreateDataTableForPrint()
        {
            ChangeCurrencyToWord currency = new ChangeCurrencyToWord();
            DataTable myDataTable = new DataTable();
            try
            {
                myDataTable.Columns.Add("CompanyName", typeof(String));
                myDataTable.Columns.Add("PartyName", typeof(String));
                myDataTable.Columns.Add("Address", typeof(String));
                myDataTable.Columns.Add("PostOffice", typeof(String));
                myDataTable.Columns.Add("PhoneNo", typeof(String));
                myDataTable.Columns.Add("DatePeriod", typeof(String));
                myDataTable.Columns.Add("Date", typeof(String));
                myDataTable.Columns.Add("Account", typeof(String));
                myDataTable.Columns.Add("DebitAmt", typeof(String));
                myDataTable.Columns.Add("CreditAmt", typeof(String));
                myDataTable.Columns.Add("Balance", typeof(String));
                myDataTable.Columns.Add("Description", typeof(String));
                myDataTable.Columns.Add("TotalDebit", typeof(String));
                myDataTable.Columns.Add("TotalCredit", typeof(String));
                myDataTable.Columns.Add("TotalBalance", typeof(String));
                myDataTable.Columns.Add("AmountInWord", typeof(String));
                myDataTable.Columns.Add("UserName", typeof(String));
                myDataTable.Columns.Add("OnAccount", typeof(String));
                myDataTable.Columns.Add("BankName", typeof(String));
                myDataTable.Columns.Add("BranchName", typeof(String));
                myDataTable.Columns.Add("AccountNo", typeof(String));
                myDataTable.Columns.Add("IFSCCode", typeof(String));
                myDataTable.Columns.Add("FirmName", typeof(String));
                myDataTable.Columns.Add("CompanyAddress", typeof(String));
                myDataTable.Columns.Add("CompanyEmail", typeof(String));
                myDataTable.Columns.Add("CompanyGSTNo", typeof(String));
                myDataTable.Columns.Add("CompanyCINNo", typeof(String));


                string strQuery = "", strDate = "", strPartyName = "";
                strQuery += " Select AccountID,ID,Convert(varchar,Date,103) Date, CONVERT(varchar,Date,103)BDate,ISNULL(UPPER(AccountStatus),'') AccountStatus,Description,DebitAmt,CreditAmt from (  "
                         + " Select 0 as ID,BA.BalanceID,AccountID,Date,AccountStatus,Description,(Case when Status = 'Debit' then Amount else '' end) DebitAmt,(Case when Status = 'Credit' then Amount else '' end) CreditAmt from BalanceAmount BA CROSS APPLY (Select Name from SupplierMaster SM Where(AreaCode + AccountNo) = AccountID and GroupName = 'SUNDRY DEBTORS') SM Where AccountStatus = 'OPENING' and CAST(Amount as Money) > 0 and Tick = 'FALSE' Union All "
                         + " Select 1 as ID, BA.BalanceID, AccountID, Date, (CASE When AccountStatus = 'SALES A/C' OR AccountStatus = 'PURCHASE A/C' OR AccountStatus = 'SALE RETURN' OR AccountStatus = 'PURCHASE RETURN' OR AccountStatus = 'JOURNAL A/C' OR AccountStatus = 'SALE SERVICE' OR AccountStatus = 'CREDIT NOTE' OR AccountStatus = 'DEBIT NOTE' then AccountStatus else dbo.GetFullName(AccountStatusID) end + (CASE When VoucherCode != '' then ' | ' + VoucherCode + ' ' + CAST(VoucherNo as varchar) else '' end)) AccountStatus,Description,(Case when Status = 'Debit' then Amount else '' end) DebitAmt,(Case when Status = 'Credit' then Amount else '' end) CreditAmt from BalanceAmount BA  CROSS APPLY (Select Name from SupplierMaster SM Where(AreaCode + AccountNo) = AccountID and GroupName = 'SUNDRY DEBTORS') SM OUTER APPLY(Select BA1.Tick as _Tick from BalanceAmount BA1 Where BA1.AccountStatus = 'OPENING' and CAST(AMount as Money) > 0 and BA1.AccountID = BA.AccountID) BA1 Where AccountStatus != 'OPENING' and CAST(Amount as Money) > 0  and(ISNULL(_Tick, 'True') != BA.Tick OR 'FALSE' = BA.Tick) "
                         + " ) Balance Order By AccountID, ID, Balance.Date "
                         + " Select AccountNo,(AreaCode + AccountNo)AccountID,Name,(SM.Address + ', ' + SM.Station + ', ' + SM.State + '-' + SM.PinCode)Address,(SM.MobileNo + ' ' + SM.PhoneNo)PhoneNo,SM.AccountNo,CD.* from SupplierMaster SM Outer Apply(Select TOP 1 CD.FullCompanyName, (Address + '\n' + CD.StateName + '-' + CAST(CD.PinCode as varchar))CompanyAddress, ('Ph. : ' + CD.STDNo + '-' + CD.PhoneNo + ', Email : ' + CD.EmailId) CompanyPhoneNo, CD.TinNo as CompanyTIN, CD.StateName, CD.GSTNo, CD.PANNo, CD.CINNumber from CompanyDetails CD  Order by CD.ID asc) CD Where GroupName = 'SUNDRY DEBTORS' ";

                DataSet _ds = GetDataSetRecord(strQuery);

                if (_ds.Tables.Count > 0)
                {
                    strDate = "Date Period : From " + MainPage.startFinDate.ToString("dd/MM/yyyy") + " To " + MainPage.endFinDate.ToString("dd/MM/yyyy");
                    DataTable _dtBalance = _ds.Tables[0], _dtPartyDetail = _ds.Tables[1];

                    DataTable _dtParty = _dtBalance.DefaultView.ToTable(true, "AccountID");
                    foreach (DataRow row in _dtParty.Rows)
                    {
                        myDataTable.Rows.Clear();
                        DataRow[] _rows = _dtBalance.Select("AccountID='" + row["AccountID"] + "' ");
                        if (_rows.Length > 0)
                        {
                            DataTable _dtDetail = _rows.CopyToDataTable();
                            DataView _dv = _dtDetail.DefaultView;
                            _dv.Sort = "ID,Date";
                            _dtDetail = _dv.ToTable();

                            DataRow[] _drPartyDetails = _dtPartyDetail.Select("AccountID='" + row["AccountID"] + "' ");

                            strPartyName = (_drPartyDetails[0]["AccountID"] + " " + _drPartyDetails[0]["Name"]);

                            double dDAmt = 0, dCAmt = 0, dDebitAmt = 0, dCreditAmt = 0, dBalanceAmt = 0, dNetBalanceAmt = 0;
                            foreach (DataRow rowDetails in _dtDetail.Rows)
                            {
                                try
                                {
                                    DataRow dRow = myDataTable.NewRow();

                                    dRow["CompanyName"] = MainPage.strPrintComapanyName;
                                    dRow["PartyName"] = strPartyName;

                                    dRow["DatePeriod"] = strDate;
                                    dRow["Date"] = rowDetails["Date"];
                                    dRow["Account"] = rowDetails["AccountStatus"];

                                    if (Convert.ToString(rowDetails["DebitAmt"]) != "")
                                    {
                                        dDAmt = ConvertObjectToDouble(rowDetails["DebitAmt"]);
                                        dDebitAmt += dDAmt;
                                        dBalanceAmt += dDAmt;

                                        dRow["DebitAmt"] = dDAmt.ToString("N2", MainPage.indianCurancy);
                                        dRow["CreditAmt"] = "";
                                    }
                                    else
                                    {
                                        dCAmt = ConvertObjectToDouble(rowDetails["CreditAmt"]);
                                        dCreditAmt += dCAmt;
                                        dBalanceAmt -= dCAmt;

                                        dRow["DebitAmt"] = dCAmt.ToString("N2", MainPage.indianCurancy);
                                        dRow["CreditAmt"] = "";
                                    }
                                    if (dBalanceAmt > 0)
                                        dRow["Balance"] = dBalanceAmt.ToString("N2", MainPage.indianCurancy) + " Dr";
                                    else if (dBalanceAmt < 0)
                                        dRow["Balance"] = Math.Abs(dBalanceAmt).ToString("N2", MainPage.indianCurancy) + " Dr";
                                    else
                                        dRow["Balance"] = "0.00";

                                    dRow["Description"] = rowDetails["Description"];
                                    dRow["OnAccount"] = "0";

                                    dRow["UserName"] = MainPage.strLoginName + " ,  Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");
                                    myDataTable.Rows.Add(dRow);
                                }
                                catch
                                {
                                }
                            }


                            myDataTable.Rows[0]["PhoneNo"] = _drPartyDetails[0]["PhoneNo"];
                            myDataTable.Rows[0]["FirmName"] = _drPartyDetails[0]["GroupName"];

                            myDataTable.Rows[0]["CompanyAddress"] = _drPartyDetails[0]["CompanyAddress"];
                            myDataTable.Rows[0]["CompanyEmail"] = _drPartyDetails[0]["CompanyPhoneNo"];
                            myDataTable.Rows[0]["CompanyGSTNo"] = "GSTIN : " + _drPartyDetails[0]["GSTNo"];
                            myDataTable.Rows[0]["CompanyCINNo"] = "CIN No : " + _drPartyDetails[0]["CINNumber"];

                            myDataTable.Rows[0]["BankName"] = "ICICI BANK";
                            myDataTable.Rows[0]["BranchName"] = "DELHI";
                            myDataTable.Rows[0]["AccountNo"] = "SASUSP" + ConvertObjectToDouble(_drPartyDetails[0]["AccountNo"]).ToString("000000");
                            myDataTable.Rows[0]["IFSCCode"] = "ICIC0000106";

                            int _rCount = myDataTable.Rows.Count - 1;
                            string strNumeric = "Zero";

                            myDataTable.Rows[_rCount]["TotalDebit"] = dDebitAmt.ToString("N2", MainPage.indianCurancy);
                            myDataTable.Rows[_rCount]["TotalCredit"] = dCreditAmt.ToString("N2", MainPage.indianCurancy);

                            dNetBalanceAmt = Math.Abs(dBalanceAmt);

                            if (dBalanceAmt > 0)
                            {
                                strNumeric = currency.changeCurrencyToWords(dNetBalanceAmt);
                                myDataTable.Rows[_rCount]["TotalBalance"] = dBalanceAmt.ToString("N2", MainPage.indianCurancy) + " Dr";
                                strNumeric += " Debit";
                            }
                            else
                            {
                                strNumeric = currency.changeCurrencyToWords(dNetBalanceAmt);
                                myDataTable.Rows[_rCount]["TotalBalance"] = Math.Abs(dBalanceAmt).ToString("N2", MainPage.indianCurancy) + " Cr";
                                strNumeric += " Credit";
                            }

                            myDataTable.Rows[_rCount]["AmountInWord"] = strNumeric;
                        }
                    }
                }
            }
            catch
            {
            }
            return myDataTable;
        }

        protected internal int Random_No_2
        {
            get
            {
                Random objR = new Random();
                return objR.Next(10, 99)+DateTime.Now.Millisecond;
            }
            set { }
        }


        protected internal int Random_No
        {
            get
            {
                Random objR = new Random();
                return objR.Next(100, 999);
            }
            set { }
        }

        protected internal int Random_No_4
        {
            get
            {
                Random objR = new Random();
                return objR.Next(1000, 9999);
            }
            set { }
        }

        protected internal string Random_No_Alpha
        {
            get
            {
                Random obj = new Random();
                var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                return new string(chars.Select(c => chars[obj.Next(chars.Length)]).Take(2).ToArray());
            }
            set { }
        }


        private const int Keysize = 256;
        private const int DerivationIterations = 1000;

        public static string Encrypt(string plainText, string passPhrase)
        {
            // Salt and IV is randomly generated each time, but is preprended to encrypted cipher text
            // so that the same Salt and IV values can be used when decrypting.  
            var saltStringBytes = Generate256BitsOfRandomEntropy();
            var ivStringBytes = Generate256BitsOfRandomEntropy();
            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
            //using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))
            {
                var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations);
                var keyBytes = password.GetBytes(Keysize / 8);
                using (var symmetricKey = new RijndaelManaged())
                {
                    symmetricKey.BlockSize = 256;
                    symmetricKey.Mode = CipherMode.CBC;
                    symmetricKey.Padding = PaddingMode.PKCS7;
                    using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, ivStringBytes))
                    {
                        using (var memoryStream = new MemoryStream())
                        {
                            using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                            {
                                cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);
                                cryptoStream.FlushFinalBlock();
                                var cipherTextBytes = saltStringBytes;
                                cipherTextBytes = cipherTextBytes.Concat(ivStringBytes).ToArray();
                                cipherTextBytes = cipherTextBytes.Concat(memoryStream.ToArray()).ToArray();
                                memoryStream.Close();
                                cryptoStream.Close();
                                return Convert.ToBase64String(cipherTextBytes);
                            }
                        }
                    }
                }
            }
        }



        public static string Decrypt(string cipherText, string passPhrase)
        {

            var cipherTextBytesWithSaltAndIv = Convert.FromBase64String(cipherText);
            var saltStringBytes = cipherTextBytesWithSaltAndIv.Take(Keysize / 8).ToArray();
            var ivStringBytes = cipherTextBytesWithSaltAndIv.Skip(Keysize / 8).Take(Keysize / 8).ToArray();
            var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip((Keysize / 8) * 2).Take(cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray();

            //using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))
            {
                var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations);
                var keyBytes = password.GetBytes(Keysize / 8);
                using (var symmetricKey = new RijndaelManaged())
                {
                    symmetricKey.BlockSize = 256;
                    symmetricKey.Mode = CipherMode.CBC;
                    symmetricKey.Padding = PaddingMode.PKCS7;
                    using (var decryptor = symmetricKey.CreateDecryptor(keyBytes, ivStringBytes))
                    {
                        using (var memoryStream = new MemoryStream(cipherTextBytes))
                        {
                            using (var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
                            {
                                var plainTextBytes = new byte[cipherTextBytes.Length];
                                var decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);
                                memoryStream.Close();
                                cryptoStream.Close();
                                return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount);
                            }
                        }
                    }
                }
            }
        }

        private static byte[] Generate256BitsOfRandomEntropy()
        {
            var randomBytes = new byte[32];
            //using (var rngCsp = new RNGCryptoServiceProvider())
            {
                var rngCsp = new RNGCryptoServiceProvider();
                rngCsp.GetBytes(randomBytes);
            }
            return randomBytes;
        }

        public int UpdateExtendedLimitAutomatically()
        {
            int _count = 0;
            try
            {
                string strQuery = "", strPartyName = GetExtendtedLimitPartyName();
                if (strPartyName != "")
                {
                    strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) "
                             + "  Select 'PARTYMASTER' as [BillType], [AreaCode] as [BillCode],[AccountNo] as [BillNo],DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())) as [Date],AmountLimit as [NetAmt],'BULK_OPERATION' as [UpdatedBy],1 as [InsertStatus],0 as [UpdateStatus],'UPDATION' as [EditStatus] from SupplierMaster Where GroupName in ('SUNDRY DEBTORS') and Other in (" + strPartyName + ") "
                             + " Update SupplierOtherDetails Set UpdateStatus=1,UpdatedDate=DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())) Where (AreaCode+AccountNo) in (Select (AreaCode+AccountNo) from SupplierMaster Where GroupName='SUNDRY DEBTORS' and Other in (" + strPartyName + ")) "
                             + " Update SupplierMaster Set ExtendedAmt=0,UpdateStatus=1 Where GroupName='SUNDRY DEBTORS' and Other in (" + strPartyName + ") ";

                    _count = ExecuteMyNonQuery(strQuery);
                }
            }
            catch { }
            return _count;
        }

        public string GetExtendtedLimitPartyName()
        {
            string strQuery = "Select SParty from (Select Other as SParty,SUM(Amt) Amount from (Select AccountID,SUM(CAST(Amount as Money)) Amt from BalanceAmount Where Status='DEBIT' Group by AccountID UNION ALL Select AccountID,-SUM(CAST(Amount as Money))Amt from BalanceAmount Where Status='CREDIT' Group by AccountID )_Balance Cross Apply (Select Other from SupplierMaster Where GroupName in ('SUNDRY DEBTORS') and (AreaCode+AccountNo)=AccountID)SM Group by Other)_Balance Cross Apply (Select Max(AmountLimit) as AmountLimit,MAX(CAST(ExtendedAmt as money)) ExtendedAmt from SupplierMaster Where GroupName in ('SUNDRY DEBTORS') and SParty=Other)SM  Where AmountLimit>0 and CAST(ExtendedAmt as money)>0 and Amount<AmountLimit ";
            DataTable _dt = GetDataTable(strQuery);
            string strPartyName = "";
            foreach (DataRow row in _dt.Rows)
            {
                if (strPartyName != "")
                    strPartyName += ",";
                strPartyName += "'" + row["SParty"] + "'";
            }

            return strPartyName;
        }

        protected internal int GetDownloadStatus(string strDate)
        {
            string strQuery = " if not exists (Select * from BulkLedgerPosting WHere AccountID='DOWNLOAD' and Date='" + strDate + "') begin INSERT into BulkLedgerPosting Values('DOWNLOAD', '" + strDate + "', 1, '" + MainPage.strLoginName + "') end ";
            int count = ExecuteMyNonQuery_WithoutMsg(strQuery);
            return count;
        }

        public void GetTodayBirthdayDetails()
        {
            string strQuery = " Select 'BIRTHDAY' WishType,(SM.AreaCode+SM.AccountNo+' '+Name) PartyName,SM.Other as SSSName,ContactPerson,GroupName,Category,MobileNo,WhatsappNo,EmailID,CONVERT(varchar,(CASE WHEN ISNULL(DOB,'')<>'' then DOB else NULL end),103) as DOB,CONVERT(varchar,(CASE WHEN ISNULL(DOA,'')<>'' then DOA else NULL end),103) as DOA,SpouseName,CDOB,CDOA,CDate  from SupplierMaster SM CROSS APPLY (Select WaybillUserName as WhatsappNo,SpouseName,(CASE WHEN DOB='1900-01-01 00:00:00.000' then NULL else DOB end) DOB,(CASE WHEN DOA='1900-01-01 00:00:00.000' then NULL else DOA end) DOA,(CASE WHEN DOB<>'1900-01-01 00:00:00.000' then CONVERT(Date,''+CAST(DATEPART(MM,DOB) as varchar)+'/'+CAST(DATEPART(dd,DOB) AS varchar)+'/2020',0) else NULL end) CDOB,(CASE WHEN DOA<>'1900-01-01 00:00:00.000' then CONVERT(Date,''+CAST(DATEPART(MM,DOA) as varchar)+'/'+CAST(DATEPART(dd,DOA) AS varchar)+'/2020',0) else NULL end) CDOA,CONVERT(Date,''+CAST(DATEPART(MM,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) as varchar)+'/'+CAST(DATEPART(dd,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) AS varchar)+'/2020',0) as CDate from SupplierOtherDetails SOD Where SM.AreaCode=SOD.AreaCode and SM.AccountNo=SOD.AccountNo) SOD Where TransactionLock=0 and  (ISNULL(SOD.DOB,'')!='' OR ISNULL(SOD.DOA,'')!='') and CDOB=CDate UNION ALL "
                            + " Select 'ANNIVERSARY' WishType, (SM.AreaCode+SM.AccountNo+' '+Name) PartyName,SM.Other as SSSName,ContactPerson,GroupName,Category,MobileNo,WhatsappNo,EmailID,CONVERT(varchar,(CASE WHEN ISNULL(DOB,'')<>'' then DOB else NULL end),103) as DOB,CONVERT(varchar,(CASE WHEN ISNULL(DOA,'')<>'' then DOA else NULL end),103) as DOA,SpouseName,CDOB,CDOA,CDate  from SupplierMaster SM CROSS APPLY (Select WaybillUserName as WhatsappNo,SpouseName,(CASE WHEN DOB='1900-01-01 00:00:00.000' then NULL else DOB end) DOB,(CASE WHEN DOA='1900-01-01 00:00:00.000' then NULL else DOA end) DOA,(CASE WHEN DOB<>'1900-01-01 00:00:00.000' then CONVERT(Date,''+CAST(DATEPART(MM,DOB) as varchar)+'/'+CAST(DATEPART(dd,DOB) AS varchar)+'/2020',0) else NULL end) CDOB,(CASE WHEN DOA<>'1900-01-01 00:00:00.000' then CONVERT(Date,''+CAST(DATEPART(MM,DOA) as varchar)+'/'+CAST(DATEPART(dd,DOA) AS varchar)+'/2020',0) else NULL end) CDOA,CONVERT(Date,''+CAST(DATEPART(MM,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) as varchar)+'/'+CAST(DATEPART(dd,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))) AS varchar)+'/2020',0) as CDate from SupplierOtherDetails SOD Where SM.AreaCode=SOD.AreaCode and SM.AccountNo=SOD.AccountNo) SOD Where TransactionLock=0 and  (ISNULL(SOD.DOB,'')!='' OR ISNULL(SOD.DOA,'')!='') and CDOA=CDate ";

            DataTable _dt = GetDataTable(strQuery);
            SendDetailsToAll(_dt);
        }

        public bool SendDetailsToAll(DataTable dt)
        {
            try
            {
                string strName = "", strSSSName = "", strGroupName = "", strContactPerson = "", strMobileNo = "", strDOB = "", strDOA = "", strWhatsappNo = "", strEmail = "", strWishType = "", strReason = "", strQuery = "", strStatus = "", strBirthdayDetails = "", strAnniversaryDetails = "";
                bool _bSendStatus = false;
                int count = 1, anCount = 1;
                foreach (DataRow row in dt.Rows)
                {
                    strName = Convert.ToString(row["PartyName"]);
                    strGroupName = Convert.ToString(row["GroupName"]);
                    strMobileNo = Convert.ToString(row["MobileNo"]);
                    strWhatsappNo = Convert.ToString(row["WhatsappNo"]);
                    strEmail = Convert.ToString(row["EmailID"]);
                    strWishType = Convert.ToString(row["WishType"]);
                    strDOB = Convert.ToString(row["DOB"]);
                    strDOA = Convert.ToString(row["DOA"]);
                    strSSSName = Convert.ToString(row["SSSName"]);
                    strContactPerson = Convert.ToString(row["ContactPerson"]).Trim();

                    if (strContactPerson == "")
                        strContactPerson = strName;

                    if (strSSSName != "")
                        strSSSName = strContactPerson;

                    strReason = "";
                    if (strWishType == "BIRTHDAY")
                    {
                        _bSendStatus = SendBirthdayMessage(strContactPerson, strGroupName, strMobileNo, strWhatsappNo, strEmail, strWishType, ref strReason);
                        strBirthdayDetails += count + "). ACCOUNT NAME: " + strName + "(" + strSSSName + ")" + "\nGROUP NAME: " + strGroupName + "\nMOBILE NO: " + strMobileNo + "\nWHATSAPP NO:" + strWhatsappNo + "\nDOB: " + strDOB + "\n\n";
                        count++;
                    }
                    else
                    {
                        _bSendStatus = SendAnniversaryMessage(strContactPerson, strGroupName, strMobileNo, strWhatsappNo, strEmail, strWishType, ref strReason);
                        strAnniversaryDetails += anCount + "). ACCOUNT NAME: " + strName + "(" + strSSSName + ")" + "\nGROUP NAME: " + strGroupName + "\nMOBILE NO : " + strMobileNo + "\nWHATSAPP NO:" + strWhatsappNo + "\nDOA: " + strDOA + "\n\n";
                        anCount++;
                    }

                    string[] strFullName = strName.Split(' ');
                    if (_bSendStatus)
                        strStatus = "SENT";
                    else
                        strStatus = "FAILED";
                    strQuery = " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus],[Reason]) VALUES "
                          + "('WISHES','" + strFullName[0] + "',0,DATEPART(MM,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))),0,'" + MainPage.strLoginName + "',1,0,'" + strStatus + "','" + strReason + "') ";

                    ExecuteMyNonQuery(strQuery);
                }

                if (strBirthdayDetails != "")
                    strBirthdayDetails = "BIRTHDAY DETAILS : \n" + strBirthdayDetails;
                if (strAnniversaryDetails != "")
                {
                    if (strBirthdayDetails != "")
                        strBirthdayDetails += "\n";
                    strBirthdayDetails += "ANNIVERSARY DETAILS : \n" + strAnniversaryDetails;
                }
                if (strBirthdayDetails != "")
                    WhatsappClass.SendWhatsAppMessage("9711960402", strBirthdayDetails, "", "BIRTHDAY", "", "TEXT");
            }
            catch { return false; }
            return true;
        }

        public bool SendBirthdayMessage(string strName, string strGroupName, string strMobileNo, string strWhatsappNo, string strEmail, string strWishType, ref string strSendStatus)
        {

            if (strMobileNo == "" && strWhatsappNo != "")
                strMobileNo = strWhatsappNo;

            string strMessage = "", strImagePath = "http://images.ssspltd.com/images/birthday_greeting.jpg", strSMSResult = "", strResult = "";
            bool _bStatus = false;

            if (strGroupName == "SUNDRY CREDITOR" || strGroupName == "SUNDRY DEBTORS")
            {
                strMessage = "Dear " + strName + " Ji, SSS परिवार की ओर से आपको जन्मदिवस की बहुत बहुत शुभकामनाएं। Regards SSS Delhi.";
                //   strMessage = "Dear " + strName + ", We at Saraogi Super Sales Pvt. Ltd. wish your birthday celebration will be as fabulous as you have been to our business. You are such a wonderful Party whose amazing relationship with us makes us what we are. Regards SSS Delhi.";
            }
            else
                strMessage = "Dear " + strName + ", On behalf of the entire company I wish you a very happy birthday and send you my best wishes for much happiness in your life.";

            SendSMS objSMS = new SendSMS();
            if (strGroupName == "SUNDRY CREDITOR" || strGroupName == "SALES PARTY")
                strSMSResult = objSMS.SendSingleSMSWithUnicode(strMessage, strMobileNo);
            else
                strSMSResult = objSMS.SendSingleSMS(strMessage, strMobileNo);

            if (strWhatsappNo != "")
            {
                if (strImagePath == "")
                    strResult = WhatsappClass.SendWhatsAppMessage(strWhatsappNo, strMessage, "", strWishType, "", "TEXT");
                else
                    strResult = WhatsappClass.SendWhatsAppMessage(strWhatsappNo, strMessage, strImagePath, strWishType, "", "IMAGE");
            }

            if (strEmail != "")
            {
                string strSubject = "!! Happy Birthday !!";
                _bStatus = SendEmail(strEmail, strSubject, strMessage, "", "", strWishType, false);
            }

            if (strSMSResult.Contains("success"))
                strSendStatus += "SMS : Sent";
            else
                strSendStatus += "SMS : Failed";

            if (strResult.Contains("success"))
                strSendStatus += ",Whatsapp : Sent";
            else
                strSendStatus += ",Whatsapp : Failed";
            if (_bStatus)
                strSendStatus += ",Email : Sent";
            else
                strSendStatus += ",Email : Failed";

            if (strSMSResult.Contains("success") || strResult.Contains("success") || _bStatus)
                return true;

            return false;
        }

        public bool SendAnniversaryMessage(string strName, string strGroupName, string strMobileNo, string strWhatsappNo, string strEmail, string strWishType, ref string strSendStatus)
        {

            if (strMobileNo == "" && strWhatsappNo != "")
                strMobileNo = strWhatsappNo;

            string strMessage = "", strImagePath = "", strSMSResult = "", strResult = "";
            bool _bStatus = false;

            if (strGroupName == "SUNDRY CREDITOR" || strGroupName == "SUNDRY DEBTORS")
                strMessage = "Dear " + strName + ", We at " + MainPage.strPrintComapanyName + " Happy anniversary to a wonderful couple, may your love for each other continue to grow. Wishing you all of the best on your anniversary. Regards SSS Delhi.";
            else
                strMessage = "Dear " + strName + ", Happy anniversary to a wonderful couple, may your love for each other continue to grow. Wishing you all of the best on your anniversary.";

            SendSMS objSMS = new SendSMS();
            strSMSResult = objSMS.SendSingleSMS(strMessage, strMobileNo);

            if (strWhatsappNo != "")
            {
                if (strImagePath == "")
                    strResult = WhatsappClass.SendWhatsAppMessage(strWhatsappNo, strMessage, "", strWishType, "", "TEXT");
                else
                    strResult = WhatsappClass.SendWhatsAppMessage(strWhatsappNo, strMessage, strImagePath, strWishType, "", "IMAGE");
            }

            if (strEmail != "")
            {
                string strSubject = "!! Happy Marriage Anniverdary !!";
                _bStatus = SendEmail(strEmail, strSubject, strMessage, "", "", strWishType, false);
            }

            if (strSMSResult.Contains("success"))
                strSendStatus += "SMS : Sent";
            else
                strSendStatus += "SMS : Failed";

            if (strResult.Contains("success"))
                strSendStatus += ",Whatsapp : Sent";
            else
                strSendStatus += ",Whatsapp : Failed";
            if (_bStatus)
                strSendStatus += ",Email : Sent";
            else
                strSendStatus += ",Email : Failed";

            if (strSMSResult.Contains("success") || strResult.Contains("success") || _bStatus)
                return true;

            return false;
        }

        protected internal string SaveCourierDetails(string strBillCode, string strBillNo, string strPartyID, string strPartyName, string strStation)
        {
            string strQuery = "";           
            {
                strQuery += "Declare @CCode varchar(50),@CSNo bigint,@CourierName varchar(250); "
                         + " Select @CCode = SCode, @CSNo = (ISNULL(MAX(SNo), 0) + 1), @CourierName = (Select Top 1 SM.CourierName from SupplierMaster SM Where AreaCode+AccountNo = '" + strPartyID + "') from CourierRegister Group by SCode "
                         + " if (@CCode is NULL) begin Select @CCode = CourierCode from CompanySetting Select Top 1 @CourierName = SM.CourierName from SupplierMaster SM Where (AreaCode+AccountNo)='" + strPartyID + "' end"
                         + " if not exists (Select ID from CourierRegister where [SaleBillCode]='" + strBillCode + "' and [SaleBillNo]='" + strBillNo+ "') begin "
                         + " INSERT INTO [dbo].[CourierRegister] ([SCode],[SNo],[SerialCode],[CourierNo],[CourierName],[Date],[DocType],[SalesParty],[Station],[Remark],[UserName],[UpdatedBy],[InsertStatus],[UpdateStatus],[SaleBillCode],[SaleBillNo],[SalePartyID]) VALUES "
                         + " (@CCode,@CSNo,'','',@CourierName,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),'BILL','" + strPartyName + "','" + strStation + "','','" + MainPage.strLoginName + "','',1,0,'" + strBillCode + "','" + strBillNo + "','" + strPartyID + "') "
                         + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + " ('COURIEROUT',@CCode,@CSNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),0,'" + MainPage.strLoginName + "',1,0,'CREATION') end ";
            }
            return strQuery;
        }

        public bool SetPinColorInPictureBox(TextBox txt, PictureBox picBoxPin, bool _bTransactionLock, bool _bBlackListed, bool _bSecurityChq)
        {
            try
            {
                if (_bTransactionLock && _bBlackListed && _bSecurityChq)
                {
                    // picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_all;
                    txt.BackColor = Color.FromArgb(185, 30, 12);
                }
                else if (_bTransactionLock && _bBlackListed)
                {
                    // picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_y_r;
                    txt.BackColor = Color.Tomato;
                }
                else if (_bSecurityChq && _bTransactionLock)
                {
                    //picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_g_y;
                    txt.BackColor = Color.Gold;
                }
                else if (_bSecurityChq && _bBlackListed)
                {
                    // picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_g_r;
                    txt.BackColor = Color.Gold;
                }
                else if (_bTransactionLock)
                {
                    // picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_y;
                    txt.BackColor = Color.Gold;
                }
                else if (_bBlackListed)
                {
                    // picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_r;
                    txt.BackColor = Color.Tomato;
                }
                else if (_bSecurityChq)
                {
                    //  picBoxPin.Image = global::SSS.Properties.Resources.pin_paper_g;
                    txt.BackColor = Color.LightGreen;
                }
                else
                {

                    txt.BackColor = Color.White;
                }
                picBoxPin.Image = global::SSS.Properties.Resources.pin_paper;
            }
            catch { }
            return true;
        }

        public void ClearTextBoxOnKeyDown(object sender, KeyEventArgs e, DataGridView grd)
        {
            try
            {
                if (e.KeyCode == Keys.Delete || e.KeyCode == Keys.Back)
                {
                    var txt = (TextBox)sender;
                    if (txt != null)
                    {
                        txt.Clear();
                        txt.BackColor = Color.White;
                    }
                    if (grd != null)
                        grd.Rows.Clear();
                }
            }
            catch { }
        }

        public void ClearTextBoxOnKeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Delete || e.KeyCode == Keys.Back)
                {
                    var txt = (TextBox)sender;
                    if (txt != null)
                    {
                        txt.Clear();
                        txt.BackColor = Color.White;
                    }
                }
            }
            catch { }
        }

        private bool ConvertDateTime(ref DateTime _date, string strDate)
        {
            try
            {
                {
                    double dDate = ConvertObjectToDouble(strDate);
                    if (dDate > 0)
                        _date = DateTime.FromOADate(dDate);
                    else
                    {
                        try
                        {
                            char split = '/';
                            if (strDate.Contains("-"))
                                split = '-';
                            string[] strNDate = strDate.Split(' ');
                            string[] strAllDate = strNDate[0].Split(split);
                            string strMonth = strAllDate[0], strFormat = "dd/MM/yyyy";
                            if (strMonth.Length == 1)
                                strFormat = "d/M/yyyy";

                            if (ConvertObjectToInt(strMonth) == MainPage.currentDate.Month)
                            {
                                strFormat = "MM/dd/yyyy";
                                if (strMonth.Length == 1)
                                    strFormat = "M/d/yyyy";
                            }
                            if (strAllDate.Length > 2)
                            {
                                if (strAllDate[2].Length == 2)
                                    strFormat = strFormat.Replace("yyyy", "yy");
                            }

                            if (strDate.Contains("-"))
                                strFormat = strFormat.Replace("/", "-");

                            if (strDate.Length > 10)
                            {
                                string strTimeFormat = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.LongTimePattern;
                                if (strDate.Contains("AM") || strDate.Contains("PM"))
                                    strFormat += " " + strTimeFormat;// " hh:mm:ss tt";//
                                else
                                {
                                    string[] strTime = strDate.Split(':');
                                    if (strTime.Length > 2)
                                        strFormat += " HH:mm:ss";
                                    else
                                        strFormat += " HH:mm";
                                }
                            }

                            _date = ConvertDateInExactFormat(strDate, strFormat);
                        }
                        catch
                        {
                            _date = Convert.ToDateTime(strDate);
                        }
                    }
                }
                return true;
            }
            catch (Exception ex) { MessageBox.Show("Sorry !! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
            return false;
        }

        public int ImportBankStatement(string strDate)
        {

            int _count = 0;
            string strQuery = "if not exists(Select ID from BulkLedgerPosting Where Date='" + strDate + "') begin Insert into BulkLedgerPosting Values('','" + strDate + "',1,'" + MainPage.strLoginName + "') end ";
            int __count = ExecuteMyNonQuery_WithoutMsg(strQuery);
            if (__count > 0)
            {
                if (MainPage.currentDate >= MainPage.startFinDate && MainPage.currentDate <= MainPage.endFinDate)
                {
                    DateTime fromDate = MainPage.currentDate, toDate = MainPage.currentDate;
                    DataTable _table = BankAPI.GetAccountStatement("777705000285", fromDate.ToString("dd-MM-yyyy"), toDate.ToString("dd-MM-yyyy"));
                    if (_table.Rows.Count > 0)
                    {
                        DataRow[] rows = _table.Select("Remarks Like('%SASUSP%') and Type='CR' ");
                        if (rows.Length > 0)
                        {
                            _table = rows.CopyToDataTable();
                            _count = SaveRecord_Bank(_table);
                            if (_count > 0)
                            {
                                SendInternet objSend = new SendInternet(1);
                                objSend.SendData();
                            }
                        }
                    }
                }
            }
            return _count;
        }

        private int SaveRecord_Bank(DataTable _dt)
        {
            string strQuery = "", strStatus = "", strDate = "", strDescription = "";
            string strAccountHead = "DL3722 ICICI BANK", strSecondParty = "DL2228 SUSPENSE A/C";
            int _allCount = 0;
            double dAmt = 0;
            DateTime _date = DateTime.Now;
            string[] strFullParty = strAccountHead.Split(' ');

            string strCashAccount = "", strAccountID = "", strAccountStatusID = "", strNewAccountID = "", strNewAccountName = "", strCostCentreAccount = "", strPartyName = "";
            double dAccountNo = 0;
            strAccountID = strFullParty[0];
            strCashAccount = strAccountHead.Replace(strAccountID + " ", "");

            strFullParty = strSecondParty.Split(' ');
            strAccountStatusID = strFullParty[0];
            strSecondParty = strSecondParty.Replace(strAccountStatusID + " ", "");
            bool _bStatus = false;
            DataTable dtVoucher = GetDataTable("Select VoucherCode,MAX(VoucherNo)VoucherNo from BalanceAMount  Where VoucherCode in (Select BankVCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "') Group by VoucherCode");

            foreach (DataRow row in _dt.Rows)
            {
                if (Convert.ToString(row["ValueDate"]) != "")
                {
                    strPartyName = "";
                    strQuery = " Declare @SerialNo bigint, @SerialCode nvarchar(250),@AccountID nvarchar(250),@AccountName nvarchar(250); Select TOP 1 @SerialCode=BankVCode from CompanySetting ";
                    dAccountNo = 0;
                    _bStatus = true;
                    if (ConvertDateTime(ref _date, Convert.ToString(row["ValueDate"])))
                    {
                        strDate = _date.ToString("MM/dd/yyyy");

                        if (Convert.ToString(row["Type"]).ToUpper().Contains("CR"))
                            strStatus = "CREDIT";
                        else
                            strStatus = "DEBIT";
                        dAmt = ConvertObjectToDouble(row["Amount"]);
                        strDescription = Convert.ToString(row["Remarks"]).Replace("'", "").ToUpper().Trim();

                        strQuery += " Select @SerialNo=(ISNULL(MAX(VoucherNo),0)+1) from BalanceAmount Where VoucherCode=@SerialCode ";
                        strPartyName = strNewAccountName = "";

                        if (strDescription.Contains("SASUSP") && strNewAccountName == "")
                        {
                            string _strDescription = strDescription.Substring(strDescription.IndexOf("SASUSP") + 6, 7);
                            _strDescription = System.Text.RegularExpressions.Regex.Replace(_strDescription, "[^0-9]", "");

                            dAccountNo = ConvertObjectToDouble(_strDescription);
                            if (dAccountNo > 0)
                            {
                                strQuery += " if exists (Select AccountNo from SupplierMaster Where GroupName='SUNDRY DEBTORS' and AccountNo='" + dAccountNo.ToString("0") + "' ) begin Select TOP 1 @AccountID=(AreaCode+AccountNo),@AccountName=Name from SupplierMaster Where GroupName='SUNDRY DEBTORS' and AccountNo='" + dAccountNo.ToString("0") + "' end else begin "
                                         + " Set @AccountID = '" + strAccountStatusID + "'; Set @AccountName = '" + strSecondParty + "' end ";
                            }
                            else
                            {
                                strQuery += " Set @AccountID ='" + strAccountStatusID + "'; Set @AccountName='" + strSecondParty + "';";
                            }
                        }
                        else
                        {
                            if (strNewAccountName.Trim() != "")
                            {
                                strFullParty = strNewAccountName.Split(' ');
                                strNewAccountID = strFullParty[0];
                                strNewAccountName = strNewAccountName.Replace(strNewAccountID + " ", "");

                                strQuery += " Set @AccountID ='" + strNewAccountID + "'; Set @AccountName='" + strNewAccountName + "';";
                            }
                            else
                                strQuery += " Set @AccountID ='" + strAccountStatusID + "'; Set @AccountName='" + strSecondParty + "';";
                        }

                        if (_bStatus && dAmt > 0)
                        {
                            if (strStatus == "CREDIT")
                            {
                                strQuery += "if not exists (Select BalanceID from BalanceAmount Where Description='" + strDescription + "' and Convert(nvarchar,Date,103)='" + _date.ToString("dd/MM/yyyy") + "' and CAST(Amount as Money)=" + dAmt.ToString("0.00") + ") begin INSERT INTO [dbo].[BalanceAmount] ([VoucherCode],[VoucherNo],[Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[JournalID],[UserName],[UpdatedBy],[Tick],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID],[ChequeStatus],[CostCentreAccountID]) VALUES "
                                         + " (@SerialCode,@SerialNo,'" + strDate + "','" + strCashAccount + "',@AccountName,'DEBIT','" + strDescription + "','" + dAmt.ToString("0.00") + "','','" + MainPage.strLoginName + "','','False',0,1,0,'" + strAccountID + "',@AccountID,0,'" + strCostCentreAccount + "') "
                                         + " INSERT INTO [dbo].[BalanceAmount] ([VoucherCode],[VoucherNo],[Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[JournalID],[UserName],[UpdatedBy],[Tick],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID],[ChequeStatus],[CostCentreAccountID]) VALUES "
                                         + " (@SerialCode,@SerialNo,'" + strDate + "',@AccountName,'" + strCashAccount + "','CREDIT','" + strDescription + "','" + dAmt.ToString("0.00") + "','','" + MainPage.strLoginName + "','','False',0,1,0,@AccountID,'" + strAccountID + "',0,'" + strCostCentreAccount + "') "
                                         + " INSERT INTO[dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                                         + "('BANK',@SerialCode,@SerialNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dAmt + ",'" + MainPage.strLoginName + "',1,0,'BULKCREATION') end ";


                            }
                            else if (strStatus == "DEBIT")
                            {
                                strQuery += "if not exists (Select BalanceID from BalanceAmount Where Description='" + strDescription + "' and Convert(nvarchar,Date,103)='" + _date.ToString("dd/MM/yyyy") + "' and CAST(Amount as Money)=" + dAmt.ToString("0.00") + ") begin INSERT INTO [dbo].[BalanceAmount] ([VoucherCode],[VoucherNo],[Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[JournalID],[UserName],[UpdatedBy],[Tick],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID],[ChequeStatus],[CostCentreAccountID]) VALUES "
                                         + " (@SerialCode,@SerialNo,'" + strDate + "','" + strCashAccount + "',@AccountName,'CREDIT','" + strDescription + "','" + dAmt.ToString("0.00") + "','','" + MainPage.strLoginName + "','','False',0,1,0,'" + strAccountID + "',@AccountID,0,'" + strCostCentreAccount + "') "
                                         + " INSERT INTO [dbo].[BalanceAmount] ([VoucherCode],[VoucherNo],[Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[JournalID],[UserName],[UpdatedBy],[Tick],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID],[ChequeStatus],[CostCentreAccountID]) VALUES "
                                         + " (@SerialCode,@SerialNo,'" + strDate + "',@AccountName,'" + strCashAccount + "','DEBIT','" + strDescription + "','" + dAmt.ToString("0.00") + "','','" + MainPage.strLoginName + "','','False',0,1,0,@AccountID,'" + strAccountID + "',0,'" + strCostCentreAccount + "') "
                                         + " INSERT INTO[dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                                         + "('BANK',@SerialCode,@SerialNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dAmt + ",'" + MainPage.strLoginName + "',1,0,'BULKCREATION') end ";
                            }

                            //if (strStatus == "CREDIT")
                            //    strQuery += GetTCSquery_Import("@AccountID", dAmt, "@SerialCode", "@SerialNo", strDate);

                            int count = ExecuteMyQuery(strQuery);
                            if (count > 0)
                            {
                                _allCount += count;
                                strQuery = "";
                                SendWhatsappMessage(strPartyName, strStatus, dAccountNo, dAmt, strDescription, _date);
                            }
                        }
                    }
                }
            }

            if (_allCount > 0 && dtVoucher.Rows.Count > 0)
            {
                DataRow row = dtVoucher.Rows[0];
                string strVCode = Convert.ToString(row["VoucherCode"]);
                double dVNo = ConvertObjectToDouble(row["VoucherNo"]);
                if (strVCode != "" && dVNo > 0)
                {
                    int _count = _allCount / 3;
                    SaveTCSDetails(strVCode, dVNo, _count);
                }
            }
            //if (_allCount > 0)
            //{
            //    MessageBox.Show("Thank you !! "+(_allCount/3) +" Record imported successfully", "Success", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);               
            //}
            //else
            //{
            //    MessageBox.Show("Sorry ! Unable to import record !!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //}
            return _allCount;
        }

        private double GetNetReceiveAmt(string strAccountID)
        {
            double dAmt = 0;
            try
            {
                if (MainPage.strOnlineDataBaseName != "" && MainPage.strLiveDataBaseIP != "")
                {
                    string strQuery = " Select SUM(CAST(BA.Amount as Money))  from BalanceAmount BA Where AccountStatus!='OPENING' and Status='CREDIT' and AccountID in (Select (AreaCode+AccountNo) from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and (((SM.PANNumber in ('" + strAccountID + "')) OR (SM.AreaCode+SM.AccountNo)='" + strAccountID + "'))) and VoucherCode!='' and VoucherCode not in (Select JournalVCode from CompanySetting) ";
                    object objValue = NetDBAccess.ExecuteMyScalar(strQuery);
                    dAmt = ConvertObjectToDouble(objValue);
                }
            }
            catch { }
            return dAmt;
        }

        private double GetNetReceiveAmt(string strAccountID,string strDate)
        {
            double dAmt = 0;
            try
            {
                if (MainPage.strOnlineDataBaseName != "" && MainPage.strLiveDataBaseIP != "")
                {
                    string strQuery = " Select SUM(CAST(BA.Amount as Money))  from BalanceAmount BA Where Date<='"+ strDate+"' and AccountStatus !='OPENING' and Status='CREDIT' and AccountID in (Select (AreaCode+AccountNo) from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and (((SM.PANNumber in ('" + strAccountID + "')) OR (SM.AreaCode+SM.AccountNo)='" + strAccountID + "'))) and VoucherCode!='' and VoucherCode not in (Select JournalVCode from CompanySetting) ";
                    object objValue = NetDBAccess.ExecuteMyScalar(strQuery);
                    dAmt = ConvertObjectToDouble(objValue);
                }
            }
            catch { }
            return dAmt;
        }

        public int SaveTCSDetails_All(string strVCode, double dVNo, int rowCount)
        {
            int _count = 0;
            string _strQuery = "", strQuery = "", strMaxBillNo = "";

            _strQuery = " Select *,(Select MAX(BillNo) from TCSDetails Where InvoiceType='DEBITNOTE') MaxBillNo,((Select SUM(CAST(BA.Amount as Money))  from BalanceAmount BA Where AccountStatus!='OPENING' and Status='CREDIT' and AccountID in (Select (AreaCode+AccountNo) from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and ((SM.PANNumber in (_Balance.PANNumber) OR (SM.AreaCode+SM.AccountNo)=_Balance.PANNumber))) and VoucherCode!='' and VoucherCode not in (Select JournalVCode from CompanySetting))-ISNULL((Select SUM(TCS.Amount) from TCSDetails TCS Where InvoiceType='DEBITNOTE' and AccountID in (Select AreaCode+AccountNO from SupplierMaster SM Where ((SM.PANNumber in (_Balance.PANNumber) OR (SM.AreaCode+SM.AccountNo)=_Balance.PANNumber)))),0)) BalAmt from (Select VoucherCode,VoucherNo,CONVERT(varchar,Date,103)Date,Amount,AccountID,(CASE WHEN ISNULL(PANNumber,'')='' then AccountID else PANNumber end)as PANNumber from BalanceAmount BA CROSS APPLY (Select PANNumber from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and (AreaCode+AccountNo) =AccountID)SM Where AccountStatus!='OPENING' and Status='CREDIT' and VoucherCode='" + strVCode + "' and (VoucherNo>=" + dVNo + " and VoucherNo<" + (dVNo + rowCount) + ") and VoucherCode not in (Select JournalVCode from CompanySetting) and (VoucherCode+CAST(VoucherNo as varchar))  not in (Select (VoucherCode+CAST(VoucherNo as varchar)) from TCSDetails Where InvoiceType='DEBITNOTE') and Date>='10/01/2020')_Balance Order by PANNumber,VoucherNo desc ";

            DataTable _dt = GetDataTable(_strQuery);
            if (_dt.Rows.Count > 0)
            {
                strMaxBillNo = Convert.ToString(_dt.Rows[0]["MaxBillNo"]);
                DataTable dtPanNumber = _dt.DefaultView.ToTable(true, "PANNumber", "BalAmt", "Date");
                object objValue = "";
                string strPanNumber = "";
                double dLocalAmt = 0, dNetAmt = 0, dTotalAmt = 0, dAmt = 0, dAmount = 0, dTCSPer = MainPage.dTCSPer, dTCSAmt = 0;
                string strAccountID = "", strVoucherNo = "", strVoucherCode = "", strDate = "";
                DateTime _sDate = MainPage.currentDate;
                int _index = 0;
                foreach (DataRow row in dtPanNumber.Rows)
                {
                    strPanNumber = Convert.ToString(row["PANNumber"]);
                    dLocalAmt = ConvertObjectToDouble(row["BalAmt"]);
                    strDate= Convert.ToString(row["Date"]);
                    strDate = ConvertDateInExactFormat(strDate).ToString("MM/dd/yyyy");
                    if (dLocalAmt > 0)
                    {
                        dNetAmt = GetNetReceiveAmt(strPanNumber, strDate);
                        dTotalAmt = (dNetAmt + dLocalAmt);
                        if (dTotalAmt > 5000000)
                        {
                            DataRow[] rows = _dt.Select("PANNumber='" + strPanNumber + "'");
                            foreach (DataRow _row in rows)
                            {
                                if (dTotalAmt > 5000000)
                                {
                                    dAmt = ConvertObjectToDouble(_row["Amount"]);
                                    if ((dTotalAmt - dAmt) < 5000000)
                                        dAmount = dTotalAmt - 5000000;
                                    else
                                        dAmount = dAmt;
                                    dTCSAmt = Math.Round(((dAmount * dTCSPer) / 100.00), 0);
                                    strAccountID = Convert.ToString(_row["AccountID"]);
                                    strVoucherCode = Convert.ToString(_row["VoucherCode"]);
                                    strVoucherNo = Convert.ToString(_row["VoucherNo"]);                                  
                                    // strDate = Convert.ToString(_row["Date"]);

                                    strDate = MainPage.currentDate.ToString("MM/dd/yyyy h:mm:ss tt");
                                    if (strQuery == "")
                                        strQuery = "Declare @BillCode nvarchar(250),@BillNo bigint, @TCSAccount nvarchar(250);";

                                    strQuery += GetTCSquery_Bulk(strAccountID, dAmount, strVoucherCode, strVoucherNo, strDate, dTCSPer, dTCSAmt);
                                    dTotalAmt -= dAmt;
                                }
                            }
                        }
                    }

                    if (_index > 20)
                    {
                        _count += ExecuteMyNonQuery_WithoutMsg(strQuery);
                        strQuery = "";
                        _index = 0;
                    }
                    _index++;
                }
            }           
            return _count;
        }


        public int SaveTCSDetails(string strVCode, double dVNo, int rowCount)
        {
            int _count = 0;
            string _strQuery = "", strQuery = "", strMaxBillNo = "";

            _strQuery = " Select *,(Select MAX(BillNo) from TCSDetails Where InvoiceType='DEBITNOTE') MaxBillNo,((Select SUM(CAST(BA.Amount as Money))  from BalanceAmount BA Where InsertStatus=1 and AccountStatus!='OPENING' and Status='CREDIT' and AccountID in (Select (AreaCode+AccountNo) from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and ((SM.PANNumber in (_Balance.PANNumber) OR (SM.AreaCode+SM.AccountNo)=_Balance.PANNumber))) and VoucherCode!='' and VoucherCode not in (Select JournalVCode from CompanySetting))-ISNULL((Select SUM(TCS.Amount) from TCSDetails TCS Where InvoiceType='DEBITNOTE' and AccountID in (Select AreaCode+AccountNO from SupplierMaster SM Where ((SM.PANNumber in (_Balance.PANNumber) OR (SM.AreaCode+SM.AccountNo)=_Balance.PANNumber)))),0)) BalAmt from (Select VoucherCode,VoucherNo,CONVERT(varchar,Date,103)Date,Amount,AccountID,(CASE WHEN ISNULL(PANNumber,'')='' then AccountID else PANNumber end)as PANNumber from BalanceAmount BA CROSS APPLY (Select PANNumber from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and (AreaCode+AccountNo) =AccountID)SM Where AccountStatus!='OPENING' and Status='CREDIT' and VoucherCode='" + strVCode + "' and (VoucherNo>=" + dVNo + " and VoucherNo<" + (dVNo + rowCount) + ") and VoucherCode not in (Select JournalVCode from CompanySetting) and (VoucherCode+CAST(VoucherNo as varchar))  not in (Select (VoucherCode+CAST(VoucherNo as varchar)) from TCSDetails Where InvoiceType='DEBITNOTE') and Date>='10/01/2020')_Balance Order by PANNumber,VoucherNo desc ";
            DataTable _dt = GetDataTable(_strQuery);
            if (_dt.Rows.Count > 0)
            {
                strMaxBillNo = Convert.ToString(_dt.Rows[0]["MaxBillNo"]);
                DataTable dtPanNumber = _dt.DefaultView.ToTable(true, "PANNumber", "BalAmt");
                object objValue = "";
                string strPanNumber = "";
                double dLocalAmt = 0, dNetAmt = 0, dTotalAmt = 0, dAmt = 0, dAmount = 0, dTCSPer = MainPage.dTCSPer, dTCSAmt = 0;
                string strAccountID = "", strVoucherNo = "", strVoucherCode = "", strDate = "";
                int _index = 0;
                foreach (DataRow row in dtPanNumber.Rows)
                {
                    strPanNumber = Convert.ToString(row["PANNumber"]);
                    dLocalAmt = ConvertObjectToDouble(row["BalAmt"]);
                    if (dLocalAmt > 0)
                    {
                        dNetAmt = GetNetReceiveAmt(strPanNumber);
                        dTotalAmt = (dNetAmt + dLocalAmt);
                        if (dTotalAmt > 5000000)
                        {
                            DataRow[] rows = _dt.Select("PANNumber='" + strPanNumber + "'");
                            foreach (DataRow _row in rows)
                            {
                                if (dTotalAmt > 5000000)
                                {
                                    dAmt = ConvertObjectToDouble(_row["Amount"]);
                                    if ((dTotalAmt - dAmt) < 5000000)
                                        dAmount = dTotalAmt - 5000000;
                                    else
                                        dAmount = dAmt;
                                    dTCSAmt = Math.Round(((dAmount * dTCSPer) / 100.00), 0);
                                    strAccountID = Convert.ToString(_row["AccountID"]);
                                    strVoucherCode = Convert.ToString(_row["VoucherCode"]);
                                    strVoucherNo = Convert.ToString(_row["VoucherNo"]);
                                    strDate = Convert.ToString(_row["Date"]);
                                    strDate = ConvertDateInExactFormat(strDate).ToString("MM/dd/yyyy h:mm:ss tt");
                                    if (strQuery == "")
                                        strQuery = "Declare @BillCode nvarchar(250),@BillNo bigint, @TCSAccount nvarchar(250);";

                                    strQuery += GetTCSquery_Bulk(strAccountID, dAmount, strVoucherCode, strVoucherNo, strDate, dTCSPer, dTCSAmt);
                                    dTotalAmt -= dAmt;
                                }
                            }
                        }
                    }

                    if (_index > 20)
                    {
                        _count += ExecuteMyNonQuery_WithoutMsg(strQuery);
                        strQuery = "";
                        _index = 0;
                    }
                    _index++;
                }
            }

            if (strQuery != "")
            {
                _count += ExecuteMyNonQuery_WithoutMsg(strQuery);
                if (_count > 0)
                    SendBulkEmailandWhatsapp_TCS(strMaxBillNo);
            }
            return _count;
        }


        private void SendBulkEmailandWhatsapp_TCS(string strMaxBillNo)
        {
            try
            {
                if (strMaxBillNo == "")
                    strMaxBillNo = "0";
                string strBillCode = "", strBillNo = "";
                string strQuery = "Select BillCode,BillNo from TCSDetails Where InvoiceType='DEBITNOTE' and BillNo>" + strMaxBillNo + " Order by BillNo";
                DataTable dt = GetDataTable(strQuery);
                foreach (DataRow row in dt.Rows)
                {
                    strBillCode = Convert.ToString(row["BillCode"]);
                    strBillNo = Convert.ToString(row["BillNo"]);

                    if (strBillCode != "" && strBillNo != "")
                        SendTCSEmailWhatsapp("DEBITNOTE", strBillCode, strBillNo, false, true, true, true);
                }

            }
            catch { }
        }

        protected internal string GetTCSquery_Bulk(string strAccountID, double dAmt, string strVoucherCode, string strVoucherNo, string strDate, double dTcsPer, double dTCSAmt)
        {
            string strQuery = "";
            strQuery += "Select @TCSAccount=(AreaCode+AccountNo) from SupplierMaster Where GroupName='OTHER CURRENT LIABILITIES' and Category='TCS PAYABLE' "
                     + " Select @BillCode=TCSDNCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "' "
                     + " Select @BillNo=(ISNULL(MAX(BillNo),0)+1) from TCSDetails Where BillCode=@BillCode "
                     + " if not exists(Select [BillCode] from [dbo].[TCSDetails] Where (([BillCode]=@BillCode and BillNo=@BillNo) OR ([VoucherCode]='" + strVoucherCode + "' and [VoucherNo]=" + strVoucherNo + "))) begin "
                     + " INSERT INTO [dbo].[TCSDetails]([BillCode],[BillNo],[Date],[AccountID],[TCSAccountID],[VoucherCode],[VoucherNo],[Amount],[TCSPer],[TCSAmt],[Remark],[InvoiceType],[Status],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                     + " (@BillCode,@BillNo,'" + strDate + "','" + strAccountID + "',@TCSAccount,'" + strVoucherCode + "'," + strVoucherNo + "," + dAmt + "," + dTcsPer + "," + dTCSAmt + ",'','DEBITNOTE','','" + MainPage.strLoginName + "','',1,0) "
                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                     + " ('" + strDate + "','" + strAccountID + "','TCS DEBIT NOTE','DEBIT',@BillCode+' '+CAST(@BillNo as varchar)," + dTCSAmt + ",'CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,'" + strAccountID + "') "
                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                     + " ('" + strDate + "',@TCSAccount,'TCS DEBIT NOTE','CREDIT',@BillCode+' '+CAST(@BillNo as varchar)," + dTCSAmt + ",'DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@TCSAccount) "
                     + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                     + " ('TCSDEBITNOTE',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dTCSAmt + ",'" + MainPage.strLoginName + "',1,0,'CREATION') end  ";

            return strQuery;
        }

        protected internal string GetTCSquery(string strAccountID, double dAmt, string strVoucherCode, string strVoucherNo, string strDate, bool _bGroup)
        {
            string strQuery = "";
            if (MainPage.strOnlineDataBaseName != "" && MainPage.strDataBaseIP != "")
            {
                double dNAmt = GetNetReceiveAmt(strAccountID);
                strQuery = "set @Amt=" + dNAmt + "; ";
            }
            else
                strQuery += " Select @Amt=SUM(CAST(BA.Amount as Money))  from BalanceAmount BA Where AccountStatus!='OPENING' and Status='CREDIT' and AccountID in (Select (AreaCode+AccountNo) from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and (((SM.PANNumber in (Select _SM.PANNumber from SupplierMaster _SM WHere (_SM.AreaCode+_SM.AccountNo)='" + strAccountID + "') and SM.PANNumber!='') OR (SM.AreaCode+SM.AccountNo)='" + strAccountID + "'))) and VoucherCode!='' and VoucherCode not in (Select JournalVCode from CompanySetting)  ";

            strQuery += " if(@Amt>5000000) begin  Select @TCSAccount=(AreaCode+AccountNo) from SupplierMaster Where GroupName='OTHER CURRENT LIABILITIES' and Category='TCS PAYABLE' "
                     + " Select @BillCode=TCSDNCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "' "
                     + " Select @BillNo=(ISNULL(MAX(BillNo),0)+1) from TCSDetails Where BillCode=@BillCode "
                     + " if((@Amt-" + dAmt + ")<5000000) set @NetAmt=@Amt-5000000; else set @NetAmt=" + dAmt + "; "
                     + " Set @TCSPer=" + MainPage.dTCSPer + "; Set @TCSAmt=ROUND(((@NetAmt*@TCSPer)/100.00),0); "
                     + " if not exists(Select [BillCode] from [dbo].[TCSDetails] Where (([BillCode]=@BillCode and BillNo=@BillNo) OR ([VoucherCode]='" + strVoucherCode + "' and [VoucherNo]=" + strVoucherNo + "))) begin "
                     + " INSERT INTO [dbo].[TCSDetails]([BillCode],[BillNo],[Date],[AccountID],[TCSAccountID],[VoucherCode],[VoucherNo],[Amount],[TCSPer],[TCSAmt],[Remark],[InvoiceType],[Status],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                     + " (@BillCode,@BillNo,'" + strDate + "','" + strAccountID + "',@TCSAccount,'" + strVoucherCode + "'," + strVoucherNo + ",@NetAmt,@TCSPer,@TCSAmt,'','DEBITNOTE','','A','',1,0) "
                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                     + " ('" + strDate + "','" + strAccountID + "','TCS DEBIT NOTE','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),@TCSAmt,'CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,'" + strAccountID + "') "
                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                     + " ('" + strDate + "',@TCSAccount,'TCS DEBIT NOTE','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),@TCSAmt,'DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@TCSAccount) "
                     + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                     + " ('TCSDEBITNOTE',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),@TCSAmt,'" + MainPage.strLoginName + "',1,0,'CREATION') end end ";

            return strQuery;
        }


        protected internal string GetTCSquery_Import(string strAccountID, double dAmt, string strVoucherCode, string strVoucherNo, string strDate)
        {
            string strQuery = " Declare @BillCode nvarchar(250),@BillNo bigint, @TCSAccount nvarchar(250), @TCSPer numeric(18,4),@TCSAmt numeric(18,2), @Amt numeric(18,2),@NetAmt numeric(18,2); ";

            strQuery += " if exists(Select Name from SupplierMaster Where GroupName='SUNDRY DEBTORS' and AreaCode+AccountNo=" + strAccountID + ") begin "
                 + " Select @Amt=SUM(CAST(BA.Amount as Money))  from BalanceAmount BA Where AccountStatus!='OPENING' and Status='CREDIT' and AccountID in (Select (AreaCode+AccountNo) from SupplierMaster SM Where GroupName='SUNDRY DEBTORS' and (((SM.PANNumber in (Select _SM.PANNumber from SupplierMaster _SM WHere (_SM.AreaCode+_SM.AccountNo)=" + strAccountID + ") and SM.PANNumber!='') OR (SM.AreaCode+SM.AccountNo)=" + strAccountID + "))) and VoucherCode!='' and VoucherCode not in (Select JournalVCode from CompanySetting) "
                 + " if(@Amt>5000000) begin  Select @TCSAccount=(AreaCode+AccountNo) from SupplierMaster Where GroupName='OTHER CURRENT LIABILITIES' and Category='TCS PAYABLE' "
                 + " Select @BillCode=TCSDNCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "' "
                 + " Select @BillNo=(ISNULL(MAX(BillNo),0)+1) from TCSDetails Where BillCode=@BillCode "
                 + " if((@Amt-" + dAmt + ")<5000000) set @NetAmt=@Amt-5000000; else set @NetAmt=" + dAmt + "; "
                 + " Set @TCSPer=" + MainPage.dTCSPer + "; Set @TCSAmt=ROUND(((@NetAmt*@TCSPer)/100.00),0); "
                 + " if not exists(Select [BillCode] from [dbo].[TCSDetails] Where (([BillCode]=@BillCode and BillNo=@BillNo) OR ([VoucherCode]='" + strVoucherCode + "' and [VoucherNo]=" + strVoucherNo + "))) begin "
                 + " INSERT INTO [dbo].[TCSDetails]([BillCode],[BillNo],[Date],[AccountID],[TCSAccountID],[VoucherCode],[VoucherNo],[Amount],[TCSPer],[TCSAmt],[Remark],[InvoiceType],[Status],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus]) Values "
                 + " (@BillCode,@BillNo,'" + strDate + "'," + strAccountID + ",@TCSAccount," + strVoucherCode + "," + strVoucherNo + ",@NetAmt,@TCSPer,@TCSAmt,'','DEBITNOTE','','A','',1,0) "
                 + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                 + " ('" + strDate + "'," + strAccountID + ",'TCS DEBIT NOTE','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),@TCSAmt,'CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0," + strAccountID + ") "
                 + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                 + " ('" + strDate + "',@TCSAccount,'TCS DEBIT NOTE','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),@TCSAmt,'DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@TCSAccount) "
                 + " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                 + " ('TCSDEBITNOTE',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE())),@TCSAmt,'" + MainPage.strLoginName + "',1,0,'CREATION') end end end ";

            return strQuery;
        }

        private void SendWhatsappMessage(string strPartyName, string strStatus, double dAccountNo, double dNetAmt, string strDescription, DateTime _date)
        {
            if ((strPartyName != "" || dAccountNo > 0))
            {
                string[] strCode = strPartyName.Split(' ');
                string strWhatsappNo = "", strWhastappMessage = "", strMobileNo = "", strGroupName = "", strPartyID = "", strMessage = "";
                DataTable dt = GetDataTableRecord("Select MobileNo,UPPER(GroupName) GroupName,((ISNULL(AreaCode,'')+ISNULL(AccountNo,'')+' '+Name)) PartyName,WhatsappNo  from SupplierMaster SM OUTER APPLY (Select WaybillUserName as WhatsappNo from SupplierOtherDetails SOD Where SM.AreaCode=SOD.AreaCode and SM.AccountNo=SOD.AccountNo)SOD Where ((ISNULL(AreaCode,'')+ISNULL(AccountNo,'')) ='" + strCode[0] + "' OR AccountNo ='" + dAccountNo + "') ");
                if (dt.Rows.Count > 0)
                {
                    strMobileNo = Convert.ToString(dt.Rows[0]["MobileNo"]);
                    strGroupName = Convert.ToString(dt.Rows[0]["GroupName"]);
                    strWhatsappNo = Convert.ToString(dt.Rows[0]["WhatsappNo"]);

                    if (strPartyName == "")
                        strPartyName = Convert.ToString(dt.Rows[0]["PartyName"]);
                    string[] strFullName = strPartyName.Split(' ');
                    if (strFullName.Length > 1)
                        strPartyID = strFullName[0].Trim();

                    strPartyName = GetSafePartyName(strPartyName);

                    if (strMobileNo.Length == 10 && dNetAmt > 0)
                    {
                        if (strStatus == "CR" || strStatus == "CREDIT")
                        {
                            strMessage = "M/S : " + strPartyName + ", We have received your amt Rs. " + dNetAmt.ToString("N2", MainPage.indianCurancy) + " THRU " + strDescription + " DT : " + _date.ToString("dd/MM/yyyy") + ".";
                            strWhastappMessage = "{\"default\": \"" + strPartyName + "\" },{\"default\": \"received\" },{\"default\": \"" + dNetAmt.ToString("N2", MainPage.indianCurancy) + "\" },{\"default\": \"" + strDescription + "\" },{\"default\": \"" + _date.ToString("dd/MM/yyyy") + "\" }";
                        }
                        else
                        {
                            strMessage = "M/S : " + strPartyName + ", We have paid your amt Rs. " + dNetAmt.ToString("N2", MainPage.indianCurancy) + " THRU " + strDescription + " DT : " + _date.ToString("dd/MM/yyyy") + ".";
                            strWhastappMessage = "{\"default\": \"" + strPartyName + "\" },{\"default\": \"paid\" },{\"default\": \"" + dNetAmt.ToString("N2", MainPage.indianCurancy) + "\" },{\"default\": \"" + strDescription + "\" },{\"default\": \"" + _date.ToString("dd/MM/yyyy") + "\" }";
                        }

                        SendSMS objSMS = new SendSMS();
                        objSMS.SendSingleSMS(strMessage, strMobileNo);
                    }

                    if (strStatus == "CR" || strStatus == "CREDIT")
                        NotificationClass.SetNotification("RECEIPT", strPartyID, dNetAmt, "");
                    else
                        NotificationClass.SetNotification("PAYMENT", strPartyID, dNetAmt, "");

                    if (strWhatsappNo != "")
                        WhatsappClass.SendWhatsappWithIMIMobile(strWhatsappNo, "cash_bank", strWhastappMessage, "", "");
                    // WhatsappClass.SendWhatsAppMessage(strWhatsappNo, strMessage, "", "BULKBANK", "", "TEXT");
                }
            }
        }

        public string GetSupplierNickNameWithGSTNoWithOtherFirm(string strGSTNo)
        {
            string strSupplierName = "";
            try
            {
                string strQuery = " Select Distinct Other from SupplierMaster Where GSTNo='" + strGSTNo + "' and GroupName='SUNDRY CREDITOR' ";
                DataTable dt = GetDatFromAllFirm_OtherCompany(strQuery);
                if (dt.Rows.Count > 0)
                {
                    strSupplierName = Convert.ToString(dt.Rows[0]["Other"]);
                    string[] str = strSupplierName.Trim().Split(' ');
                    if (str.Length < 1)
                    {
                        object obj = ExecuteMyScalar("Select AreaCode+AccountNo+' '+Name from SupplierMaster Where AreaCode+AccountNo='" + strSupplierName + "'");
                        strSupplierName = Convert.ToString(obj);
                    }
                }
            }
            catch { }
            return strSupplierName;
        }

        public DataTable CreateStockTransferWayBillDataTable(string strBillCode, string strBillNo)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("WayBillNo", typeof(String));
            dt.Columns.Add("WayBillDate", typeof(String));
            dt.Columns.Add("EnteredBy", typeof(String));
            dt.Columns.Add("ValidFrom", typeof(String));
            dt.Columns.Add("SupplierGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDispatch", typeof(String));
            dt.Columns.Add("CustomerGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDelivery", typeof(String));
            dt.Columns.Add("BillNo", typeof(String));
            dt.Columns.Add("BillDate", typeof(String));
            dt.Columns.Add("ValueOfGoods", typeof(String));
            dt.Columns.Add("HSNCode", typeof(String));
            dt.Columns.Add("ReasonForTransportation", typeof(String));
            dt.Columns.Add("Transporter", typeof(String));
            dt.Columns.Add("Other", typeof(String));
            dt.Columns.Add("ApproxDistance", typeof(String));
            dt.Columns.Add("BarcodeNo", typeof(String));
            dt.Columns.Add("BarcodeNumber", typeof(String));
            dt.Columns.Add("TransactionType", typeof(String));

            string strWayBill = "", strGSTNo = "", strCustomerGSTNo, strSupplierGSTNo = "", strBarCodeNumber = "", strTransactionType = "Regular";
            string strQuery = " Select WayBillNo,WayBillDate,FCM.GSTNo,FCM.Name FullCompanyName,FCM.Name CompanyName,(TCM.StateName+'-'+TCM.PinCode) PlaceOfSupply,TCM.GSTNo CustomerGSTNo,TCM.Name as CustomerName,(TCM.StateName+'-'+TCM.PinCode) PlaceOfDelivery, (BillCode+CAST(BillNo as varchar)) BillNo,CONVERT(varchar,ST.Date,103)BillDate,ROUND(CAST(ST.TotalAmt as Money),0) NetAmt,(TR.GSTNo+' & '+ST.Transport) Transporter, PD.Distance PDistance from StockTransfer ST LEFT JOIN Transport TR ON TransportName = ST.Transport LEFT JOIN MaterialCenterMaster FCM on FCM.Name = ST.FromMCentre LEFT JOIN MaterialCenterMaster TCM on TCM.Name = ST.ToMCentre LEFT JOIN PinCodeDistance PD on(PD.FromPinCode = FCM.PinCode AND PD.ToPinCode = TCM.PinCode) OR (PD.FromPinCode = TCM.PinCode AND PD.ToPinCode = FCM.PinCode) Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo
                            + " Select Max(Category)as Category,HSNCode,ItemName, Qty,COUNT(*)ItemCount from (Select STS.ItemName,CategoryName as Category,IGM.HSNCode,STS.Qty from StockTransferSecondary STS inner join StockTransfer ST on STS.BillCode = ST.BillCode and STS.BIllNo = ST.BillNo LEFT JOIN Items IM ON STS.ItemName = IM.ItemName LEFT JOIN ItemGroupMaster IGM ON IM.GroupName = IGM.GroupName  Where ST.BillCode = '" + strBillCode + "' and ST.BillNo = " + strBillNo + "  )Trans Group by HSNCode, ItemName, Qty Order by Qty desc ";
            DataSet ds = DataBaseAccess.GetDataSetRecord(strQuery);
            if (ds.Tables.Count > 0)
            {
                DataTable table = ds.Tables[0], dtDetails = ds.Tables[1];

                if (table.Rows.Count > 0 && dtDetails.Rows.Count > 0)
                {
                    DataRow dr = table.Rows[0];
                    DataRow row = dt.NewRow();
                    strBarCodeNumber = Convert.ToString(dr["WayBillNo"]).Replace(" ", "");
                    strWayBill = strBarCodeNumber;
                    strGSTNo = Convert.ToString(dr["GSTNo"]);
                    strCustomerGSTNo = Convert.ToString(dr["CustomerGSTNo"]);

                    //if (Convert.ToString(dr["SubPartyID"]) != "SELF")
                    //    strTransactionType = "Bill To - Ship To";

                    strWayBill = strWayBill.Insert(4, " ").Insert(9, " ");
                    strSupplierGSTNo = strGSTNo.Insert(5, " ").Insert(11, " ");
                    if (strCustomerGSTNo != "")
                        strCustomerGSTNo = strCustomerGSTNo.Insert(5, " ").Insert(11, " ");
                    else
                    {
                        strCustomerGSTNo = "URP";
                        strTransactionType = "- NA -";
                    }

                    row["WayBillNo"] = strWayBill;
                    row["WayBillDate"] = dr["WayBillDate"];
                    row["EnteredBy"] = strSupplierGSTNo + " - " + dr["FullCompanyName"];
                    row["ValidFrom"] = "Not Valid for Movement as Part B is not entered [" + dr["PDistance"] + "Kms]";
                    row["SupplierGSTNo"] = strGSTNo + "," + dr["CompanyName"];
                    row["PlaceOfDispatch"] = dr["PlaceOfSupply"];
                    row["CustomerGSTNo"] = strCustomerGSTNo + " ," + dr["CustomerName"];
                    row["PlaceOfDelivery"] = Convert.ToString(dr["PlaceOfDelivery"]).Replace("\n", " ").Replace("\r", " ");
                    row["BillNo"] = dr["BillNo"];
                    row["BillDate"] = dr["BillDate"];
                    row["ValueOfGoods"] = Convert.ToDouble(dr["NetAmt"]);

                    int Count = Convert.ToInt32(dtDetails.Rows.Count);
                    string Category = dtDetails.Rows[0]["Category"].ToString();

                    Category = Category == "" ? "READYMADE GARMENT" : Category;
                    if (Count > 1)
                        row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - " + Category + " (+" + (Count - 1).ToString() + ")";
                    else
                        row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - " + Category;

                    row["ReasonForTransportation"] = "Outward - Supply";
                    row["Transporter"] = dr["Transporter"];
                    row["Other"] = MainPage.currentDate.ToString("M/d/yyyy");
                    row["ApproxDistance"] = "";//dr["IRNNo"];
                    row["BarcodeNo"] = "*" + strBarCodeNumber + "*";
                    row["BarcodeNumber"] = strBarCodeNumber;
                    row["TransactionType"] = strTransactionType;

                    dt.Rows.Add(row);
                }
            }
            return dt;
        }


        public int SaveRecord_PurchaseBook(string strSupplierName, DateTime strDate, string strInvoiceNo, string strInvDate, string strInnerQuery, double dGrossAmt, double dTaxAmt, double dNetAmount, double dSpclDisPer, double dSpclDisAmt, double dTaxPer, double dTotalQty, DataTable _dtTax, string strCompanyCode, bool _bInclude, string strOtherSign, double dOtherAmt, string strOtherPerSign, double dOtherPer, double dOtherPerAmt, double dTaxFree, double dPackingAmt, string strTransport, string strGodown, string strStockStatus, string strLRNo, string strLRDate, string strManufacturer, double dTcsPer, double dTCSAmt, string strGSTNo, string strBillNo, ref string _strPBillNo, string strNoOfPacks, string strWeight, string strMode, string strReceivedBy, string strCountedBy, string strBarcodedBy, string strTransport2, string strLRNo2, string strLRDate2)
        {
            int count = 0;
            try
            {
                string strInvoiceDate = "NULL", strROSign = "+", strLDate = "NULL", strMID = "", strLDate2 = "NULL";
                double dROValue = 0, dDiff = 0, dTaxableAmt = dNetAmount - dTaxAmt - dTCSAmt;
                double dNetAmt = Convert.ToDouble(dNetAmount.ToString("0"));
                dDiff = dNetAmt - dNetAmount;
                string[] str = strManufacturer.Split(' ');
                if (str.Length > 0)
                    strMID = str[0];

                if (dDiff != 0)
                {
                    if (dDiff >= 0)
                    {
                        strROSign = "+";
                        dROValue = Math.Round(dDiff, 2);
                    }
                    else
                    {
                        strROSign = "-";
                        dROValue = Math.Round(Math.Abs(dDiff), 2);
                    }
                }

                if (strInvDate.Length == 10)
                {
                    DateTime iDate = ConvertDateInExactFormat(strInvDate);
                    strInvoiceDate = "'" + iDate.ToString("MM/dd/yyyy h:mm:ss tt") + "'";
                }
                if (strLRNo != "" && strLRDate.Length == 10)
                {
                    DateTime lDate = ConvertDateInExactFormat(strLRDate);
                    strLDate = "'" + lDate.ToString("MM/dd/yyyy h:mm:ss tt") + "'";
                }
                if (strLRDate2.Length == 10)
                {
                    DateTime lDate = ConvertDateInExactFormat(strLRDate2);
                    strLDate2 = "'" + lDate.ToString("MM/dd/yyyy h:mm:ss tt") + "'";
                }

                string strQuery = "Declare @PartyCode nvarchar(250),@BillCode nvarchar(50),@BillNo bigint,@DBillNo bigint,@DBillCode nvarchar(250), @PurchaseType nvarchar(250), @Region nvarchar(250), @IGSTAccount nvarchar(250),@SGSTAccount nvarchar(250),@ItemName nvarchar(250);"
                                + " Select @PartyCode = (AreaCode + AccountNo),@Region=(CASE WHEN SM.State=CState then 'LOCAL' else 'INTERSTATE' end) from SupplierMaster SM OUTER APPLY (Select TOp 1 CD.StateName as CState  from CompanyDetails CD) _CD Where GroupName='SUNDRY CREDITOR' and GSTNo='" + strGSTNo + "'  " // ((SM.AreaCode+SM.AccountNo) in ('" + strSupplierName + "') OR (SM.AreaCode+SM.AccountNo+' '+Name)  = '" + strSupplierName + "' OR SM.OTHER Like('" + strSupplierName + "%')) "
                                + " Select @PurchaseType = TaxName, @IGSTAccount = TaxAccountIGST, @SGSTAccount = TaxAccountSGST from SaleTypeMaster Where SaleType = 'PURCHASE' and TaxIncluded = '" + _bInclude.ToString() + "' and Region = @Region "
                                + " Set @BillCode='';Set @DBillCode=''; Select @BillNo=(ISNULL(MAX(BillNO),1)+1),@BillCode=PBillCode from (Select ISNULL(MAX(ReceiptNo),1) as BillNO, PBillCode from GoodsReceive Cross APPLY(Select Top 1 PBillCode from CompanySetting Where PBillCode = ReceiptCode)PB Group by PBillCode  UNION ALL Select ISNULL(MAX(BillNO),1) as BillNO, PBillCode from PurchaseBook Cross APPLY(Select Top 1 PBillCode from CompanySetting Where PBillCode = BillCode)PB Group by PBillCode )Purchase  Group by PBillCode  "
                                + " if(@BillCode='') begin Set @BillNo=1; Select Top 1 @BillCode=PBillCode from CompanySetting end "
                                //  + " Select @DBillNo = (ISNULL(MAX(BillNO),1)+1), @DBillCode = FChallanCode from Items _IM CROSS APPLY(Select Top 1 FChallanCode from CompanySetting Where FChallanCode = BillCode)PB Group by FChallanCode if(@DBillCode='') begin Set @DBillNo=1; Select Top 1 @DBillCode=FChallanCode from CompanySetting end "
                                + " if not exists(Select ReceiptCode from GoodsReceive Where ReceiptCode=@BillCode and ReceiptNo=@BillNo UNION ALL Select BillCode from PurchaseBook Where BillCode=@BillCode and BillNo=@BillNo) begin "
                                + " INSERT INTO [dbo].[PurchaseBook] ([BillCode],[BillNo],[Date],[InvoiceNo],[InvoiceDate],[PurchasePartyID],[PurchaseParty],[PurchaseType],[TransportName],[GodownName],[Remark],[Description],[Other],[PackingAmt],[OtherSign],[OtherAmt],[DiscPer],[DiscAmt],[TaxPer],[TaxAmt],[TotalQty],[GrossAmt],[NetAmt],[ROSign],[RoundOff],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[SpecialDscPer],[SpecialDscAmt],[TaxFree],[LRNumber],[LRDate],[StockStatus],[SupplierRefNo],[Agent],[Other1],[Other2],[TCSPer],[TCSAmt],[TaxableAmt],[NoOfPacks],[PackWeight],[TransportMode],[ReceivedBy],[CountedBy],[BarCodedBy],[TransportName2],[LRNumber2],[LRDate2]) VALUES "
                                + " (@BillCode,@BillNo,'" + strDate.ToString("MM/dd/yyyy h:mm:ss tt") + "','" + strInvoiceNo + "'," + strInvoiceDate + ",@PartyCode,@PartyCode,@PurchaseType,'" + strTransport + "','" + strGodown + "','','','" + strOtherPerSign + "'," + dPackingAmt + ",'" + strOtherSign + "'," + dOtherAmt + "," + dOtherPer + "," + dOtherPerAmt + "," + dTaxPer + "," + dTaxAmt + "," + dTotalQty + "," + dGrossAmt + "," + dNetAmt + ",'" + strROSign + "'," + dROValue + ",'" + MainPage.strLoginName + "','',1,0," + dSpclDisPer + "," + dSpclDisAmt + "," + dTaxFree + ",'" + strLRNo + "'," + strLRDate + ",'" + strStockStatus + "','" + strBillNo + "','" + strMID + "','','" + strBillNo + "'," + dTcsPer + "," + dTCSAmt + "," + dTaxableAmt + ",'" + strNoOfPacks + "','" + strWeight + "','" + strMode + "','" + strReceivedBy + "','" + strCountedBy + "','" + strBarcodedBy + "','" + strTransport2 + "','" + strLRNo2 + "'," + strLDate2 + ")  "
                                + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                + " ('" + strDate.ToString("MM/dd/yyyy h:mm:ss tt") + "',@PartyCode,'PURCHASE A/C','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dNetAmt + "','CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode)  ";

                strQuery += strInnerQuery;
                strQuery += " Declare @IGSTName nvarchar(250),@SGSTName nvarchar(250),@IGSTFullName nvarchar(250),@SGSTFullName nvarchar(250),@TCSAccount nvarchar(250); ";

                if (dTaxAmt > 0)
                {
                    strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = @PurchaseType; "
                             + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + Math.Round(dTaxAmt, 2) + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end else begin"
                             + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + Math.Round((dTaxAmt / 2), 2) + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end "
                             + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@SGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + Math.Round((dTaxAmt / 2), 2) + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@SGSTName) end end end "
                             + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + Math.Round(dTaxAmt, 2) + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end end ";
                }

                //GST Details

                double _dTaxPer = 0, _dTaxAmt = 0;
                foreach (DataRow rows in _dtTax.Rows)
                {
                    _dTaxPer = ConvertObjectToDouble(rows["TaxPer"]);
                    _dTaxAmt = ConvertObjectToDouble(rows["TaxAmt"]);
                    strQuery += "if(@Region='LOCAL') begin  "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('PURCHASE',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('PURCHASE',@BillCode,@BillNo,@SGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) end "
                        + " else begin INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('PURCHASE',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer + "'," + _dTaxAmt + ",@Region,'',1) end ";

                }

                if (dTCSAmt > 0)
                {
                    strQuery += " Select @TCSAccount=(AreaCode+AccountNo) from SupplierMaster Where GroupName='SHORT-TERM LOANS AND ADVANCES' and Category='TCS RECEIVABLES' "
                             + " INSERT INTO[dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES   "
                             + " ('" + strDate + "',@TCSAccount,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar)," + dTCSAmt + ",'DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@TCSAccount) ";
                }

                strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + "('PURCHASE',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dNetAmt + ",'" + MainPage.strLoginName + "',1,0,'CREATION') ";


                strQuery += " Select( @BillCode+' '+CAST(@BillNo as varchar)) as BillNo end ";

                if (strQuery != "")
                {
                    if (strCompanyCode == "")
                        strCompanyCode = MainPage.strDataBaseFile;

                    count = SearchDataOther.ExecuteNoQuery(strQuery, strCompanyCode, ref _strPBillNo);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return count;
        }

        public int SaveRecord_SaleBook(string strSalesParty, DateTime dDate, string strInnerQuery, double dGrossAmt, double dTaxPer, double dTaxAmt, double dSpecialPer, double dSpecialAmt, double dTotalQty, double dNetAmount, string strLRNumber, string strLDate, DataTable _dtTax, string strCompanyCode, string strBillNo, bool _bInclude, double dCashAmt, double dCardAmt, ref string _strAttachBill, string strRemark)
        {
            int count = 0;
            try
            {
                string strDate = "", strLRDate = "NULL", strPDate = "NULL", strROSign = "+", strTickStatus = "False";
                strDate = dDate.ToString("MM/dd/yyyy h:mm:ss tt");
                if (strLDate != "" && strLDate.Length == 10)
                    strLRDate = "'" + ConvertDateInExactFormat(strLDate).ToString("MM/dd/yyyy hh:mm:ss") + "'";
                double dDisc = 0, _dOtherAmt = 0, dFinalAmt = 0, dTaxableAmt = dNetAmount - dTaxAmt;
                double dROValue = 0, dDiff = 0;
                double dNetAmt = Convert.ToDouble(dNetAmount.ToString("0"));
                dDiff = dNetAmt - dNetAmount;
                if (dDiff != 0)
                {
                    if (dDiff >= 0)
                    {
                        strROSign = "+";
                        dROValue = Math.Round(dDiff, 2);
                    }
                    else
                    {
                        strROSign = "-";
                        dROValue = Math.Round(Math.Abs(dDiff), 2);
                    }
                }

                string[] str = strSalesParty.Split(' ');
                string strParty = strSalesParty.Replace(str[0] + " ", "");
                if (strRemark.Contains(strParty))
                    strRemark = (strParty + " " + strRemark).Trim();

                dFinalAmt = dGrossAmt + _dOtherAmt;
                if (dFinalAmt == dCashAmt)
                    strTickStatus = "True";
                else
                    dCashAmt = 0;

                string strQuery = "Declare @PartyCode nvarchar(250),@Station nvarchar(250),@Transport nvarchar(250),@BillCode nvarchar(50),@BillNo bigint, @SaleType nvarchar(250), @Region nvarchar(250), @IGSTAccount nvarchar(250),@SGSTAccount nvarchar(250),@ItemName nvarchar(250);"
                                + " if exists(Select BillNo from [SalesBook] Where [AttachedBill] = '" + strBillNo + "')  BEGIN  Select @BillNo = BillNo,@BillCode = BillCode from[SalesBook] Where [AttachedBill] = '" + strBillNo + "'   Select(@BillCode + ' ' + CAST(@BillNo as varchar)) as BillNo   return; END "
                                + " else begin Select @PartyCode = (AreaCode + AccountNo),@Region=(CASE WHEN SM.State=CState then 'LOCAL' else 'INTERSTATE' end),@Station=Station,@Transport=Transport from SupplierMaster SM OUTER APPLY (Select TOp 1 CD.StateName as CState  from CompanyDetails CD) _CD Where ((SM.AreaCode+SM.AccountNo) in ('" + strSalesParty + "') OR (SM.AreaCode+SM.AccountNo+' '+Name) = '" + strSalesParty + "' OR SM.OTHER in ('" + strSalesParty + "') OR SM.OTHER Like('" + strSalesParty + " %')) "
                                + " Select @SaleType = TaxName, @IGSTAccount = TaxAccountIGST, @SGSTAccount = TaxAccountSGST from SaleTypeMaster Where SaleType = 'SALES' and TaxIncluded = '" + _bInclude.ToString() + "' and Region = @Region "
                                + " Set @BillCode=''; Select @BillNo = (ISNULL(MAX(BillNO),1)+1), @BillCode = SBillCode from SalesBook Cross APPLY(Select Top 1 SBillCode from CompanySetting Where SBillCode = BillCode)PB Group by SBillCode "
                               + " if(@BillCode='') begin Set @BillNo=1; Select Top 1 @BillCode=SBillCode from CompanySetting end "
                                //+ " if not exists(Select BillNo from [SalesBook] Where [AttachedBill]='" + strBillNo + "' OR ([BillCode]=@BillCode and [BillNo]=@BillNo)  UNION ALL Select BillNo from [SalesRecord] Where [BillCode]=@BillCode and [BillNo]=@BillNo) begin "
                                + " INSERT INTO [dbo].[SalesBook] ([BillCode],[BillNo],[Date],[SalePartyID],[SubPartyID],[SalesType],[Station],[TransportName],[WaybillNo],[WayBillDate],[NoOfCase],[LRNumber],[LRDate],[LRTime],[PvtMarka],[Remark],[Description],[PackerName],[PackingDate],[CartonType],[CartonSize],[DisPer],[DisAmt],[TaxPer],[TaxAmt],[PackingAmt],[OtherSign],[OtherAmt],[PostageAmt],[GreenTax],[RoundOffSign],[RoundOffAmt],[TotalQty],[GrossAmt],[FinalAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[OrderNo],[AttachedBill],[PackedBillNo],[Description_1],[Description_2],[Description_3],[SpecialDscPer],[SpecialDscAmt],[CashAmt],[CardAmt],[CreditAmt],[SaleBillType],[TaxableAmt],[IntStatus],[PartSaleAmt]) VALUES  "
                                + " (@BillCode,@BillNo,'" + strDate + "',@PartyCode,'SELF',@SaleType,@Station,@Transport,'','','1','" + strLRNumber + "'," + strLRDate + ",'','','" + strRemark + "','+',''," + strPDate + ",'','', "
                                + " 0," + dDisc + "," + dTaxPer + "," + dTaxAmt + ",0,'+',0,0,0,'" + strROSign + "'," + dROValue + "," + dTotalQty + "," + dGrossAmt + "," + dFinalAmt + "," + dNetAmt + ",'" + MainPage.strLoginName + "','',1,0,'','" + strBillNo + "','','','',''," + dSpecialPer + "," + dSpecialAmt + "," + dCashAmt + "," + dCardAmt + "," + dNetAmt + ",'TRADING'," + dTaxableAmt + ",0,0)  "
                                + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                + " ('" + strDate + "',@PartyCode,'SALES A/C','DEBIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dNetAmt + "','DR','" + dFinalAmt + "','0','" + strTickStatus + "','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode)  ";

                if (dCashAmt > 0)
                {
                    strQuery += " Declare @CashName nvarchar(250); Select Top 1 @CashName=(AreaCode+AccountNo) from SupplierMaster Where Category='CASH SALE' "
                                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                    + " ('" + strDate + "',@CashName,'CASH RECEIVE','DEBIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@CashName,@PartyCode)  "
                                    + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
                                    + " ('" + strDate + "',@PartyCode,'CASH RECEIVE','CREDIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dCashAmt + "','CR','" + dFinalAmt + "','0','" + strTickStatus + "','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode,@CashName)  ";
                }


                strQuery += strInnerQuery;
                strQuery += " Declare @IGSTName nvarchar(250),@SGSTName nvarchar(250),@IGSTFullName nvarchar(250),@SGSTFullName nvarchar(250) ";

                if (dTaxAmt > 0)
                {
                    strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = @SaleType; "
                             + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end else begin"
                             + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end "
                             + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@SGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@SGSTName) end end end "
                             + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end end ";
                }

                //GST Details

                double _dTaxPer = 0, _dTaxAmt = 0;
                foreach (DataRow rows in _dtTax.Rows)
                {
                    _dTaxPer = ConvertObjectToDouble(rows["TaxPer"]);
                    _dTaxAmt = ConvertObjectToDouble(rows["TaxAmt"]);
                    strQuery += "if(@Region='LOCAL') begin  "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('SALES',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('SALES',@BillCode,@BillNo,@SGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) end "
                        + " else begin  INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('SALES',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer + "'," + _dTaxAmt + ",@Region,'',1) end ";

                }

                strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + "('SALES',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dNetAmt + ",'" + MainPage.strLoginName + "',1,0,'CREATION') ";

                strQuery += " Select( @BillCode+' '+CAST(@BillNo as varchar)) as BillNo end ";

                //   strQuery += " Select( @BillCode+' '+CAST(@BillNo as varchar)) as BillNo END ";



                //if (strCompanyCode == "")
                // strCompanyCode = MainPage.strDataBaseFile;
                if (strCompanyCode != MainPage.strDataBaseFile)
                    count = SearchDataOther.ExecuteNoQuery(strQuery, strCompanyCode, ref _strAttachBill);
            }
            catch
            {
            }
            return count;
        }



        public int SaveRecord_SaleReturnBook(string strSalesParty, string strMobileNo, DateTime dDate, string strSalesType, string SaleBillCode, string SaleBillNo, string SaleBillDate, string strInnerQuery, double dGrossAmt, double dTaxPer, double dTaxAmt, string strEntryType, double dTotalQty, double dNetAmount, DataTable _dtTax, string strCompanyCode, string strBillNo, bool _bInclude, string Remark, ref string _strAttachBill)
        {
            int count = 0;
            try
            {
                string strDate = "", strSaleBillDate = "NULL", strROSign = "+", strTickStatus = "False";
                strDate = dDate.ToString("MM/dd/yyyy h:mm:ss tt");
                if (SaleBillDate != "" && SaleBillDate.Length == 10)
                    strSaleBillDate = "'" + ConvertDateInExactFormat(SaleBillDate).ToString("MM/dd/yyyy hh:mm:ss") + "'";
                double _dOtherAmt = 0, dFinalAmt = 0, dTaxableAmt = dNetAmount - dTaxAmt;
                double dROValue = 0, dDiff = 0;
                double dNetAmt = Convert.ToDouble(dNetAmount.ToString("0"));
                dDiff = dNetAmt - dNetAmount;
                if (dDiff != 0)
                {
                    if (dDiff >= 0)
                    {
                        strROSign = "+";
                        dROValue = Math.Round(dDiff, 2);
                    }
                    else
                    {
                        strROSign = "-";
                        dROValue = Math.Round(Math.Abs(dDiff), 2);
                    }
                }
                strTickStatus = "True";

                string strQuery = "Declare @PartyCode nvarchar(250),@Station nvarchar(250),@Transport nvarchar(250),@BillCode nvarchar(50),@BillNo bigint, @SaleType nvarchar(250), @Region nvarchar(250), @IGSTAccount nvarchar(250),@SGSTAccount nvarchar(250),@ItemName nvarchar(250);"
                                + " if exists(Select BillNo from [SaleReturn] Where [AttachedBill] = '" + strBillNo + "')  BEGIN  Select @BillNo = BillNo,@BillCode = BillCode from [SaleReturn] Where [AttachedBill] = '" + strBillNo + "'   Select(@BillCode + ' ' + CAST(@BillNo as varchar)) as BillNo   return; END "
                                + " else begin Select @PartyCode = (AreaCode + AccountNo),@Region=(CASE WHEN SM.State=CState then 'LOCAL' else 'INTERSTATE' end),@Station=Station,@Transport=Transport from SupplierMaster SM OUTER APPLY (Select TOp 1 CD.StateName as CState  from CompanyDetails CD) _CD Where ((SM.AreaCode+SM.AccountNo) in ('" + strSalesParty + "') OR (SM.AreaCode+SM.AccountNo+' '+Name) = '" + strSalesParty + "' OR SM.OTHER in ('" + strSalesParty + "') OR SM.OTHER Like('" + strSalesParty + " %')) "
                                + " Select @SaleType = TaxName, @IGSTAccount = TaxAccountIGST, @SGSTAccount = TaxAccountSGST from SaleTypeMaster Where SaleType = 'SALES' and TaxIncluded = '" + _bInclude.ToString() + "' and Region = @Region "
                                + " Set @BillCode=''; Select @BillNo = (ISNULL(MAX(BillNO),1)+1), @BillCode = GReturnCode from SaleReturn Cross APPLY(Select Top 1 GReturnCode from CompanySetting Where GReturnCode = BillCode)PB Group by GReturnCode "
                                + " if(@BillCode='') begin Set @BillNo=1; Select Top 1 @BillCode=GReturnCode from CompanySetting end "
                                + " INSERT INTO [dbo].[SaleReturn] ([BillCode],[BillNo],[Date],[AttachedBill],[SalePartyID],[MobileNo],[SubPartyID],[SaleType],[EntryType],[Remark],[NetDiscount],[TaxPer],[TaxAmount],[PackingAmt],[RoundOffSign],[RoundOffAmt],[TotalQty],[GrossAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[CashAmt],[CreditAmt],[TaxableAmt],[SaleBillCode],[SaleBillNo],[OtherSign],[OtherAmt],[ServiceAmt],[OtherText],[OtherValue],[SaleBillDate],[DiscountType],[Description1],[Description2],[Description3],[ReturnType]) VALUES "
                                + " (@BillCode,@BillNo,'" + strDate + "','" + strBillNo + "',@PartyCode,'" + strMobileNo + "','SELF',@SaleType,'" + strEntryType + "','" + Remark + "',0," + dTaxPer + "," + dTaxAmt + ",0,'" + strROSign + "'," + dROValue + "," + dTotalQty + "," + dGrossAmt + "," + dNetAmt + ",'" + MainPage.strLoginName + "','',1,0,0,0,0,'" + SaleBillCode + "','" + SaleBillNo + "','+',0,0,'CURRENT',0," + strSaleBillDate + ",0,'','','','RETAIL') "
                                + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                + " ('" + strDate + "',@PartyCode,'SALE RETURN','CREDIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dNetAmt + "','CR','" + dFinalAmt + "','0','" + strTickStatus + "','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode)  ";

                strQuery += strInnerQuery;
                strQuery += " Declare @IGSTName nvarchar(250),@SGSTName nvarchar(250),@IGSTFullName nvarchar(250),@SGSTFullName nvarchar(250) ";

                if (dTaxAmt > 0)
                {
                    strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = @SaleType; "
                             + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end else begin"
                             + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end "
                             + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@SGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@SGSTName) end end end "
                             + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','DEBIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','CR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end end ";
                }
                //GST Details

                double _dTaxPer = 0, _dTaxAmt = 0;
                foreach (DataRow rows in _dtTax.Rows)
                {
                    _dTaxPer = ConvertObjectToDouble(rows["TaxPer"]);
                    _dTaxAmt = ConvertObjectToDouble(rows["TaxAmt"]);
                    strQuery += "if(@Region='LOCAL') begin  "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('SALERETURN',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('SALERETURN',@BillCode,@BillNo,@SGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) end "
                        + " else begin  INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('SALERETURN',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer + "'," + _dTaxAmt + ",@Region,'',1) end ";
                }

                strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + "('SALERETURN',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dNetAmt + ",'" + MainPage.strLoginName + "',1,0,'CREATION') ";

                strQuery += " Select( @BillCode+' '+CAST(@BillNo as varchar)) as BillNo end ";

                if (strCompanyCode != MainPage.strDataBaseFile)
                    count = SearchDataOther.ExecuteNoQuery(strQuery, strCompanyCode, ref _strAttachBill);
            }
            catch (Exception ex)
            {
            }
            return count;
        }


        public int SaveRecord_PurchaseReturnBook(string strPurchaseParty, DateTime dDate, string strSalesType, string PurchaseBillCode, string PurchaseBillNo, string PurchaseBillDate, string strInnerQuery, double dGrossAmt, double dTaxPer, double dTaxAmt, string strEntryType, double dTotalQty, double dNetAmount, DataTable _dtTax, string strCompanyCode, string strBillNo, bool _bInclude, double dCashAmt, string strOSign, double dOtherAmt, string strOtherValue, string strGSTNo, double dTaxFree, double dNetDiscount, string strRemark, ref string _strAttachBill)
        {
            int count = 0;
            try
            {
                string strDate = "", strPurchaseBillDate = "NULL", strROSign = "+", strTickStatus = "False";
                strDate = dDate.ToString("MM/dd/yyyy h:mm:ss tt");
                if (PurchaseBillDate != "" && PurchaseBillDate.Length == 10)
                    strPurchaseBillDate = "'" + ConvertDateInExactFormat(PurchaseBillDate).ToString("MM/dd/yyyy hh:mm:ss") + "'";
                double _dOtherAmt = 0, dFinalAmt = 0, dTaxableAmt = dNetAmount - dTaxAmt;
                double dROValue = 0, dDiff = 0;
                double dNetAmt = Convert.ToDouble(dNetAmount.ToString("0"));
                dDiff = dNetAmt - dNetAmount;
                if (dDiff != 0)
                {
                    if (dDiff >= 0)
                    {
                        strROSign = "+";
                        dROValue = Math.Round(dDiff, 2);
                    }
                    else
                    {
                        strROSign = "-";
                        dROValue = Math.Round(Math.Abs(dDiff), 2);
                    }
                }

                dFinalAmt = dGrossAmt + _dOtherAmt;

                if (dFinalAmt == dCashAmt)
                    strTickStatus = "True";
                else
                    dCashAmt = 0;

                string strQuery = "Declare @PartyCode nvarchar(250),@Station nvarchar(250),@Transport nvarchar(250),@BillCode nvarchar(50),@BillNo bigint, @PurchaseType nvarchar(250), @Region nvarchar(250), @IGSTAccount nvarchar(250),@SGSTAccount nvarchar(250),@ItemName nvarchar(250);"
                                + " if exists(Select BillNo from [PurchaseReturn] Where [AttachedBill] = '" + strBillNo + "')  BEGIN  Select @BillNo = BillNo,@BillCode = BillCode from [PurchaseReturn] Where [AttachedBill] = '" + strBillNo + "'   Select(@BillCode + ' ' + CAST(@BillNo as varchar)) as BillNo   return; END "
                                + " else begin Select @PartyCode = (AreaCode + AccountNo),@Region=(CASE WHEN SM.State=CState then 'LOCAL' else 'INTERSTATE' end),@Station=Station,@Transport=Transport from SupplierMaster SM OUTER APPLY (Select TOp 1 CD.StateName as CState  from CompanyDetails CD) _CD Where ((SM.AreaCode+SM.AccountNo) in ('" + strPurchaseParty + "') OR (SM.AreaCode+SM.AccountNo+' '+Name) = '" + strPurchaseParty + "' OR SM.OTHER in ('" + strPurchaseParty + "') OR SM.OTHER Like('" + strPurchaseParty + " %')) "
                                + " Select @PurchaseType = TaxName, @IGSTAccount = TaxAccountIGST, @SGSTAccount = TaxAccountSGST from SaleTypeMaster Where SaleType = 'PURCHASE' and TaxIncluded = '" + _bInclude.ToString() + "' and Region = @Region "
                                + " Set @BillCode=''; Select @BillNo = (ISNULL(MAX(BillNO),1)+1), @BillCode = PurchaseReturnCode from PurchaseReturn Cross APPLY(Select Top 1 PurchaseReturnCode from CompanySetting Where PurchaseReturnCode = BillCode)PB Group by PurchaseReturnCode "
                                + " if(@BillCode='') begin Set @BillNo=1; Select Top 1 @BillCode=PurchaseReturnCode from CompanySetting end "
                                + " INSERT INTO [dbo].[PurchaseReturn] ([BillCode],[BillNo],[Date],[AttachedBill],[PurchasePartyID],[PurchaseType],[EntryType],[Remark],[NetDiscount],[TaxPer],[TaxAmount],[RoundOffSign],[RoundOffAmt],[TotalQty],[GrossAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[TaxableAmt],[PurchaseBillCode],[PurchaseBillNo],[OtherSign],[OtherAmt],[OtherText],[OtherValue],[PurchaseBillDate],[Description1],[Description2],[Description3],[Other2],[ReverseCharge],[TaxFree]) VALUES "
                                + " (@BillCode,@BillNo,'" + strDate + "','" + strBillNo + "',@PartyCode,@PurchaseType,'" + strEntryType + "','" + strRemark + "'," + dNetDiscount + "," + dTaxPer + "," + dTaxAmt + ",'" + strROSign + "'," + dROValue + "," + dTotalQty + "," + dGrossAmt + "," + dNetAmt + ",'" + MainPage.strLoginName + "','',1,0," + dTaxableAmt + ",'" + PurchaseBillCode + "','" + PurchaseBillNo + "','" + strOSign + "'," + dOtherAmt + ",'CURRENT'," + strOtherValue + "," + strPurchaseBillDate + ",'','','','" + strGSTNo + "',''," + dTaxFree + ") "
                                + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                                + " ('" + strDate + "',@PartyCode,'PURCAHSE RETURN','DEBIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dNetAmt + "','CR','" + dFinalAmt + "','0','" + strTickStatus + "','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode)  ";


                strQuery += strInnerQuery;
                strQuery += " Declare @IGSTName nvarchar(250),@SGSTName nvarchar(250),@IGSTFullName nvarchar(250),@SGSTFullName nvarchar(250) ";

                if (dTaxAmt > 0)
                {
                    strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='PURCHASE' and TaxName = @PurchaseType; "
                             + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end else begin"
                             + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
                             + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end "
                             + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@SGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@SGSTName) end end end "
                             + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
                             + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end end ";
                }
                //GST Details

                double _dTaxPer = 0, _dTaxAmt = 0;
                foreach (DataRow rows in _dtTax.Rows)
                {
                    _dTaxPer = ConvertObjectToDouble(rows["TaxPer"]);
                    _dTaxAmt = ConvertObjectToDouble(rows["TaxAmt"]);
                    strQuery += "if(@Region='LOCAL') begin  "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('PURCHASERETURN',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) "
                        + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('PURCHASERETURN',@BillCode,@BillNo,@SGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) end "
                        + " else begin  INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
                        + " ('PURCHASERETURN',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer + "'," + _dTaxAmt + ",@Region,'',1) end ";
                }

                strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                         + "('PURCHASERETURN',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dNetAmt + ",'" + MainPage.strLoginName + "',1,0,'CREATION') ";

                strQuery += " Select( @BillCode+' '+CAST(@BillNo as varchar)) as BillNo end ";

                if (strCompanyCode != MainPage.strDataBaseFile)
                    count = SearchDataOther.ExecuteNoQuery(strQuery, strCompanyCode, ref _strAttachBill);
            }
            catch (Exception ex)
            {
            }
            return count;
        }


        //public int SaveRecord_SaleBook(string strSalesParty, DateTime dDate, string strInnerQuery, double dGrossAmt, double dTaxPer, double dTaxAmt, double dSpecialPer, double dSpecialAmt, double dTotalQty, double dNetAmount, string strLRNumber, string strLDate, DataTable _dtTax, string strCompanyCode, string strBillNo, bool _bInclude, double dCashAmt, ref string _strAttachBill)
        //{
        //    int count = 0;
        //    try
        //    {
        //        string strDate = "", strLRDate = "NULL", strPDate = "NULL", strROSign = "+", strTickStatus = "False";
        //        strDate = dDate.ToString("MM/dd/yyyy h:mm:ss tt");
        //        if (strLDate != "" && strLDate.Length == 10)
        //            strLRDate = "'" + ConvertDateInExactFormat(strLDate).ToString("MM/dd/yyyy hh:mm:ss") + "'";
        //        double dDisc = 0, _dOtherAmt = 0, dFinalAmt = 0,dTaxableAmt= dNetAmount- dTaxAmt;
        //        double dROValue = 0, dDiff = 0;
        //        double dNetAmt = Convert.ToDouble(dNetAmount.ToString("0"));
        //        dDiff = dNetAmt - dNetAmount;
        //        if (dDiff != 0)
        //        {
        //            if (dDiff >= 0)
        //            {
        //                strROSign = "+";
        //                dROValue = Math.Round(dDiff, 2);
        //            }
        //            else
        //            {
        //                strROSign = "-";
        //                dROValue = Math.Round(Math.Abs(dDiff), 2);
        //            }
        //        }

        //        dFinalAmt = dGrossAmt + _dOtherAmt;

        //        if (dFinalAmt == dCashAmt)
        //            strTickStatus = "True";
        //        else
        //            dCashAmt = 0;

        //        string strQuery = "Declare @PartyCode nvarchar(250),@Station nvarchar(250),@Transport nvarchar(250),@BillCode nvarchar(50),@BillNo bigint, @SaleType nvarchar(250), @Region nvarchar(250), @IGSTAccount nvarchar(250),@SGSTAccount nvarchar(250),@ItemName nvarchar(250);"
        //                        + " Select @PartyCode = (AreaCode + AccountNo),@Region=(CASE WHEN SM.State=CState then 'LOCAL' else 'INTERSTATE' end),@Station=Station,@Transport=Transport from SupplierMaster SM OUTER APPLY (Select TOp 1 CD.StateName as CState  from CompanyDetails CD) _CD Where ((SM.AreaCode+SM.AccountNo) in ('" + strSalesParty + "') OR (SM.AreaCode+SM.AccountNo+' '+Name) = '" + strSalesParty + "' OR SM.OTHER in ('" + strSalesParty + "') OR SM.OTHER Like('" + strSalesParty + " %')) "
        //                        + " Select @SaleType = TaxName, @IGSTAccount = TaxAccountIGST, @SGSTAccount = TaxAccountSGST from SaleTypeMaster Where SaleType = 'SALES' and TaxIncluded = '" + _bInclude.ToString() + "' and Region = @Region "
        //                        + " Set @BillCode=''; Select @BillNo = (ISNULL(MAX(BillNO),1)+1), @BillCode = SBillCode from SalesBook Cross APPLY(Select Top 1 SBillCode from CompanySetting Where SBillCode = BillCode)PB Group by SBillCode "
        //                       + " if(@BillCode='') begin Set @BillNo=1; Select Top 1 @BillCode=SBillCode from CompanySetting end "
        //                        + " if not exists(Select BillNo from [SalesBook] Where [AttachedBill]='" + strBillNo + "' OR ([BillCode]=@BillCode and [BillNo]=@BillNo)) begin "
        //                        + " INSERT INTO [dbo].[SalesBook] ([BillCode],[BillNo],[Date],[SalePartyID],[SubPartyID],[SalesType],[Station],[TransportName],[WaybillNo],[WayBillDate],[NoOfCase],[LRNumber],[LRDate],[LRTime],[PvtMarka],[Remark],[Description],[PackerName],[PackingDate],[CartonType],[CartonSize],[DisPer],[DisAmt],[TaxPer],[TaxAmt],[PackingAmt],[OtherSign],[OtherAmt],[PostageAmt],[GreenTax],[RoundOffSign],[RoundOffAmt],[TotalQty],[GrossAmt],[FinalAmt],[NetAmt],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[OrderNo],[AttachedBill],[PackedBillNo],[Description_1],[Description_2],[Description_3],[SpecialDscPer],[SpecialDscAmt],[CashAmt],[CardAmt],[CreditAmt],[SaleBillType],[TaxableAmt]) VALUES  "
        //                        + " (@BillCode,@BillNo,'" + strDate + "',@PartyCode,'SELF',@SaleType,@Station,@Transport,'','','1','" + strLRNumber + "'," + strLRDate + ",'','','','+',''," + strPDate + ",'','', "
        //                        + " 0," + dDisc + "," + dTaxPer + "," + dTaxAmt + ",0,'+',0,0,0,'" + strROSign + "'," + dROValue + "," + dTotalQty + "," + dGrossAmt + "," + dFinalAmt + "," + dNetAmt + ",'" + MainPage.strLoginName + "','',1,0,'','" + strBillNo + "','','','',''," + dSpecialPer + "," + dSpecialAmt + "," + dCashAmt + ",0," + dNetAmt + ",'TRADING'," + dTaxableAmt+")  "
        //                        + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
        //                        + " ('" + strDate + "',@PartyCode,'SALES A/C','DEBIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dNetAmt + "','DR','" + dFinalAmt + "','0','" + strTickStatus + "','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode)  ";

        //        if (dCashAmt > 0)
        //        {
        //            strQuery += " Declare @CashName nvarchar(250); Select Top 1 @CashName=(AreaCode+AccountNo) from SupplierMaster Where Category='CASH SALE' "
        //                            + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
        //                            + " ('" + strDate + "',@CashName,'CASH RECEIVE','DEBIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dCashAmt + "','DR','" + dCashAmt + "','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@CashName,@PartyCode)  "
        //                            + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID],[AccountStatusID]) VALUES  "
        //                            + " ('" + strDate + "',@PartyCode,'CASH RECEIVE','CREDIT',(@BillCode+' '+CAST(@BillNo as varchar)),'" + dCashAmt + "','CR','" + dFinalAmt + "','0','" + strTickStatus + "','',0,'" + MainPage.strLoginName + "','',0,0,0,@PartyCode,@CashName)  ";
        //        }


        //        strQuery += strInnerQuery;
        //        strQuery += " Declare @IGSTName nvarchar(250),@SGSTName nvarchar(250),@IGSTFullName nvarchar(250),@SGSTFullName nvarchar(250) ";

        //        if (dTaxAmt > 0)
        //        {
        //            strQuery += " Select @Region=Region,@IGSTName = TaxAccountIGST, @SGSTName = TaxAccountSGST from SaleTypeMaster Where SaleType='SALES' and TaxName = @SaleType; "
        //                     + " if(@IGSTName!='' OR @SGSTName!='') begin if(@Region='LOCAL') begin  if(@IGSTName=@SGSTName) begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
        //                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
        //                     + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end else begin"
        //                     + " if(@IGSTName!='') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; "
        //                     + " INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
        //                     + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end "
        //                     + " if (@SGSTName != '') begin Select @SGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@SGSTName;  INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
        //                     + " ('" + strDate + "',@SGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt / 2 + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@SGSTName) end end end "
        //                     + " else if (@IGSTName != '') begin Select @IGSTFullName =Name from SupplierMaster Where (AreaCode+CAST(AccountNo as nvarchar))=@IGSTName; INSERT INTO [dbo].[BalanceAmount] ([Date],[PartyName],[AccountStatus],[Status],[Description],[Amount],[AmountStatus],[FinalAmount],[JournalID],[Tick],[VoucherCode],[VoucherNo],[UserName],[UpdatedBy],[RemoteCode],[InsertStatus],[UpdateStatus],[AccountID]) VALUES  "
        //                     + " ('" + strDate + "',@IGSTFullName,'DUTIES & TAXES','CREDIT',@BillCode+' '+CAST(@BillNo as varchar),'" + dTaxAmt + "','DR','0','0','False','',0,'" + MainPage.strLoginName + "','',0,0,0,@IGSTName) end end ";
        //        }

        //        //GST Details

        //        double _dTaxPer = 0, _dTaxAmt = 0;
        //        foreach (DataRow rows in _dtTax.Rows)
        //        {
        //            _dTaxPer = ConvertObjectToDouble(rows["TaxPer"]);
        //            _dTaxAmt = ConvertObjectToDouble(rows["TaxAmt"]);
        //            strQuery += "if(@Region='LOCAL') begin  "
        //                + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
        //                + " ('SALES',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) "
        //                + " INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
        //                + " ('SALES',@BillCode,@BillNo,@SGSTAccount,'" + _dTaxPer / 2 + "'," + _dTaxAmt / 2 + ",@Region,'',1) end "
        //                + " else begin  INSERT INTO [dbo].[GSTDetails] ([BillType],[BillCode],[BillNo],[GSTAccount],[TaxRate],[TaxAmount],[TaxType],[HSNCode],[InsertStatus]) VALUES "
        //                + " ('SALES',@BillCode,@BillNo,@IGSTAccount,'" + _dTaxPer + "'," + _dTaxAmt + ",@Region,'',1) end ";

        //        }

        //        strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
        //                 + "('SALES',@BillCode,@BillNo,DATEADD(MINUTE,30,DATEADD(hh,5,GETUTCDATE()))," + dNetAmt + ",'" + MainPage.strLoginName + "',1,0,'CREATION') ";

        //        strQuery += " Select( @BillCode+' '+CAST(@BillNo as varchar)) as BillNo end ";

        //      //  strQuery += " end Select (@BillCode+' '+CAST(@BillNo as varchar)) as BillNo ";



        //        //if (strCompanyCode == "")
        //        // strCompanyCode = MainPage.strDataBaseFile;
        //        if (strCompanyCode != MainPage.strDataBaseFile)
        //            count = SearchDataOther.ExecuteNoQuery(strQuery, strCompanyCode, ref  _strAttachBill);
        //    }
        //    catch
        //    {
        //    }
        //    return count;
        //}


        public String ConvertObjToFormtdString(object objValue)
        {
            try
            {
                if (Convert.ToString(objValue) != "")
                {
                    int decimalPlaces = 0;
                    double d = (float)Convert.ToDouble(objValue);
                    if (Convert.ToString(d).Contains('.'))
                    {
                        string[] strVal = Convert.ToString(d).Split('.');
                        decimalPlaces = strVal[1].Length;
                    }
                    if (decimalPlaces == 1)
                        return d.ToString("N1", MainPage.indianCurancy);
                    else if (decimalPlaces == 2)
                        return d.ToString("N2", MainPage.indianCurancy);
                    else if (decimalPlaces == 3)
                        return d.ToString("N3", MainPage.indianCurancy);
                    else if (decimalPlaces == 4)
                        return d.ToString("N4", MainPage.indianCurancy);
                    else
                        return d.ToString("N0", MainPage.indianCurancy);
                }
                else
                    return "";
            }
            catch (Exception ex) { return ""; }
        }

        public static Task<DataTable> GetDataTableRecordAsync(string strQuery)
        {
            return Task.Run(() =>
            {
                SetConnectionNormal();
                MainPage.OpenConnection();
                DataTable dt = new DataTable();
                try
                {
                    strQuery = " SET QUERY_GOVERNOR_COST_LIMIT 0; " + strQuery;
                    SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                    adap.SelectCommand.CommandTimeout = 1000000;
                    adap.Fill(dt);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                finally
                {
                    MainPage.CloseConnection();
                }
                return dt;
            });
        }
        public static Task<DataSet> GetDataSetRecordAsync(string strQuery)
        {
            return Task.Run(() =>
            {
                SetConnectionNormal();
                MainPage.OpenConnection();
                DataSet ds = new DataSet();
                try
                {
                    strQuery = " SET QUERY_GOVERNOR_COST_LIMIT 0; " + strQuery;

                    SqlDataAdapter adap = new SqlDataAdapter(strQuery, MainPage.con);
                    adap.SelectCommand.CommandTimeout = 100000;
                    adap.Fill(ds);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    string[] strReport = { "ERROR", ex.Message};
                    CreateErrorReport(strReport);
                }
                finally
                {
                    MainPage.CloseConnection();
                }
                return ds;
            });
        }



        public int DownloadOrderDetails()
        {
            int count = 0;
            try
            {
                string strQuery = "", strSubQuery = "", strOrderCode = "", strAllSerialNo = "",strSchemeName;
                string strNetQuery = "Select *,(Select Top 1 SchemeName from SchemeMaster SM Where ActiveStatus=1 and SM.Remark!='' and SM.Remark=ISNULL(AOB.SchemeName,''))Scheme from AppOrderBooking AOB Where OrderCategory!='***' and Status='PENDING' and InsertStatus=1 and OrderCode in (Select OrderCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "') Select * from AppOrderDetails Where InsertStatus=1 and OrderCode in (Select OrderCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "')  Select ETD.* from EditTrailDetails ETD inner join AppOrderBooking AOB on ETD.BillCOde=AOB.OrderCode and ETD.BillNo=AOB.SerialNo and ETD.BillType='APPORDER' and EditStatus='CREATION' Where AOB.OrderCategory!='***' and AOB.Status='PENDING' and AOB.InsertStatus=1 and AOB.OrderCode in (Select OrderCode from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "') ";
                DataSet _ds = NetDBAccess.GetDataSetRecord(strNetQuery);
                if (_ds.Tables.Count > 0)
                {
                    DataTable table = _ds.Tables[0], dtDetails = _ds.Tables[1], _dt = _ds.Tables[2];

                    strQuery = "Declare @MaxSerialNo bigint; ";
                    if (table != null)
                    {
                        byte[] imgdata = new byte[0];
                        foreach (DataRow row in table.Rows)
                        {
                            strOrderCode = Convert.ToString(row["OrderCode"]);
                            if (strAllSerialNo != "")
                                strAllSerialNo += ",";
                          
                            strAllSerialNo += "'" + Convert.ToString(row["SerialNo"] + "" + row["NumberCode"]) + "'";

                            strSubQuery = GetOrderDetailsQuery(dtDetails, strOrderCode, row["SerialNo"]);
                            strSubQuery += GetEditTrailQuery(_dt, strOrderCode, row["SerialNo"]);

                            if (table.Columns.Contains("Scheme"))
                                strSchemeName = Convert.ToString(row["Scheme"]);
                            else
                                strSchemeName = Convert.ToString(row["SchemeName"]);

                            strQuery += " Select @MaxSerialNo=((ISNULL(MAX(SerialNo),0))+1) from OrderBooking Where (OrderCode='" + strOrderCode + "' OR OrderCode Like('%OD')) if(@MaxSerialNo is null) begin set @MaxSerialNo=1; end  "
                                     + " if not exists(Select OrderCode from OrderBooking Where OrderCode='" + strOrderCode + "' and OrderNo=" + row["OrderNo"] + " and NumberCode='" + row["NumberCode"] + "') begin "
                                     + " Insert into OrderBooking ([BookingNo],[Marketer],[OrderNo],[P_Party],[S_Party],[Station],[Items],[Pieces],[Quantity],[Amount],[Transport],[Booking],[Marka],[Haste],[Date],[Personal],[Status],[OrderCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[NumberCode],[SerialNo],[SalePartyID],[SubPartyID],[PurchasePartyID],[SchemeName],[OfferName],[MRemark],[AdjustedQty],[CancelQty],[Remark],[DeliveryDate],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[OrderType],[OrderCategory],[Imagepath1],[Imagepath2],[Imagepath3],[Imagepath4],[Imagepath5]) Values "
                                     + " ('" + row["BookingNo"] + "','" + row["Marketer"] + "','" + row["OrderNo"] + "','" + row["P_Party"] + "','" + row["S_Party"] + "','" + row["Station"] + "','" + row["Items"] + "','" + row["Pieces"] + "','" + row["Quantity"] + "'," + ConvertObjectToDoubleStatic(row["Amount"]) + ",'" + row["Transport"] + "','" + row["Booking"] + "','" + row["Marka"] + "','" + row["Haste"] + "','" + row["Date"] + "','" + row["Personal"] + "','" + row["Status"] + "','" + strOrderCode + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',1,0,'" + row["NumberCode"] + "',@MaxSerialNo,'" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["PurchasePartyID"] + "','" + strSchemeName + "','" + row["OfferName"] + "',N'" + row["MRemark"] + "'," + ConvertObjectToDoubleStatic(row["AdjustedQty"]) + "," + ConvertObjectToDoubleStatic(row["CancelQty"]) + ",N'" + row["Remark"] + "','" + row["DeliveryDate"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "','" + row["OrderType"] + "','" + row["OrderCategory"] + "','" + row["Imagepath1"] + "','" + row["Imagepath2"] + "','" + row["Imagepath3"] + "','" + row["Imagepath4"] + "','" + row["Imagepath5"] + "') "
                                     + strSubQuery.Replace("[SERIALNO]", "@MaxSerialNo") + " end ";
                        }
                    }

                }

                if (strQuery != "")
                {
                    count = ExecuteMyNonQuery(strQuery);
                    if (count > 0 && strAllSerialNo != "")
                    {
                        strQuery = " Update AppOrderBooking Set InsertStatus=0 Where OrderCategory!='***' and Status='PENDING' and OrderCode='" + strOrderCode + "' and (CAST(SerialNo as varchar)+NumberCode)  in (" + strAllSerialNo + ") Update AppOrderDetails Set InsertStatus=0 Where OrderCode='" + strOrderCode + "' and (CAST(SerialNo as varchar)+NumberCode) in (" + strAllSerialNo + ")"
                                 + GetSavedOrderQuery();
                        CreateDeleteQuery(strQuery);
                        //SendInternet objSend = new SendInternet(1);
                        //objSend.SendData();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            return count;
        }

        private string GetSavedOrderQuery()
        {
            string strQuery = "";
            try
            {
                DataTable _dt = GetDataTable(" Select * from OrderBooking Where InsertStatus=1 ");
                foreach (DataRow row in _dt.Rows)
                {
                    strQuery += " if not exists(Select OrderCode from OrderBooking Where OrderCode='" + row["OrderCode"] + "' and OrderNo=" + row["OrderNo"] + " and NumberCode='" + row["NumberCode"] + "') begin "
                             + " Insert into OrderBooking ([BookingNo],[Marketer],[OrderNo],[P_Party],[S_Party],[Station],[Items],[Pieces],[Quantity],[Amount],[Transport],[Booking],[Marka],[Haste],[Date],[Personal],[Status],[OrderCode],[CreatedBy],[UpdatedBy],[InsertStatus],[UpdateStatus],[NumberCode],[SerialNo],[SalePartyID],[SubPartyID],[PurchasePartyID],[SchemeName],[OfferName],[Remark],[AdjustedQty],[CancelQty],[MRemark],[DeliveryDate],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[OrderType],[OrderCategory],[Imagepath1],[Imagepath2],[Imagepath3],[Imagepath4],[Imagepath5]) Values "
                             + " ('" + row["BookingNo"] + "','" + row["Marketer"] + "','" + row["OrderNo"] + "','" + row["P_Party"] + "','" + row["S_Party"] + "','" + row["Station"] + "','" + row["Items"] + "','" + row["Pieces"] + "','" + row["Quantity"] + "'," + ConvertObjectToDoubleStatic(row["Amount"]) + ",'" + row["Transport"] + "','" + row["Booking"] + "','" + row["Marka"] + "','" + row["Haste"] + "','" + row["Date"] + "','" + row["Personal"] + "','" + row["Status"] + "','" + row["OrderCode"] + "','" + row["CreatedBy"] + "','" + row["UpdatedBy"] + "',0,0,'" + row["NumberCode"] + "','" + row["SerialNo"] + "','" + row["SalePartyID"] + "','" + row["SubPartyID"] + "','" + row["PurchasePartyID"] + "','" + row["SchemeName"] + "','" + row["OfferName"] + "',N'" + row["Remark"] + "'," + ConvertObjectToDoubleStatic(row["AdjustedQty"]) + "," + ConvertObjectToDoubleStatic(row["CancelQty"]) + ",N'" + row["MRemark"] + "','" + row["DeliveryDate"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "','" + row["OrderType"] + "','" + row["OrderCategory"] + "','" + row["Imagepath1"] + "','" + row["Imagepath2"] + "','" + row["Imagepath3"] + "','" + row["Imagepath4"] + "','" + row["Imagepath5"] + "') end ";
                }
            }
            catch { }
            return strQuery;
        }

        private string GetEditTrailQuery(DataTable _dt, object _objCode, object _objSerialNo)
        {
            string strQuery = "";
            try
            {
                DataRow[] rows = _dt.Select(" BillCode='" + _objCode + "' and BillNo=" + _objSerialNo + " ");
                foreach (DataRow row in rows)
                {
                    strQuery += " INSERT INTO [dbo].[EditTrailDetails] ([BillType],[BillCode],[BillNo],[Date],[NetAmt],[UpdatedBy],[InsertStatus],[UpdateStatus],[EditStatus]) VALUES "
                             + "('ORDER','" + row["BillCode"] + "',[SERIALNO],'" + row["Date"] + "'," + row["NetAmt"] + ",'" + row["UpdatedBy"] + "',1,0,'" + row["EditStatus"] + "') ";
                }
            }
            catch { }
            return strQuery;
        }

        private string GetOrderDetailsQuery(DataTable _dt, object _objCode, object _objSerialNo)
        {
            string strQuery = "";
            try
            {
                DataRow[] rows = _dt.Select(" OrderCode='" + _objCode + "' and SerialNo=" + _objSerialNo + " ");
                foreach (DataRow row in rows)
                {
                    strQuery += " INSERT INTO [dbo].[OrderDetails] ([OrderCode],[SerialNo],[OrderNo],[NumberCode],[ItemName],[DesignName],[Variant1],[Variant2],[Variant3],[Variant4],[Variant5],[Qty],[Rate],[Amount],[Remark],[RemoteID],[InsertStatus]) Values "
                             + " ('" + row["OrderCode"] + "',[SERIALNO]," + row["OrderNo"] + ",'" + row["NumberCode"] + "','" + row["ItemName"] + "','" + row["DesignName"] + "','" + row["Variant1"] + "','" + row["Variant2"] + "','" + row["Variant3"] + "','" + row["Variant4"] + "','" + row["Variant5"] + "'," + ConvertObjectToDouble(row["Qty"]) + "," + ConvertObjectToDouble(row["Rate"]) + "," + ConvertObjectToDouble(row["Amount"]) + ",'" + row["Remark"] + "'," + row["ID"] + ",1)";
                }
            }
            catch { }
            return strQuery;
        }

        public int DataMirroringInCurrentFinYear(string strQuery)
        {
            int _count = 0;
            try
            {
                DataTable _dt = BAL.GetCurrentFinancialYearCompany();
                foreach (DataRow row in _dt.Rows)
                {
                    _count += ExcecuteCurrentFinYearCompany(row["DBIP"], row["CCode"], row["DBUser"], row["DBPwd"], strQuery);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in Mirroring other firms : " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                _count = 0;
            }

            return _count;
        }

        private int ExcecuteCurrentFinYearCompany(object objIP, object objDBName, object objUser, object objPwd, string strQuery)
        {
            int count = 0;
            try
            {
                SqlConnection netCon = new SqlConnection(@"Data Source=" + objIP + ";Initial Catalog=" + objDBName + "; User Id=" + objUser + ";Password=" + objPwd + ";");
                if (netCon.State == ConnectionState.Closed)
                    netCon.Open();

                SqlTransaction transaction = netCon.BeginTransaction();
                try
                {
                    SqlCommand netCmd = new SqlCommand(strQuery, netCon, transaction);
                    netCmd.CommandTimeout = 100000;
                    count = netCmd.ExecuteNonQuery();
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    count = 0;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                count = 0;
            }
            return count;
        }

        public DataTable GetDatFromAllFirm(string strQuery)
        {
            DataTable _dTable = new DataTable();
            try
            {
                DataTable _dt = BAL.GetCurrentFinancialYearCompany();
                foreach (DataRow row in _dt.Rows)
                {
                    DataTable dt = GetDataTableCurrentFinYearCompany(row["DBIP"], row["CCode"], row["DBUser"], row["DBPwd"], strQuery);
                    if (dt.Rows.Count > 0)
                    {
                        if (_dTable.Rows.Count > 0)
                            _dTable.Merge(dt, true);
                        else
                            _dTable = dt;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in getting record from all firms : " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return _dTable;
        }

        public DataTable GetDatFromAllFirm_OtherCompany(string strQuery)
        {
            DataTable _dTable = new DataTable();
            try
            {
                DataTable _dt = BAL.GetCurrentFinancialYear_OtherCompany();
                foreach (DataRow row in _dt.Rows)
                {
                    DataTable dt = GetDataTableCurrentFinYearCompany(row["DBIP"], row["CCode"], row["DBUser"], row["DBPwd"], strQuery);
                    if (dt.Rows.Count > 0)
                    {
                        if (_dTable.Rows.Count > 0)
                            _dTable.Merge(dt, true);
                        else
                            _dTable = dt;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in getting record from all firms : " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return _dTable;
        }

        public DataSet GetDatFromAllFirm_OtherCompany_DS(string strQuery)
        {
            DataSet _ds = new DataSet();
            try
            {
                DataTable _dt = BAL.GetCurrentFinancialYear_OtherCompany();
                foreach (DataRow row in _dt.Rows)
                {
                    _ds = GetDataTableCurrentFinYearCompany_DS(row["DBIP"], row["CCode"], row["DBUser"], row["DBPwd"], strQuery);
                    if (_ds.Tables.Count > 0)
                    {
                        if (_ds.Tables[0].Rows.Count > 0)
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in getting record from all firms : " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            return _ds;

        }

        private DataTable GetDataTableCurrentFinYearCompany(object objIP, object objDBName, object objUser, object objPwd, string strQuery)
        {
            DataTable dt = new DataTable();
            try
            {
                SqlConnection netCon = new SqlConnection(@"Data Source=" + objIP + ";Initial Catalog=" + objDBName + "; User Id=" + objUser + ";Password=" + objPwd + ";");
                if (netCon.State == ConnectionState.Closed)
                    netCon.Open();

                SqlDataAdapter adap = new SqlDataAdapter(strQuery, netCon);
                adap.Fill(dt);
            }
            catch (Exception ex)
            {
            }
            return dt;
        }

        private DataSet GetDataTableCurrentFinYearCompany_DS(object objIP, object objDBName, object objUser, object objPwd, string strQuery)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlConnection netCon = new SqlConnection(@"Data Source=" + objIP + ";Initial Catalog=" + objDBName + "; User Id=" + objUser + ";Password=" + objPwd + ";");
                if (netCon.State == ConnectionState.Closed)
                    netCon.Open();

                SqlDataAdapter adap = new SqlDataAdapter(strQuery, netCon);
                adap.Fill(ds);
            }
            catch (Exception ex)
            {
            }
            return ds;
        }

        public bool SendSaleInvoiceChangesAlert(string strBillNo, double dOldAmt, double dNetAmt)
        {
            try
            {
                object objMobileNo = ExecuteMyScalar("Select MobileNo from CompanySetting Where CompanyName='" + MainPage.strCompanyName + "' ");
                string strMobileNo = Convert.ToString(objMobileNo), strMessage = "";
                if (strMobileNo != "")
                {
                    strMessage = "Sale bill No : " + strBillNo + " changed by " + MainPage.strLoginName + " on the date of : " + MainPage.strCurrentDate + ", Old invoice amt is : " + dOldAmt.ToString("N2", MainPage.indianCurancy) + " and updated invoice amt is : " + dNetAmt.ToString("N2", MainPage.indianCurancy);
                    SendSMS objSMS = new SendSMS();
                    objSMS.SendSingleSMS(strMessage, strMobileNo);
                    return true;
                }
            }
            catch { }
            return false;
        }

        protected internal bool CheckSaleQtyFroSaleReturn(DataTable dt, string strBillCode, string strBillNo, DataGridView dgrdDetails, Label lblMsg)
        {
            string strQuery = "", strSubQuery = "", strNCQuery = "";
            try
            {
                foreach (DataRow row in dt.Rows)
                {
                    if (strQuery != "")
                    {
                        strQuery += " UNION ALL ";
                        strNCQuery += " UNION ALL ";
                    }

                    strQuery += " Select  BarCode,ItemName,Variant1,Variant2,SUM(PQty+SQty) Qty from ( "
                         + " Select BarCode,ItemName, Variant1, Variant2, SUM(Qty)PQty, 0 SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('SALES') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                         + " Select BarCode,ItemName,Variant1,Variant2,0 PQty,-SUM(Qty) SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('SALERETURN') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                         + " Select BarCode,ItemName,Variant1,Variant2,SUM(Qty) PQty,0 SQty from StockMaster Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo + " and BarCode='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' Group by BarCode,ItemName,Variant1,Variant2 "
                         + " UNION ALL Select  '" + row["barCode"] + "' as BarCode, '" + row["ItemName"] + "' as ItemName,'" + row["Variant1"] + "' as Variant1,'" + row["Variant2"] + "' as Variant2,0 as PQty, -" + row["Qty"] + " Qty )Stock Group by BarCode,ItemName, Variant1, Variant2 ";

                    strNCQuery += " Select BarCode,ItemName,Variant1,Variant2,SUM(PQty+SQty) Qty from ( "
                             + " Select BarCode,ItemName, Variant1, Variant2, SUM(Qty)PQty, 0 SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('SALES') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                             + " Select BarCode,ItemName,Variant1,Variant2,0 PQty,-SUM(Qty) SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('SALERETURN') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                             + " Select BarCode,ItemName,Variant1,Variant2,SUM(Qty) PQty,0 SQty from StockMaster Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo + " and ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " Group by BarCode,ItemName,Variant1,Variant2 "
                             + " )Stock Group by BarCode,ItemName, Variant1, Variant2 ";

                }

                if (strQuery != "")
                {
                    DataTable _dTable = null, _dtNC = null;
                    if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                    {
                        //strQuery = " Select * from ( " + strQuery + " )StockMaster Where Qty<0 ";
                        _dTable = GetDataTable(strQuery);
                    }
                    else
                    {
                        if (MainPage._bCustomPurchase)
                        {
                            //if (!MainPage._bTaxStatus)
                            _dTable = GetDataTable(strQuery);
                            // else
                            //   _dTable = SearchDataOther.GetDataTable_NC(strQuery);
                        }
                        else
                        {
                            _dTable = GetDataTable(strQuery);
                            _dtNC = SearchDataOther.GetDataTable_NC(strNCQuery);
                            if (_dtNC != null && _dtNC.Rows.Count > 0)
                                _dTable.Merge(_dtNC, true);
                        }
                    }

                    DataTable _dtStock = Generate_Stock_Table(_dTable);
                    bool _bStatus = SetOutOfStockColor(_dtStock, dgrdDetails);
                    if (!_bStatus)
                    {
                        lblMsg.Text = "Red color item is out of stock ! Unable to generate sale bill !!";
                        lblMsg.ForeColor = Color.Red;
                        return false;
                    }
                    else
                    {
                        lblMsg.Text = "";
                        lblMsg.ForeColor = Color.DarkGreen;
                        return true;
                    }
                }
            }
            catch (Exception ex) { MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
            return false;
        }

        protected internal bool CheckQtyAvalability(DataTable dt, string strBillCode, string strBillNo, DataGridView dgrdDetails, Label lblMsg)
        {
            string strQuery = "", strSubQuery = "", strNCQuery = "";
            try
            {
                foreach (DataRow row in dt.Rows)
                {
                    strSubQuery = "";

                    if (strQuery != "")
                    {
                        strQuery += " UNION ALL ";
                        strNCQuery += " UNION ALL ";
                    }

                    strQuery += " Select  BarCode,ItemName,Variant1,Variant2,SUM(PQty+SQty) Qty from ( "
                         + " Select BarCode,ItemName, Variant1, Variant2, SUM(Qty)PQty, 0 SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('OPENING', 'PURCHASE', 'SALERETURN','STOCKIN') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                         + " Select BarCode,ItemName,Variant1,Variant2,0 PQty,-SUM(Qty) SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('SALES','PURCHASERETURN','STOCKOUT') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                         + " Select Distinct Description as BarCode,ItemName,ISNULL(Variant1,'')Variant1,ISNULL(Variant2,'')Variant1,1000 PQty,0 SQty  from Items _Im left join ItemSecondary _IS on _Im.BillCode=_IS.BillCode and _IM.BillNo=_IS.BillNo WHere (Other Like('%WITHOUT%') and Other Like('%STOCK%')) UNION ALL "
                         + " Select BarCode,ItemName,Variant1,Variant2,SUM(Qty) PQty,0 SQty from StockMaster Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo + " and BarCode='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " Group by BarCode,ItemName,Variant1,Variant2 "
                         + " UNION ALL Select  '" + row["barCode"] + "' as BarCode, '" + row["ItemName"] + "' as ItemName,'" + row["Variant1"] + "' as Variant1,'" + row["Variant2"] + "' as Variant2,0 as PQty, -" + row["Qty"] + " Qty )Stock Group by BarCode,ItemName, Variant1, Variant2 ";

                    strNCQuery += " Select BarCode,ItemName,Variant1,Variant2,SUM(PQty+SQty) Qty from ( "
                             + " Select BarCode,ItemName, Variant1, Variant2, SUM(Qty)PQty, 0 SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('OPENING', 'PURCHASE', 'SALERETURN','STOCKIN') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                             + " Select BarCode,ItemName,Variant1,Variant2,0 PQty,-SUM(Qty) SQty from StockMaster Where ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " and BillType in ('SALES','PURCHASERETURN','STOCKOUT') Group by BarCode,ItemName,Variant1,Variant2 UNION ALL "
                             + " Select BarCode,ItemName,Variant1,Variant2,SUM(Qty) PQty,0 SQty from StockMaster Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo + " and ISNULL(BarCode,'')='" + row["BarCode"] + "' and ItemName='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and Variant2='" + row["Variant2"] + "' " + strSubQuery + " Group by BarCode,ItemName,Variant1,Variant2 "
                             + " )Stock Group by BarCode,ItemName, Variant1, Variant2 ";

                }

                if (strQuery != "")
                {
                    DataTable _dTable = null, _dtNC = null;
                    if (MainPage.strCompanyName.Contains("SARAOGI") && MainPage.strSoftwareType == "AGENT")
                    {
                        //strQuery = " Select * from ( " + strQuery + " )StockMaster Where Qty<0 ";
                        _dTable = GetDataTable(strQuery);
                    }
                    else
                    {
                        if (MainPage._bCustomPurchase)
                        {
                            //if (!MainPage._bTaxStatus)
                            _dTable = GetDataTable(strQuery);
                            // else
                            //   _dTable = SearchDataOther.GetDataTable_NC(strQuery);
                        }
                        else
                        {
                            _dTable = GetDataTable(strQuery);
                            _dtNC = SearchDataOther.GetDataTable_NC(strNCQuery);
                            if (_dtNC != null && _dtNC.Rows.Count > 0)
                                _dTable.Merge(_dtNC, true);
                        }
                    }

                    DataTable _dtStock = Generate_Stock_Table(_dTable);
                    bool _bStatus = SetOutOfStockColor(_dtStock, dgrdDetails);
                    if (!_bStatus)
                    {
                        lblMsg.Text = "Red color item is out of stock ! Unable to generate sale bill !!";
                        lblMsg.ForeColor = Color.Red;
                        return false;
                    }
                    else
                    {
                        lblMsg.Text = "";
                        lblMsg.ForeColor = Color.DarkGreen;
                        return true;
                    }
                }
            }
            catch (Exception ex) { MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); }
            return false;
        }

        protected internal DataTable Generate_Stock_Table(DataTable dt)
        {
            DataTable dTable = new DataTable();
            if (dt.Rows.Count > 0)
            {
                dTable = dt.DefaultView.ToTable(true, "BarCode", "ItemName", "Variant1", "Variant2");
                dTable.Columns.Add("Quantity", typeof(String));
                object objValue = "";
                foreach (DataRow row in dTable.Rows)
                {
                    objValue = dt.Compute("Sum(Qty)", "BarCode='" + row["BarCode"] + "' and ItemName ='" + row["ItemName"] + "' and Variant1='" + row["Variant1"] + "' and [Variant2]='" + row["Variant2"] + "' ");
                    row["Quantity"] = objValue;
                }
            }
            return dTable;
        }

        protected internal bool SetOutOfStockColor(DataTable dt, DataGridView dgrdDetails)
        {
            string strBarCode = "", strItemName = "", strVariant1 = "", strVariant2 = "";
            double dQty = 0;
            bool _bStatus = true;
            try
            {
                if (dt.Rows.Count > 0)
                {
                    DataRow[] rows = null;
                    foreach (DataGridViewRow _row in dgrdDetails.Rows)
                    {
                        strBarCode = Convert.ToString(_row.Cells["barCode"].Value);
                        strItemName = Convert.ToString(_row.Cells["itemName"].Value);
                        strVariant1 = Convert.ToString(_row.Cells["variant1"].Value);
                        strVariant2 = Convert.ToString(_row.Cells["variant2"].Value);
                        rows = dt.Select("BarCode= '" + strBarCode + "' and ItemName='" + strItemName + "' and Variant1 ='" + strVariant1 + "' and[Variant2] = '" + strVariant2 + "' ");

                        if (rows.Length > 0)
                        {
                            dQty = ConvertObjectToDouble(rows[0]["Quantity"]);
                            if (dQty < 0)
                            {
                                _row.DefaultCellStyle.BackColor = Color.Tomato;
                                _bStatus = false;
                            }
                            else
                                _row.DefaultCellStyle.BackColor = Color.WhiteSmoke;
                        }
                        else
                            _row.DefaultCellStyle.BackColor = Color.WhiteSmoke;
                    }
                }
                //}
            }
            catch (Exception ex)
            {
                MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                _bStatus = false;
            }
            return _bStatus;
        }

        protected internal void ChangeFocusColor(object sender, EventArgs e)
        {
            try
            {
                if (sender is TextBox)
                {
                    TextBox tb = sender as TextBox;
                    if (tb != null)
                    {
                        tb.BackColor = Color.Khaki;
                    }
                }
                else if (sender is MaskedTextBox)
                {
                    MaskedTextBox mtb = sender as MaskedTextBox;
                    if (mtb != null)
                    {
                        mtb.BackColor = Color.Khaki;

                        mtb.Focus();
                        mtb.SelectionStart = 0;
                        mtb.SelectionLength = mtb.TextLength;
                    }
                }
            }
            catch { }
        }

        protected internal void ChangeLeaveColor(object sender, EventArgs e)
        {
            try
            {
                if (sender is TextBox)
                {
                    TextBox tb = sender as TextBox;
                    if (tb != null)
                    {
                        tb.BackColor = Color.White;
                    }
                }
                else if (sender is MaskedTextBox)
                {
                    MaskedTextBox mtb = sender as MaskedTextBox;
                    if (mtb != null)
                    {
                        mtb.BackColor = Color.White;
                    }
                }
            }
            catch { }
        }


        protected internal void ChangeCellFocusColor(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (sender is DataGridView)
                {
                    DataGridView dgrd = sender as DataGridView;
                    if (dgrd != null)
                    {
                        dgrd.Rows[e.RowIndex].Cells[e.ColumnIndex].Style.BackColor = Color.Khaki;
                    }
                }
            }
            catch { }
        }

        protected internal void ChangeCellLeaveColor(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (sender is DataGridView)
                {
                    DataGridView dgrd = sender as DataGridView;
                    if (dgrd != null)
                    {
                        dgrd.Rows[e.RowIndex].Cells[e.ColumnIndex].Style.BackColor = Color.White;
                    }
                }
            }
            catch { }
        }

        protected internal void SendTCSEmailWhatsapp(string strInvType, string strSerialCode, string strSerialNo, bool _bMsgStatus, bool _emailStatus, bool _whatsappStatus, bool _smsStatus)
        {
            try
            {
                string strEmailID = "", strWhatsappNo = "", strMobileNo = "", strAmount = "";
                string strPath = ExportTCSPDFFile(strInvType, strSerialCode, strSerialNo, ref strEmailID, ref strMobileNo, ref strWhatsappNo, ref strAmount);
                if (strPath != "")
                {

                    if (strEmailID != "" && _emailStatus)
                    {
                        CreateTCSEmailBody(strEmailID, strPath, strInvType, strSerialCode, strSerialNo);
                    }
                    if (strWhatsappNo != "" && _whatsappStatus)
                    {
                        SendWhatsappMessage_TCS(strWhatsappNo, strPath, strInvType, strSerialCode, strSerialNo, _bMsgStatus);
                    }
                    if (strMobileNo != "" && _smsStatus)
                        SendSMSToParty_TCS(strMobileNo, strInvType, strSerialCode, strSerialNo, strAmount);
                }
            }
            catch { }
        }

        private void CreateTCSEmailBody(string strEmail, string strpath, string strInvoiceType, string strBillCode, string strBillNo)
        {
            try
            {

                string strMessage = "", strSub = "";

                if (strInvoiceType == "DEBITNOTE")
                {
                    strMessage = "TCS Debit note with  bill no. : <b>" + strBillCode + " " + strBillNo + " </b> is attached with this mail, please find it.";
                    strSub = "TCS debit note bill no :  " + strBillCode + " " + strBillNo + "";
                }
                else
                {
                    strMessage = "TCS credit note with  bill no. : <b>" + strBillCode + " " + strBillNo + " </b> is attached with this mail, please find it.";
                    strSub = "TCS credit note bill no :  " + strBillCode + " " + strBillNo + "";
                }

                bool bStatus = DataBaseAccess.SendEmail(strEmail, strSub, strMessage, strpath, "", strInvoiceType, false);

            }
            catch
            {
            }
        }

        private void SendWhatsappMessage_TCS(string strMobileNo, string strPath, string strInvType, string strSerialCode, string strSerialNo, bool _bMsgStatus)
        {
            string _strFileName = strSerialCode.Replace("18-19/", "").Replace("19-20/", "").Replace("20-21/", "").Replace("21-22/", "").Replace("22-23/", "") + "_" + strSerialNo + ".pdf", strMessage = "", strBranchCode = strSerialCode;
            if (!strBranchCode.Contains("-"))
                strBranchCode = "18-19/" + strBranchCode;
            string strWhastappMessage = "";
            string strFilePath = MainPage.strHttpPath + "/SALEBILL/" + strBranchCode + "/" + _strFileName;

            bool _bStatus = UploadSaleBillPDFFile(strPath, _strFileName, strBranchCode);
            if (!_bStatus)
            {
                DialogResult _updateResult = MessageBox.Show("Unable to send whatsapp message due to internet connectivity, Please retry !!", "Warning", MessageBoxButtons.RetryCancel, MessageBoxIcon.Warning);
                if (_updateResult == DialogResult.Retry)
                    _bStatus = UploadSaleBillPDFFile(strPath, _strFileName, strBranchCode);
            }

            if (_bStatus)
            {
                strWhastappMessage = "\"variable1\": \"" + strInvType + "\",\"variable2\": \"" + strSerialCode + " " + strSerialNo + "\",";
                string strResult = WhatsappClass.SendWhatsappWithIMIMobile(strMobileNo, "tcsnote_pdf", strWhastappMessage, "", strFilePath);

                if (strResult != "")
                    MessageBox.Show("Thank you ! Whatsapp messsage sent successfully !", "Message", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        private void SendSMSToParty_TCS(string strMobileNo, string strInvType, string strSerialCode, string strSerialNo, string strAmount)
        {
            try
            {

                SendSMS objSMS = new SendSMS();
                string strMessage = "";

                if (strInvType == "DEBITNOTE")
                    strMessage = "TCS debit note with bill no : " + strSerialCode + " " + strSerialNo + ", with AMT : " + strAmount.Replace(",", "") + " .";
                else
                    strMessage = "TCS credit note with bill no : " + strSerialCode + " " + strSerialNo + ", with AMT : " + strAmount.Replace(",", "") + " .";

                objSMS.SendSingleSMS(strMessage, strMobileNo);

            }
            catch //(Exception ex)
            {
                //MessageBox.Show("Sorry ! " + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private string ExportTCSPDFFile(string strInvType, string strSerialCode, string strSerialNo, ref string strEmailID, ref string strMobileNo, ref string strWhatsappNo, ref string strAmount)
        {
            string strFileName = strInvType + "_" + strSerialNo + ".pdf";
            string strNewPath = MainPage.strServerPath + "\\PDF Files\\" + MainPage.strCompanyName + "\\TCS";
            string strPath = strNewPath + "\\" + strFileName;

            if (File.Exists(strPath))
                File.Delete(strPath);

            Directory.CreateDirectory(strNewPath);

            DataTable dt = CreateDataTable_TCS(strInvType, strSerialCode, strSerialNo, ref strEmailID, ref strMobileNo, ref strWhatsappNo, ref strAmount);
            if (dt.Rows.Count > 0)
            {
                if (dt.Rows.Count > 0)
                {
                    Reporting.CryTCSDetailNote report = new SSS.Reporting.CryTCSDetailNote();
                    report.SetDataSource(dt);

                    if (strPath != "" && strPath.Contains("\\"))
                    {
                        report.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, strPath);
                    }
                    report.Close();
                    report.Dispose();
                }
            }
            else
            {
                strPath = "";
            }
            return strPath;
        }

        protected internal DataTable CreateDataTable_TCS(string strInvoiceType, string strSerialCode, string strSerialNo, ref string strEmailID, ref string strMobileNo, ref string strWhatsappNo, ref string strAmount)
        {
            DataTable myDataTable = new DataTable();
            try
            {
                myDataTable.Columns.Add("HeaderName", typeof(String));
                myDataTable.Columns.Add("Headerimage", typeof(byte[]));
                myDataTable.Columns.Add("BrandLogo", typeof(byte[]));
                myDataTable.Columns.Add("CompanyTIN", typeof(String));
                myDataTable.Columns.Add("CompanyAddress", typeof(String));
                myDataTable.Columns.Add("CompanyEmail", typeof(String));
                myDataTable.Columns.Add("CompanyGSTNo", typeof(String));
                myDataTable.Columns.Add("CINNo", typeof(String));
                myDataTable.Columns.Add("SerialNo", typeof(String));
                myDataTable.Columns.Add("Date", typeof(String));
                myDataTable.Columns.Add("VoucherNo", typeof(String));
                myDataTable.Columns.Add("AccountName", typeof(String));
                myDataTable.Columns.Add("Remarks", typeof(String));
                myDataTable.Columns.Add("Amount", typeof(String));
                myDataTable.Columns.Add("TCSPer", typeof(String));
                myDataTable.Columns.Add("TCSAmt", typeof(String));
                myDataTable.Columns.Add("PartyMob", typeof(String));
                myDataTable.Columns.Add("PartyAddress", typeof(String));
                myDataTable.Columns.Add("PartyGSTNo", typeof(String));
                myDataTable.Columns.Add("PartyPanNo", typeof(String));
                myDataTable.Columns.Add("AadharNo", typeof(String));
                myDataTable.Columns.Add("State", typeof(String));
                myDataTable.Columns.Add("ForCompany", typeof(String));
                myDataTable.Columns.Add("PrintedBy", typeof(String));
                myDataTable.Columns.Add("Website", typeof(String));
                DataRow row = myDataTable.NewRow();

                string strQuery = "select Address,PinCode,EmailID,GSTNo,TINNo,CINNumber,StateName,Website from CompanyDetails where Other = '" + MainPage.strCompanyName + "'"
                             + " Select VoucherCode,VoucherNo,Amount,TCSPer,TCSAmt,SR.Remark,Convert(varchar,SR.Date,103)BDate,(AccountID+' '+Name) PartyName,ISNULL(dbo.GetFullName(TCSAccountID),'') TCSParty,MobileNo,Address,GSTNo,PANNumber,CardNumber,State,EmailID,MobileNo,SOD.WaybillUserName as WhatsappNo  from TCSDetails SR inner join SupplierMaster SM on SR.AccountID=(SM.AreaCode+SM.AccountNo) left join SupplierOtherDetails SOD on SM.AreaCode=SOD.AreaCode and SM.AccountNo=SOD.AccountNo Where InvoiceType='" + strInvoiceType + "' and BillCode='" + strSerialCode + "' and BillNo=" + strSerialNo;
                DataSet ds = DataBaseAccess.GetDataSetRecord(strQuery);
                if (ds.Tables.Count > 0)
                {
                    DataTable dtCompanyDetails = ds.Tables[0];
                    DataTable dtPartyDetails = ds.Tables[1];

                    if (strInvoiceType == "DEBITNOTE")
                        row["HeaderName"] = "TCS Debit Note";
                    if (strInvoiceType == "CREDITNOTE")
                        row["HeaderName"] = "TCS Credit Note";

                    if (dtPartyDetails.Rows.Count > 0)
                    {
                        DataRow _drow = dtPartyDetails.Rows[0];

                        row["HeaderImage"] = MainPage._headerImage;
                        row["BrandLogo"] = MainPage._brandLogo;
                        row["SerialNo"] = strSerialCode + " " + strSerialNo;
                        row["Date"] = _drow["BDate"];
                        row["VoucherNo"] = _drow["BDate"] + " " + _drow["BDate"];
                        row["AccountName"] = _drow["PartyName"];
                        row["Remarks"] = _drow["Remark"];
                        row["Amount"] = ConvertObjectToDouble(_drow["Amount"]).ToString("N2", MainPage.indianCurancy);
                        row["TCSPer"] = ConvertObjectToDouble(_drow["TCSPer"]).ToString("N3", MainPage.indianCurancy);
                        row["TCSAmt"] = strAmount = ConvertObjectToDouble(_drow["TCSAmt"]).ToString("N2", MainPage.indianCurancy);
                        row["ForCompany"] = "For " + MainPage.strCompanyName;
                        row["PrintedBy"] = MainPage.strLoginName + " ,  Date : " + MainPage.strCurrentDate + " " + DateTime.Now.ToString("hh:mm tt");

                        myDataTable.Rows.Add(row);

                        if (dtCompanyDetails.Rows.Count > 0)
                        {
                            DataRow drow = dtCompanyDetails.Rows[0];
                            row["CompanyTIN"] = "H.O. :- " + drow["TINNo"];
                            row["CompanyAddress"] = "Address :- " + drow["Address"] + "," + drow["StateName"] + "," + drow["PinCode"];
                            row["CompanyEmail"] = drow["EmailID"];
                            if (Convert.ToString(row["CompanyEmail"]) != "")
                                row["CompanyEmail"] = "Email :- " + drow["EmailID"];
                            row["CompanyGSTNo"] = drow["GSTNo"];
                            row["CINNo"] = drow["CINNumber"];
                            row["Website"] = drow["Website"];
                            if (Convert.ToString(row["Website"]) != "")
                                row["Website"] = "Website :- " + drow["Website"];
                        }

                        strMobileNo = Convert.ToString(_drow["MobileNo"]);
                        strEmailID = Convert.ToString(_drow["EmailID"]);
                        strWhatsappNo = Convert.ToString(_drow["WhatsappNo"]);

                        row["PartyMob"] = _drow["MobileNo"];
                        row["PartyAddress"] = _drow["Address"];
                        row["PartyGSTNo"] = _drow["GSTNo"];
                        row["PartyPanNo"] = _drow["PANNumber"];
                        row["AadharNo"] = _drow["CardNumber"];
                        row["State"] = _drow["State"];

                    }
                }
            }
            catch (Exception ex)
            { }
            return myDataTable;
        }

        public static DataSet GetDataTabletFromCSVFile(string csv_file_path)
        {
            DataTable csvData = new DataTable();
            try
            {

                using (Microsoft.VisualBasic.FileIO.TextFieldParser csvReader = new Microsoft.VisualBasic.FileIO.TextFieldParser(csv_file_path))
                {
                    csvReader.SetDelimiters(new string[] { "," });
                    csvReader.HasFieldsEnclosedInQuotes = true;
                    string[] colFields = csvReader.ReadFields();
                    foreach (string column in colFields)
                    {
                        DataColumn datecolumn = new DataColumn(column);
                        datecolumn.AllowDBNull = true;
                        csvData.Columns.Add(datecolumn);
                    }

                    while (!csvReader.EndOfData)
                    {
                        string[] fieldData = csvReader.ReadFields();
                        //Making empty value as null
                        for (int i = 0; i < fieldData.Length; i++)
                        {
                            if (fieldData[i] == "")
                            {
                                fieldData[i] = null;
                            }
                        }
                        csvData.Rows.Add(fieldData);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            DataSet _ds = new DataSet();
            _ds.Tables.Add(csvData);
            return _ds;
        }
        
        protected internal void BindTaxDetails(DataGridView dgrdTax, DataTable _dt, DataRow _row, ref double dMaxRate, ref double dTTaxAmt, ref double dTaxableAmt)
        {
            try
            {
                dgrdTax.Rows.Clear();
                if (_dt.Rows.Count > 0)
                {
                    dgrdTax.Rows.Add(_dt.Rows.Count);
                    int _index = 0;
                    string strRegion = Convert.ToString(_row["Region"]), strIGST = Convert.ToString(_row["IGSTName"]), strSGST = Convert.ToString(_row["SGSTName"]); ;
                    if (strRegion == "LOCAL")
                        dgrdTax.Rows.Add(_dt.Rows.Count);
                    double dTaxRate = 0, dTaxAmt = 0, _dTaxAmt = 0;

                    foreach (DataRow row in _dt.Rows)
                    {
                        dTaxRate = ConvertObjectToDouble(row["TaxRate"]);
                        dTaxAmt = ConvertObjectToDouble(row["Amt"]);
                        dTaxableAmt += ConvertObjectToDouble(row["TaxableAmt"]);
                        if (_dt.Columns.Contains("TaxAmt"))
                            _dTaxAmt = Math.Round(ConvertObjectToDouble(row["TaxAmt"]),2);
                        else
                            _dTaxAmt = Convert.ToDouble(dTaxAmt.ToString("0.00"));
                        dTTaxAmt += _dTaxAmt;

                        if (dTaxRate > dMaxRate)
                            dMaxRate = dTaxRate;

                        dgrdTax.Rows[_index].Cells["taxName"].Value = strIGST;
                        dgrdTax.Rows[_index].Cells["taxType"].Value = strRegion;

                        if (strRegion == "LOCAL")
                        {
                            dgrdTax.Rows[_index].Cells["taxRate"].Value = (dTaxRate / 2).ToString("N2", MainPage.indianCurancy);
                            dgrdTax.Rows[_index].Cells["taxAmt"].Value = (dTaxAmt / 2).ToString("N4", MainPage.indianCurancy);
                            _index++;
                            dgrdTax.Rows[_index].Cells["taxName"].Value = strSGST;
                            dgrdTax.Rows[_index].Cells["taxType"].Value = strRegion;
                            dgrdTax.Rows[_index].Cells["taxRate"].Value = (dTaxRate / 2).ToString("N2", MainPage.indianCurancy);
                            dgrdTax.Rows[_index].Cells["taxAmt"].Value = (dTaxAmt / 2).ToString("N4", MainPage.indianCurancy);
                        }
                        else
                        {
                            dgrdTax.Rows[_index].Cells["taxRate"].Value = dTaxRate.ToString("N2", MainPage.indianCurancy);
                            dgrdTax.Rows[_index].Cells["taxAmt"].Value = dTaxAmt.ToString("N4", MainPage.indianCurancy);
                        }

                        _index++;
                    }
                }
            }
            catch(Exception ex) { throw ex; }
        }


        protected internal void ShowTransactionBook(string strBillType, string strBillCode, string strBillNo)
        {
            try
            {
                if (strBillType == "SALES")
                {
                    if (MainPage.strSoftwareType == "AGENT")
                    {
                        if (strBillCode.Contains("PTN"))
                        {
                            SaleBook_Trading objSale = new SaleBook_Trading(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                        else
                        {
                            SaleBook objSale = new SaleBook(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                    }
                    else if (MainPage.strSoftwareType == "RETAIL")
                    {
                        if (Screen.PrimaryScreen.Bounds.Width < 1100)
                        {
                            SaleBook_Retail_POS objSaleBill_Retail = new SaleBook_Retail_POS(strBillCode, strBillNo);
                            objSaleBill_Retail.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSaleBill_Retail.ShowInTaskbar = true;
                            objSaleBill_Retail.Show();
                        }
                        else
                        {
                            SaleBook_Retail objSaleBill_Retail = new SaleBook_Retail(strBillCode, strBillNo);
                            objSaleBill_Retail.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSaleBill_Retail.ShowInTaskbar = true;
                            objSaleBill_Retail.Show();
                        }
                    }
                    else if (MainPage.strSoftwareType == "RES_RETAIL")
                    {
                        SaleBook_Restorent objSale = new SaleBook_Restorent(strBillCode, strBillNo);
                        objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                        objSale.ShowInTaskbar = true;
                        objSale.Show();
                    }
                    else
                    {
                        if (MainPage._bCustomPurchase)
                        {
                            SaleBook_Retail_Custom objSale = new SaleBook_Retail_Custom(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                        else
                        {
                            SaleBook_Trading objSale = new SaleBook_Trading(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                    }
                }
                else if (strBillType == "PURCHASE")
                {
                    if (MainPage.strSoftwareType == "AGENT")
                    {
                        if (strBillCode.Contains("PTN"))
                        {
                            PurchaseBook_Trading objSale = new PurchaseBook_Trading(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                        else
                        {
                            GoodscumPurchase objSale = new GoodscumPurchase(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                    }
                    else
                    {
                        if (MainPage._bCustomPurchase)
                        {
                            PurchaseBook_Retail_Custom objPurchaseBook_Retail = new PurchaseBook_Retail_Custom(strBillCode, strBillNo);
                            objPurchaseBook_Retail.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objPurchaseBook_Retail.ShowInTaskbar = true;
                            objPurchaseBook_Retail.Show();
                        }
                        else
                        {
                            PurchaseBook_Retail_Merge objPurchaseBook_Retail = new PurchaseBook_Retail_Merge(strBillCode, strBillNo);
                            objPurchaseBook_Retail.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objPurchaseBook_Retail.ShowInTaskbar = true;
                            objPurchaseBook_Retail.Show();
                        }
                    }
                }
                else if (strBillType == "SALE RETURN")
                {

                    if (MainPage.strSoftwareType == "AGENT")
                    {
                        if (strBillCode.Contains("PTN"))
                        {
                            SaleReturn_Trading objSale = new SaleReturn_Trading(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                        else
                        {

                            SaleReturn objSale = new SaleReturn(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                    }
                    else if (MainPage.strSoftwareType == "RETAIL" || MainPage._bCustomPurchase)
                    {
                        SaleReturn_Retail objSale = new SaleReturn_Retail(strBillCode, strBillNo);
                        objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                        objSale.ShowInTaskbar = true;
                        objSale.Show();
                    }
                    else
                    {
                        SaleReturn_Trading objSale = new SaleReturn_Trading(strBillCode, strBillNo);
                        objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                        objSale.ShowInTaskbar = true;
                        objSale.Show();
                    }
                }
                else if (strBillType == "PURCHASE RETURN")
                {

                    if (MainPage.strSoftwareType == "AGENT")
                    {
                        if (strBillCode.Contains("PTN"))
                        {
                            PurchaseReturn_Trading objSale = new PurchaseReturn_Trading(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                        else
                        {

                            PurchaseReturn objSale = new PurchaseReturn(strBillCode, strBillNo);
                            objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                            objSale.ShowInTaskbar = true;
                            objSale.Show();
                        }
                    }
                    else //if (MainPage.strSoftwareType == "RETAIL" || MainPage._bCustomPurchase)
                    {
                        PurchaseReturn_Retail objSale = new PurchaseReturn_Retail(strBillCode, strBillNo);
                        objSale.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                        objSale.ShowInTaskbar = true;
                        objSale.Show();
                    }
                }
                else if (strBillType == "OPENING")
                {
                    if (MainPage.bArticlewiseOpening)
                    {
                        ItemMaster objItemMaster = new ItemMaster(strBillCode, strBillNo, false);
                        objItemMaster.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                        objItemMaster.ShowInTaskbar = true;
                        objItemMaster.Show();
                    }
                    else
                    {
                        DesignMaster objDesignMaster = new DesignMaster(strBillCode, strBillNo, false);
                        objDesignMaster.FormBorderStyle = FormBorderStyle.FixedToolWindow;
                        objDesignMaster.ShowInTaskbar = true;
                        objDesignMaster.Show();
                    }
                }
            }
            catch { }
        }

        public void SelectInTextBox(object sender, int StartIndex, int SelectionLength)
        {
            try
            {

                if (sender is TextBox)
                {
                    TextBox tb = sender as TextBox;
                    if (tb != null)
                    {
                        int Slength = (SelectionLength > 0) ? SelectionLength : tb.TextLength;
                        tb.Focus();
                        tb.SelectionStart = StartIndex;
                        tb.SelectionLength = Slength;
                    }
                }
                else if (sender is MaskedTextBox)
                {
                    MaskedTextBox mtb = sender as MaskedTextBox;
                    if (mtb != null)
                    {
                        int Slength = (SelectionLength > 0) ? SelectionLength : mtb.TextLength;
                        mtb.Focus();
                        mtb.SelectionStart = StartIndex;
                        mtb.SelectionLength = Slength;
                    }
                }
            }
            catch { }
        }


        public DataTable CreateTradingWayBillDataTable(string strBillCode, string strBillNo)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("WayBillNo", typeof(String));
            dt.Columns.Add("WayBillDate", typeof(String));
            dt.Columns.Add("EnteredBy", typeof(String));
            dt.Columns.Add("ValidFrom", typeof(String));
            dt.Columns.Add("SupplierGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDispatch", typeof(String));
            dt.Columns.Add("CustomerGSTNo", typeof(String));
            dt.Columns.Add("PlaceOfDelivery", typeof(String));
            dt.Columns.Add("BillNo", typeof(String));
            dt.Columns.Add("BillDate", typeof(String));
            dt.Columns.Add("ValueOfGoods", typeof(String));
            dt.Columns.Add("HSNCode", typeof(String));
            dt.Columns.Add("ReasonForTransportation", typeof(String));
            dt.Columns.Add("Transporter", typeof(String));
            dt.Columns.Add("Other", typeof(String));
            dt.Columns.Add("ApproxDistance", typeof(String));
            dt.Columns.Add("BarcodeNo", typeof(String));
            dt.Columns.Add("BarcodeNumber", typeof(String));
            dt.Columns.Add("TransactionType", typeof(String));

            string strWayBill = "", strGSTNo = "", strCustomerGSTNo, strSupplierGSTNo = "", strBarCodeNumber = "", strTransactionType = "Regular";
            string strQuery = " Select WayBillNo,WayBillDate,CD.GSTNo,CD.FullCompanyName,CompanyName,PlaceOfSupply,SM.GSTNo CustomerGSTNo,SM.Name as CustomerName,PlaceOfDelivery, (BillCode+CAST(BillNo as varchar)) BillNo,CONVERT(varchar,[Date],103)BillDate,ROUND(CAST(SR.NetAmt as Money),0) NetAmt,(TR.GSTNo+' & '+SR.TransportName) Transporter, (Select Top 1 (Distance) Distance from PinCodeDistance Where ToPinCode=SM.PINCode) PDistance,SubPartyID,SR.IRNNo  from SalesBook SR OUTER APPLY (Select Top 1 SM2.Address, SM2.Station,SM2.State,SM2.PinCode from SupplierMaster SM2 Where (SM2.AreaCode+SM2.AccountNo)=SR.SubPartyID) SM2 Outer APPLY (Select Top 1 Name,GSTNo,(CASE WHEN SubPartyID!='SELF' then (SM2.Address+' '+ SR.Station+','+SM2.State+'-'+SM2.PinCode) else (Address+' '+SR.Station+','+State+'-'+PinCode) end) PlaceOfDelivery,(CASE WHEN SubPartyID='SELF' then SM.PINCode else SM2.PINCode end)PINCode from SupplierMaster SM Where (AreaCode+AccountNo)=SR.SalePartyID) SM Outer Apply (Select TOp 1 GSTNo,FullCompanyName,CompanyName,(StateName+'-'+PinCode) PlaceOfSupply from CompanyDetails Order by ID asc) CD Outer Apply (Select TOP 1 TR.GSTNo from Transport TR Where TransportName=SR.TransportName) TR  Where BillCode='" + strBillCode + "' and BillNo=" + strBillNo
                            + " Select Max(Category)as Category,HSNCode,ItemName, Qty,COUNT(*)ItemCount from (Select LTRIM(RTRIM(REPLACE(REPLACE(SE.ItemName, GM.HSNCode, ''), ':', ''))) ItemName,Max(Category)as Category,GM.HSNCode,SUM(SE.Qty) Qty from SalesBookSecondary SE inner join SalesBook SR on SE.BillCode=SR.BillCode and SE.BIllNo=Sr.BillNo left join SaleTypeMaster SMN On SR.SalesType = SMN.TaxName  and SMN.SaleType = 'SALES' Outer APPLY(Select TOP 1 _IM.Other as Category,_IGM.Other, _IGM.HSNCode from Items _IM left join ItemGroupMaster _IGM on _IM.GroupName = _IGM.GroupName and _IGM.ParentGroup = '' left join TaxCategory _TC on _IGM.TaxCategoryName = _TC.CategoryName Where SE.ItemName = _IM.ItemName ) as GM Where SR.BillCode='" + strBillCode + "' and SR.BillNo=" + strBillNo + " Group by  LTRIM(RTRIM(REPLACE(REPLACE(SE.ItemName, GM.HSNCode, ''), ':', ''))),GM.HSNCode)Sales Group by HSNCode,ItemName, Qty Order by Qty desc ";
            DataSet ds = DataBaseAccess.GetDataSetRecord(strQuery);
            if (ds.Tables.Count > 0)
            {
                DataTable table = ds.Tables[0], dtDetails = ds.Tables[1];

                if (table.Rows.Count > 0 && dtDetails.Rows.Count > 0)
                {
                    DataRow dr = table.Rows[0];
                    DataRow row = dt.NewRow();
                    strBarCodeNumber = Convert.ToString(dr["WayBillNo"]).Replace(" ", "");
                    strWayBill = strBarCodeNumber;
                    strGSTNo = Convert.ToString(dr["GSTNo"]);
                    strCustomerGSTNo = Convert.ToString(dr["CustomerGSTNo"]);

                    if (Convert.ToString(dr["SubPartyID"]) != "SELF")
                        strTransactionType = "Bill To - Ship To";

                    strWayBill = strWayBill.Insert(4, " ").Insert(9, " ");
                    strSupplierGSTNo = strGSTNo.Insert(5, " ").Insert(11, " ");
                    if (strCustomerGSTNo != "")
                        strCustomerGSTNo = strCustomerGSTNo.Insert(5, " ").Insert(11, " ");
                    else
                    {
                        strCustomerGSTNo = "URP";
                        strTransactionType = "- NA -";
                    }

                    row["WayBillNo"] = strWayBill;
                    row["WayBillDate"] = dr["WayBillDate"];
                    row["EnteredBy"] = strSupplierGSTNo + " - " + dr["FullCompanyName"];
                    row["ValidFrom"] = "Not Valid for Movement as Part B is not entered [" + dr["PDistance"] + "Kms]";
                    row["SupplierGSTNo"] = strGSTNo + "," + dr["CompanyName"];
                    row["PlaceOfDispatch"] = dr["PlaceOfSupply"];
                    row["CustomerGSTNo"] = strCustomerGSTNo + " ," + dr["CustomerName"];
                    row["PlaceOfDelivery"] = Convert.ToString(dr["PlaceOfDelivery"]).Replace("\n", " ").Replace("\r", " ");
                    row["BillNo"] = dr["BillNo"];
                    row["BillDate"] = dr["BillDate"];
                    row["ValueOfGoods"] = Convert.ToDouble(dr["NetAmt"]);

                    int Count = Convert.ToInt32(dtDetails.Rows.Count);
                    string Category = dtDetails.Rows[0]["Category"].ToString();

                    Category = Category == "" ? "READYMADE GARMENT" : Category;
                    if (Count > 1)
                        row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - " + Category + " (+" + (Count - 1).ToString() + ")";
                    else
                        row["HSNCode"] = dtDetails.Rows[0]["HSNCode"] + " - " + Category;

                    row["ReasonForTransportation"] = "Outward - Supply";
                    row["Transporter"] = dr["Transporter"];
                    row["Other"] = MainPage.currentDate.ToString("M/d/yyyy");
                    row["ApproxDistance"] = dr["IRNNo"];
                    row["BarcodeNo"] = "*" + strBarCodeNumber + "*";
                    row["BarcodeNumber"] = strBarCodeNumber;
                    row["TransactionType"] = strTransactionType;

                    dt.Rows.Add(row);
                }
            }
            return dt;
        }

    }
}
